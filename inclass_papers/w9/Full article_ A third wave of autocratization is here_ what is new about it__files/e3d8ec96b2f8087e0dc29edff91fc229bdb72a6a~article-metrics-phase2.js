/**
 * Widget Name: article-metrics | Version: 1.4.36 | Date: 2025-01-14T15:16:00.000Z
 */

(function () {
    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function createCommonjsModule(fn, module) {
        return module = { exports: {} }, fn(module, module.exports), module.exports;
    }

    var runtime_1 = createCommonjsModule(function (module) {
        /**
         * Copyright (c) 2014-present, Facebook, Inc.
         *
         * This source code is licensed under the MIT license found in the
         * LICENSE file in the root directory of this source tree.
         */

        var runtime = function (exports) {

            var Op = Object.prototype;
            var hasOwn = Op.hasOwnProperty;
            var defineProperty = Object.defineProperty || function (obj, key, desc) {
                obj[key] = desc.value;
            };
            var undefined$1; // More compressible than void 0.
            var $Symbol = typeof Symbol === "function" ? Symbol : {};
            var iteratorSymbol = $Symbol.iterator || "@@iterator";
            var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
            var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
            function define(obj, key, value) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
                return obj[key];
            }
            try {
                // IE 8 has a broken Object.defineProperty that only works on DOM objects.
                define({}, "");
            } catch (err) {
                define = function (obj, key, value) {
                    return obj[key] = value;
                };
            }
            function wrap(innerFn, outerFn, self, tryLocsList) {
                // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
                var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
                var generator = Object.create(protoGenerator.prototype);
                var context = new Context(tryLocsList || []);

                // The ._invoke method unifies the implementations of the .next,
                // .throw, and .return methods.
                defineProperty(generator, "_invoke", {
                    value: makeInvokeMethod(innerFn, self, context)
                });
                return generator;
            }
            exports.wrap = wrap;

            // Try/catch helper to minimize deoptimizations. Returns a completion
            // record like context.tryEntries[i].completion. This interface could
            // have been (and was previously) designed to take a closure to be
            // invoked without arguments, but in all the cases we care about we
            // already have an existing method we want to call, so there's no need
            // to create a new function object. We can even get away with assuming
            // the method takes exactly one argument, since that happens to be true
            // in every case, so we don't have to touch the arguments object. The
            // only additional allocation required is the completion record, which
            // has a stable shape and so hopefully should be cheap to allocate.
            function tryCatch(fn, obj, arg) {
                try {
                    return {
                        type: "normal",
                        arg: fn.call(obj, arg)
                    };
                } catch (err) {
                    return {
                        type: "throw",
                        arg: err
                    };
                }
            }
            var GenStateSuspendedStart = "suspendedStart";
            var GenStateSuspendedYield = "suspendedYield";
            var GenStateExecuting = "executing";
            var GenStateCompleted = "completed";

            // Returning this object from the innerFn has the same effect as
            // breaking out of the dispatch switch statement.
            var ContinueSentinel = {};

            // Dummy constructor functions that we use as the .constructor and
            // .constructor.prototype properties for functions that return Generator
            // objects. For full spec compliance, you may wish to configure your
            // minifier not to mangle the names of these two functions.
            function Generator() {}
            function GeneratorFunction() {}
            function GeneratorFunctionPrototype() {}

            // This is a polyfill for %IteratorPrototype% for environments that
            // don't natively support it.
            var IteratorPrototype = {};
            define(IteratorPrototype, iteratorSymbol, function () {
                return this;
            });
            var getProto = Object.getPrototypeOf;
            var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
            if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
                // This environment has a native %IteratorPrototype%; use it instead
                // of the polyfill.
                IteratorPrototype = NativeIteratorPrototype;
            }
            var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
            GeneratorFunction.prototype = GeneratorFunctionPrototype;
            defineProperty(Gp, "constructor", {
                value: GeneratorFunctionPrototype,
                configurable: true
            });
            defineProperty(GeneratorFunctionPrototype, "constructor", {
                value: GeneratorFunction,
                configurable: true
            });
            GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction");

            // Helper for defining the .next, .throw, and .return methods of the
            // Iterator interface in terms of a single ._invoke method.
            function defineIteratorMethods(prototype) {
                ["next", "throw", "return"].forEach(function (method) {
                    define(prototype, method, function (arg) {
                        return this._invoke(method, arg);
                    });
                });
            }
            exports.isGeneratorFunction = function (genFun) {
                var ctor = typeof genFun === "function" && genFun.constructor;
                return ctor ? ctor === GeneratorFunction ||
                    // For the native GeneratorFunction constructor, the best we can
                    // do is to check its .name property.
                    (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
            };
            exports.mark = function (genFun) {
                if (Object.setPrototypeOf) {
                    Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
                } else {
                    genFun.__proto__ = GeneratorFunctionPrototype;
                    define(genFun, toStringTagSymbol, "GeneratorFunction");
                }
                genFun.prototype = Object.create(Gp);
                return genFun;
            };

            // Within the body of any async function, `await x` is transformed to
            // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
            // `hasOwn.call(value, "__await")` to determine if the yielded value is
            // meant to be awaited.
            exports.awrap = function (arg) {
                return {
                    __await: arg
                };
            };
            function AsyncIterator(generator, PromiseImpl) {
                function invoke(method, arg, resolve, reject) {
                    var record = tryCatch(generator[method], generator, arg);
                    if (record.type === "throw") {
                        reject(record.arg);
                    } else {
                        var result = record.arg;
                        var value = result.value;
                        if (value && typeof value === "object" && hasOwn.call(value, "__await")) {
                            return PromiseImpl.resolve(value.__await).then(function (value) {
                                invoke("next", value, resolve, reject);
                            }, function (err) {
                                invoke("throw", err, resolve, reject);
                            });
                        }
                        return PromiseImpl.resolve(value).then(function (unwrapped) {
                            // When a yielded Promise is resolved, its final value becomes
                            // the .value of the Promise<{value,done}> result for the
                            // current iteration.
                            result.value = unwrapped;
                            resolve(result);
                        }, function (error) {
                            // If a rejected Promise was yielded, throw the rejection back
                            // into the async generator function so it can be handled there.
                            return invoke("throw", error, resolve, reject);
                        });
                    }
                }
                var previousPromise;
                function enqueue(method, arg) {
                    function callInvokeWithMethodAndArg() {
                        return new PromiseImpl(function (resolve, reject) {
                            invoke(method, arg, resolve, reject);
                        });
                    }
                    return previousPromise =
                        // If enqueue has been called before, then we want to wait until
                        // all previous Promises have been resolved before calling invoke,
                        // so that results are always delivered in the correct order. If
                        // enqueue has not been called before, then it is important to
                        // call invoke immediately, without waiting on a callback to fire,
                        // so that the async generator function has the opportunity to do
                        // any necessary setup in a predictable way. This predictability
                        // is why the Promise constructor synchronously invokes its
                        // executor callback, and why async functions synchronously
                        // execute code before the first await. Since we implement simple
                        // async functions in terms of async generators, it is especially
                        // important to get this right, even though it requires care.
                        previousPromise ? previousPromise.then(callInvokeWithMethodAndArg,
                            // Avoid propagating failures to Promises returned by later
                            // invocations of the iterator.
                            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                }

                // Define the unified helper method that is used to implement .next,
                // .throw, and .return (see defineIteratorMethods).
                defineProperty(this, "_invoke", {
                    value: enqueue
                });
            }
            defineIteratorMethods(AsyncIterator.prototype);
            define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
                return this;
            });
            exports.AsyncIterator = AsyncIterator;

            // Note that simple async functions are implemented on top of
            // AsyncIterator objects; they just return a Promise for the value of
            // the final result produced by the iterator.
            exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
                if (PromiseImpl === void 0) PromiseImpl = Promise;
                var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
                return exports.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
                    : iter.next().then(function (result) {
                        return result.done ? result.value : iter.next();
                    });
            };
            function makeInvokeMethod(innerFn, self, context) {
                var state = GenStateSuspendedStart;
                return function invoke(method, arg) {
                    if (state === GenStateExecuting) {
                        throw new Error("Generator is already running");
                    }
                    if (state === GenStateCompleted) {
                        if (method === "throw") {
                            throw arg;
                        }

                        // Be forgiving, per GeneratorResume behavior specified since ES2015:
                        // ES2015 spec, step 3: https://262.ecma-international.org/6.0/#sec-generatorresume
                        // Latest spec, step 2: https://tc39.es/ecma262/#sec-generatorresume
                        return doneResult();
                    }
                    context.method = method;
                    context.arg = arg;
                    while (true) {
                        var delegate = context.delegate;
                        if (delegate) {
                            var delegateResult = maybeInvokeDelegate(delegate, context);
                            if (delegateResult) {
                                if (delegateResult === ContinueSentinel) continue;
                                return delegateResult;
                            }
                        }
                        if (context.method === "next") {
                            // Setting context._sent for legacy support of Babel's
                            // function.sent implementation.
                            context.sent = context._sent = context.arg;
                        } else if (context.method === "throw") {
                            if (state === GenStateSuspendedStart) {
                                state = GenStateCompleted;
                                throw context.arg;
                            }
                            context.dispatchException(context.arg);
                        } else if (context.method === "return") {
                            context.abrupt("return", context.arg);
                        }
                        state = GenStateExecuting;
                        var record = tryCatch(innerFn, self, context);
                        if (record.type === "normal") {
                            // If an exception is thrown from innerFn, we leave state ===
                            // GenStateExecuting and loop back for another invocation.
                            state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                            if (record.arg === ContinueSentinel) {
                                continue;
                            }
                            return {
                                value: record.arg,
                                done: context.done
                            };
                        } else if (record.type === "throw") {
                            state = GenStateCompleted;
                            // Dispatch the exception by looping back around to the
                            // context.dispatchException(context.arg) call above.
                            context.method = "throw";
                            context.arg = record.arg;
                        }
                    }
                };
            }

            // Call delegate.iterator[context.method](context.arg) and handle the
            // result, either by returning a { value, done } result from the
            // delegate iterator, or by modifying context.method and context.arg,
            // setting context.delegate to null, and returning the ContinueSentinel.
            function maybeInvokeDelegate(delegate, context) {
                var methodName = context.method;
                var method = delegate.iterator[methodName];
                if (method === undefined$1) {
                    // A .throw or .return when the delegate iterator has no .throw
                    // method, or a missing .next method, always terminate the
                    // yield* loop.
                    context.delegate = null;

                    // Note: ["return"] must be used for ES3 parsing compatibility.
                    if (methodName === "throw" && delegate.iterator["return"]) {
                        // If the delegate iterator has a return method, give it a
                        // chance to clean up.
                        context.method = "return";
                        context.arg = undefined$1;
                        maybeInvokeDelegate(delegate, context);
                        if (context.method === "throw") {
                            // If maybeInvokeDelegate(context) changed context.method from
                            // "return" to "throw", let that override the TypeError below.
                            return ContinueSentinel;
                        }
                    }
                    if (methodName !== "return") {
                        context.method = "throw";
                        context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method");
                    }
                    return ContinueSentinel;
                }
                var record = tryCatch(method, delegate.iterator, context.arg);
                if (record.type === "throw") {
                    context.method = "throw";
                    context.arg = record.arg;
                    context.delegate = null;
                    return ContinueSentinel;
                }
                var info = record.arg;
                if (!info) {
                    context.method = "throw";
                    context.arg = new TypeError("iterator result is not an object");
                    context.delegate = null;
                    return ContinueSentinel;
                }
                if (info.done) {
                    // Assign the result of the finished delegate to the temporary
                    // variable specified by delegate.resultName (see delegateYield).
                    context[delegate.resultName] = info.value;

                    // Resume execution at the desired location (see delegateYield).
                    context.next = delegate.nextLoc;

                    // If context.method was "throw" but the delegate handled the
                    // exception, let the outer generator proceed normally. If
                    // context.method was "next", forget context.arg since it has been
                    // "consumed" by the delegate iterator. If context.method was
                    // "return", allow the original .return call to continue in the
                    // outer generator.
                    if (context.method !== "return") {
                        context.method = "next";
                        context.arg = undefined$1;
                    }
                } else {
                    // Re-yield the result returned by the delegate method.
                    return info;
                }

                // The delegate iterator is finished, so forget it and continue with
                // the outer generator.
                context.delegate = null;
                return ContinueSentinel;
            }

            // Define Generator.prototype.{next,throw,return} in terms of the
            // unified ._invoke helper method.
            defineIteratorMethods(Gp);
            define(Gp, toStringTagSymbol, "Generator");

            // A Generator should always return itself as the iterator object when the
            // @@iterator function is called on it. Some browsers' implementations of the
            // iterator prototype chain incorrectly implement this, causing the Generator
            // object to not be returned from this call. This ensures that doesn't happen.
            // See https://github.com/facebook/regenerator/issues/274 for more details.
            define(Gp, iteratorSymbol, function () {
                return this;
            });
            define(Gp, "toString", function () {
                return "[object Generator]";
            });
            function pushTryEntry(locs) {
                var entry = {
                    tryLoc: locs[0]
                };
                if (1 in locs) {
                    entry.catchLoc = locs[1];
                }
                if (2 in locs) {
                    entry.finallyLoc = locs[2];
                    entry.afterLoc = locs[3];
                }
                this.tryEntries.push(entry);
            }
            function resetTryEntry(entry) {
                var record = entry.completion || {};
                record.type = "normal";
                delete record.arg;
                entry.completion = record;
            }
            function Context(tryLocsList) {
                // The root entry object (effectively a try statement without a catch
                // or a finally block) gives us a place to store values thrown from
                // locations where there is no enclosing try statement.
                this.tryEntries = [{
                    tryLoc: "root"
                }];
                tryLocsList.forEach(pushTryEntry, this);
                this.reset(true);
            }
            exports.keys = function (val) {
                var object = Object(val);
                var keys = [];
                for (var key in object) {
                    keys.push(key);
                }
                keys.reverse();

                // Rather than returning an object with a next method, we keep
                // things simple and return the next function itself.
                return function next() {
                    while (keys.length) {
                        var key = keys.pop();
                        if (key in object) {
                            next.value = key;
                            next.done = false;
                            return next;
                        }
                    }

                    // To avoid creating an additional object, we just hang the .value
                    // and .done properties off the next function object itself. This
                    // also ensures that the minifier will not anonymize the function.
                    next.done = true;
                    return next;
                };
            };
            function values(iterable) {
                if (iterable != null) {
                    var iteratorMethod = iterable[iteratorSymbol];
                    if (iteratorMethod) {
                        return iteratorMethod.call(iterable);
                    }
                    if (typeof iterable.next === "function") {
                        return iterable;
                    }
                    if (!isNaN(iterable.length)) {
                        var i = -1,
                            next = function next() {
                                while (++i < iterable.length) {
                                    if (hasOwn.call(iterable, i)) {
                                        next.value = iterable[i];
                                        next.done = false;
                                        return next;
                                    }
                                }
                                next.value = undefined$1;
                                next.done = true;
                                return next;
                            };
                        return next.next = next;
                    }
                }
                throw new TypeError(typeof iterable + " is not iterable");
            }
            exports.values = values;
            function doneResult() {
                return {
                    value: undefined$1,
                    done: true
                };
            }
            Context.prototype = {
                constructor: Context,
                reset: function (skipTempReset) {
                    this.prev = 0;
                    this.next = 0;
                    // Resetting context._sent for legacy support of Babel's
                    // function.sent implementation.
                    this.sent = this._sent = undefined$1;
                    this.done = false;
                    this.delegate = null;
                    this.method = "next";
                    this.arg = undefined$1;
                    this.tryEntries.forEach(resetTryEntry);
                    if (!skipTempReset) {
                        for (var name in this) {
                            // Not sure about the optimal order of these conditions:
                            if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
                                this[name] = undefined$1;
                            }
                        }
                    }
                },
                stop: function () {
                    this.done = true;
                    var rootEntry = this.tryEntries[0];
                    var rootRecord = rootEntry.completion;
                    if (rootRecord.type === "throw") {
                        throw rootRecord.arg;
                    }
                    return this.rval;
                },
                dispatchException: function (exception) {
                    if (this.done) {
                        throw exception;
                    }
                    var context = this;
                    function handle(loc, caught) {
                        record.type = "throw";
                        record.arg = exception;
                        context.next = loc;
                        if (caught) {
                            // If the dispatched exception was caught by a catch block,
                            // then let that catch block handle the exception normally.
                            context.method = "next";
                            context.arg = undefined$1;
                        }
                        return !!caught;
                    }
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        var record = entry.completion;
                        if (entry.tryLoc === "root") {
                            // Exception thrown outside of any try block that could handle
                            // it, so set the completion value of the entire function to
                            // throw the exception.
                            return handle("end");
                        }
                        if (entry.tryLoc <= this.prev) {
                            var hasCatch = hasOwn.call(entry, "catchLoc");
                            var hasFinally = hasOwn.call(entry, "finallyLoc");
                            if (hasCatch && hasFinally) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                } else if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }
                            } else if (hasCatch) {
                                if (this.prev < entry.catchLoc) {
                                    return handle(entry.catchLoc, true);
                                }
                            } else if (hasFinally) {
                                if (this.prev < entry.finallyLoc) {
                                    return handle(entry.finallyLoc);
                                }
                            } else {
                                throw new Error("try statement without catch or finally");
                            }
                        }
                    }
                },
                abrupt: function (type, arg) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                            var finallyEntry = entry;
                            break;
                        }
                    }
                    if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
                        // Ignore the finally entry if control is not jumping to a
                        // location outside the try/catch block.
                        finallyEntry = null;
                    }
                    var record = finallyEntry ? finallyEntry.completion : {};
                    record.type = type;
                    record.arg = arg;
                    if (finallyEntry) {
                        this.method = "next";
                        this.next = finallyEntry.finallyLoc;
                        return ContinueSentinel;
                    }
                    return this.complete(record);
                },
                complete: function (record, afterLoc) {
                    if (record.type === "throw") {
                        throw record.arg;
                    }
                    if (record.type === "break" || record.type === "continue") {
                        this.next = record.arg;
                    } else if (record.type === "return") {
                        this.rval = this.arg = record.arg;
                        this.method = "return";
                        this.next = "end";
                    } else if (record.type === "normal" && afterLoc) {
                        this.next = afterLoc;
                    }
                    return ContinueSentinel;
                },
                finish: function (finallyLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.finallyLoc === finallyLoc) {
                            this.complete(entry.completion, entry.afterLoc);
                            resetTryEntry(entry);
                            return ContinueSentinel;
                        }
                    }
                },
                "catch": function (tryLoc) {
                    for (var i = this.tryEntries.length - 1; i >= 0; --i) {
                        var entry = this.tryEntries[i];
                        if (entry.tryLoc === tryLoc) {
                            var record = entry.completion;
                            if (record.type === "throw") {
                                var thrown = record.arg;
                                resetTryEntry(entry);
                            }
                            return thrown;
                        }
                    }

                    // The context.catch method must only be called with a location
                    // argument that corresponds to a known catch block.
                    throw new Error("illegal catch attempt");
                },
                delegateYield: function (iterable, resultName, nextLoc) {
                    this.delegate = {
                        iterator: values(iterable),
                        resultName: resultName,
                        nextLoc: nextLoc
                    };
                    if (this.method === "next") {
                        // Deliberately forget the last sent value so that we don't
                        // accidentally pass it on to the delegate.
                        this.arg = undefined$1;
                    }
                    return ContinueSentinel;
                }
            };

            // Regardless of whether this script is executing as a CommonJS module
            // or not, return the runtime object so that we can declare the variable
            // regeneratorRuntime in the outer scope, which allows this module to be
            // injected easily by `bin/regenerator --include-runtime script.js`.
            return exports;
        }(
            // If this script is executing as a CommonJS module, use module.exports
            // as the regeneratorRuntime namespace. Otherwise create a new empty
            // object. Either way, the resulting object will be used to initialize
            // the regeneratorRuntime variable at the top of this file.
            module.exports);
        try {
            regeneratorRuntime = runtime;
        } catch (accidentalStrictMode) {
            // This module should not be running in strict mode, so the above
            // assignment should always work unless something is misconfigured. Just
            // in case runtime.js accidentally runs in strict mode, in modern engines
            // we can explicitly access globalThis. In older engines we can escape
            // strict mode using a global Function call. This could conceivably fail
            // if a Content Security Policy forbids using Function, but in that case
            // the proper solution is to fix the accidental strict mode problem. If
            // you've misconfigured your bundler to force strict mode and applied a
            // CSP to forbid Function, and you're not willing to fix either of those
            // problems, please detail your unique predicament in a GitHub issue.
            if (typeof globalThis === "object") {
                globalThis.regeneratorRuntime = runtime;
            } else {
                Function("r", "regeneratorRuntime = r")(runtime);
            }
        }
    });

    function asyncGeneratorStep(n, t, e, r, o, a, c) {
        try {
            var i = n[a](c),
                u = i.value;
        } catch (n) {
            return void e(n);
        }
        i.done ? t(u) : Promise.resolve(u).then(r, o);
    }
    function _asyncToGenerator(n) {
        return function () {
            var t = this,
                e = arguments;
            return new Promise(function (r, o) {
                var a = n.apply(t, e);
                function _next(n) {
                    asyncGeneratorStep(a, r, o, _next, _throw, "next", n);
                }
                function _throw(n) {
                    asyncGeneratorStep(a, r, o, _next, _throw, "throw", n);
                }
                _next(void 0);
            });
        };
    }
    function _regeneratorRuntime() {
        _regeneratorRuntime = function () {
            return e;
        };
        var t,
            e = {},
            r = Object.prototype,
            n = r.hasOwnProperty,
            o = Object.defineProperty || function (t, e, r) {
                t[e] = r.value;
            },
            i = "function" == typeof Symbol ? Symbol : {},
            a = i.iterator || "@@iterator",
            c = i.asyncIterator || "@@asyncIterator",
            u = i.toStringTag || "@@toStringTag";
        function define(t, e, r) {
            return Object.defineProperty(t, e, {
                value: r,
                enumerable: !0,
                configurable: !0,
                writable: !0
            }), t[e];
        }
        try {
            define({}, "");
        } catch (t) {
            define = function (t, e, r) {
                return t[e] = r;
            };
        }
        function wrap(t, e, r, n) {
            var i = e && e.prototype instanceof Generator ? e : Generator,
                a = Object.create(i.prototype),
                c = new Context(n || []);
            return o(a, "_invoke", {
                value: makeInvokeMethod(t, r, c)
            }), a;
        }
        function tryCatch(t, e, r) {
            try {
                return {
                    type: "normal",
                    arg: t.call(e, r)
                };
            } catch (t) {
                return {
                    type: "throw",
                    arg: t
                };
            }
        }
        e.wrap = wrap;
        var h = "suspendedStart",
            l = "suspendedYield",
            f = "executing",
            s = "completed",
            y = {};
        function Generator() {}
        function GeneratorFunction() {}
        function GeneratorFunctionPrototype() {}
        var p = {};
        define(p, a, function () {
            return this;
        });
        var d = Object.getPrototypeOf,
            v = d && d(d(values([])));
        v && v !== r && n.call(v, a) && (p = v);
        var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
        function defineIteratorMethods(t) {
            ["next", "throw", "return"].forEach(function (e) {
                define(t, e, function (t) {
                    return this._invoke(e, t);
                });
            });
        }
        function AsyncIterator(t, e) {
            function invoke(r, o, i, a) {
                var c = tryCatch(t[r], t, o);
                if ("throw" !== c.type) {
                    var u = c.arg,
                        h = u.value;
                    return h && "object" == typeof h && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) {
                        invoke("next", t, i, a);
                    }, function (t) {
                        invoke("throw", t, i, a);
                    }) : e.resolve(h).then(function (t) {
                        u.value = t, i(u);
                    }, function (t) {
                        return invoke("throw", t, i, a);
                    });
                }
                a(c.arg);
            }
            var r;
            o(this, "_invoke", {
                value: function (t, n) {
                    function callInvokeWithMethodAndArg() {
                        return new e(function (e, r) {
                            invoke(t, n, e, r);
                        });
                    }
                    return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
                }
            });
        }
        function makeInvokeMethod(e, r, n) {
            var o = h;
            return function (i, a) {
                if (o === f) throw Error("Generator is already running");
                if (o === s) {
                    if ("throw" === i) throw a;
                    return {
                        value: t,
                        done: !0
                    };
                }
                for (n.method = i, n.arg = a;;) {
                    var c = n.delegate;
                    if (c) {
                        var u = maybeInvokeDelegate(c, n);
                        if (u) {
                            if (u === y) continue;
                            return u;
                        }
                    }
                    if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) {
                        if (o === h) throw o = s, n.arg;
                        n.dispatchException(n.arg);
                    } else "return" === n.method && n.abrupt("return", n.arg);
                    o = f;
                    var p = tryCatch(e, r, n);
                    if ("normal" === p.type) {
                        if (o = n.done ? s : l, p.arg === y) continue;
                        return {
                            value: p.arg,
                            done: n.done
                        };
                    }
                    "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
                }
            };
        }
        function maybeInvokeDelegate(e, r) {
            var n = r.method,
                o = e.iterator[n];
            if (o === t) return r.delegate = null, "throw" === n && e.iterator.return && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y;
            var i = tryCatch(o, e.iterator, r.arg);
            if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y;
            var a = i.arg;
            return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y);
        }
        function pushTryEntry(t) {
            var e = {
                tryLoc: t[0]
            };
            1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e);
        }
        function resetTryEntry(t) {
            var e = t.completion || {};
            e.type = "normal", delete e.arg, t.completion = e;
        }
        function Context(t) {
            this.tryEntries = [{
                tryLoc: "root"
            }], t.forEach(pushTryEntry, this), this.reset(!0);
        }
        function values(e) {
            if (e || "" === e) {
                var r = e[a];
                if (r) return r.call(e);
                if ("function" == typeof e.next) return e;
                if (!isNaN(e.length)) {
                    var o = -1,
                        i = function next() {
                            for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next;
                            return next.value = t, next.done = !0, next;
                        };
                    return i.next = i;
                }
            }
            throw new TypeError(typeof e + " is not iterable");
        }
        return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
            value: GeneratorFunctionPrototype,
            configurable: !0
        }), o(GeneratorFunctionPrototype, "constructor", {
            value: GeneratorFunction,
            configurable: !0
        }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) {
            var e = "function" == typeof t && t.constructor;
            return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name));
        }, e.mark = function (t) {
            return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t;
        }, e.awrap = function (t) {
            return {
                __await: t
            };
        }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () {
            return this;
        }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) {
            void 0 === i && (i = Promise);
            var a = new AsyncIterator(wrap(t, r, n, o), i);
            return e.isGeneratorFunction(r) ? a : a.next().then(function (t) {
                return t.done ? t.value : a.next();
            });
        }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () {
            return this;
        }), define(g, "toString", function () {
            return "[object Generator]";
        }), e.keys = function (t) {
            var e = Object(t),
                r = [];
            for (var n in e) r.push(n);
            return r.reverse(), function next() {
                for (; r.length;) {
                    var t = r.pop();
                    if (t in e) return next.value = t, next.done = !1, next;
                }
                return next.done = !0, next;
            };
        }, e.values = values, Context.prototype = {
            constructor: Context,
            reset: function (e) {
                if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t);
            },
            stop: function () {
                this.done = !0;
                var t = this.tryEntries[0].completion;
                if ("throw" === t.type) throw t.arg;
                return this.rval;
            },
            dispatchException: function (e) {
                if (this.done) throw e;
                var r = this;
                function handle(n, o) {
                    return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o;
                }
                for (var o = this.tryEntries.length - 1; o >= 0; --o) {
                    var i = this.tryEntries[o],
                        a = i.completion;
                    if ("root" === i.tryLoc) return handle("end");
                    if (i.tryLoc <= this.prev) {
                        var c = n.call(i, "catchLoc"),
                            u = n.call(i, "finallyLoc");
                        if (c && u) {
                            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                        } else if (c) {
                            if (this.prev < i.catchLoc) return handle(i.catchLoc, !0);
                        } else {
                            if (!u) throw Error("try statement without catch or finally");
                            if (this.prev < i.finallyLoc) return handle(i.finallyLoc);
                        }
                    }
                }
            },
            abrupt: function (t, e) {
                for (var r = this.tryEntries.length - 1; r >= 0; --r) {
                    var o = this.tryEntries[r];
                    if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                        var i = o;
                        break;
                    }
                }
                i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null);
                var a = i ? i.completion : {};
                return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a);
            },
            complete: function (t, e) {
                if ("throw" === t.type) throw t.arg;
                return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y;
            },
            finish: function (t) {
                for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                    var r = this.tryEntries[e];
                    if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
                }
            },
            catch: function (t) {
                for (var e = this.tryEntries.length - 1; e >= 0; --e) {
                    var r = this.tryEntries[e];
                    if (r.tryLoc === t) {
                        var n = r.completion;
                        if ("throw" === n.type) {
                            var o = n.arg;
                            resetTryEntry(r);
                        }
                        return o;
                    }
                }
                throw Error("illegal catch attempt");
            },
            delegateYield: function (e, r, n) {
                return this.delegate = {
                    iterator: values(e),
                    resultName: r,
                    nextLoc: n
                }, "next" === this.method && (this.arg = t), y;
            }
        }, e;
    }
    function _typeof(o) {
        "@babel/helpers - typeof";

        return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
            return typeof o;
        } : function (o) {
            return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
        }, _typeof(o);
    }

    var dataSource = {
        parsedData: {
            numericajax: function () {
                var _numericajax = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(index) {
                    var container, dataSource, response, data;
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                        while (1) switch (_context.prev = _context.next) {
                            case 0:
                                container = document.querySelectorAll('.numeric-metrics-container.data-source');
                                dataSource = container[index].getAttribute('data-source');
                                _context.next = 4;
                                return fetch(dataSource);
                            case 4:
                                response = _context.sent;
                                _context.next = 7;
                                return response.json();
                            case 7:
                                data = _context.sent;
                                return _context.abrupt("return", data);
                            case 9:
                            case "end":
                                return _context.stop();
                        }
                    }, _callee);
                }));
                function numericajax(_x) {
                    return _numericajax.apply(this, arguments);
                }
                return numericajax;
            }(),
            numeric: function numeric(index) {
                var containers = document.querySelectorAll(".numeric-metrics-container"),
                    data = containers[index].querySelector('.numeric-metrics__data').value;
                return JSON.parse(data);
            },
            toolbarajax: function () {
                var _toolbarajax = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(index) {
                    var dataSource, response, data;
                    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                        while (1) switch (_context2.prev = _context2.next) {
                            case 0:
                                dataSource = document.querySelectorAll('.toolbar-metric-container.data-source')[index].getAttribute('data-source');
                                _context2.next = 3;
                                return fetch(dataSource);
                            case 3:
                                response = _context2.sent;
                                _context2.next = 6;
                                return response.json();
                            case 6:
                                data = _context2.sent;
                                return _context2.abrupt("return", data);
                            case 8:
                            case "end":
                                return _context2.stop();
                        }
                    }, _callee2);
                }));
                function toolbarajax(_x2) {
                    return _toolbarajax.apply(this, arguments);
                }
                return toolbarajax;
            }(),
            toolbar: function toolbar(index) {
                var containers = document.querySelectorAll(".toolbar-metric-container"),
                    data = containers[index].querySelector('.toolbar-metric__data').value;
                return JSON.parse(data);
            },
            sidebarajax: function () {
                var _sidebarajax = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(index) {
                    var dataSource, response, data;
                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                        while (1) switch (_context3.prev = _context3.next) {
                            case 0:
                                dataSource = document.querySelectorAll(".sidebar-metric-container.data-source")[index].getAttribute('data-source');
                                _context3.next = 3;
                                return fetch(dataSource);
                            case 3:
                                response = _context3.sent;
                                _context3.next = 6;
                                return response.json();
                            case 6:
                                data = _context3.sent;
                                return _context3.abrupt("return", data);
                            case 8:
                            case "end":
                                return _context3.stop();
                        }
                    }, _callee3);
                }));
                function sidebarajax(_x3) {
                    return _sidebarajax.apply(this, arguments);
                }
                return sidebarajax;
            }(),
            sidebar: function sidebar(index) {
                var containers = document.querySelectorAll(".sidebar-metric-container"),
                    data = containers[index].querySelector('.sidebar-metric__data').value;
                return JSON.parse(data);
            },
            mentionListajax: function () {
                var _mentionListajax = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(index) {
                    var dataSource, response, data;
                    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                        while (1) switch (_context4.prev = _context4.next) {
                            case 0:
                                dataSource = document.querySelectorAll(".mention-list-container.data-source")[index].getAttribute('data-source');
                                _context4.next = 3;
                                return fetch(dataSource);
                            case 3:
                                response = _context4.sent;
                                _context4.next = 6;
                                return response.json();
                            case 6:
                                data = _context4.sent;
                                return _context4.abrupt("return", data);
                            case 8:
                            case "end":
                                return _context4.stop();
                        }
                    }, _callee4);
                }));
                function mentionListajax(_x4) {
                    return _mentionListajax.apply(this, arguments);
                }
                return mentionListajax;
            }(),
            mentionList: function mentionList(index) {
                var containers = document.querySelectorAll(".mention-list-container"),
                    data = containers[index].querySelector('.mention-list__data').value;
                return JSON.parse(data);
            }
        },
        map: {
            "type": "Topology",
            "arcs": [[[15813, 12720], [-24, -6], [0, 19]], [[15789, 12733], [24, -13]], [[20559, 10529], [10, -83]], [[20569, 10446], [-53, -56], [21, -61], [-45, -17], [7, -41], [-29, -68], [-3, -52]], [[20467, 10151], [-7, -10], [-221, 40], [-87, 154], [0, 15]], [[20152, 10350], [22, -29], [41, -1], [26, 21], [89, -15], [31, 6], [97, 125], [86, 128], [15, -56]], [[22180, 12036], [-31, -28]], [[22149, 12008], [-36, -22], [-42, 7]], [[22071, 11993], [-87, -8], [-86, -49], [-38, -53], [27, -42], [12, -69], [-48, -65], [-4, -81], [-46, -17], [-45, 12], [25, -89], [-61, -32], [-31, -83], [5, -70], [-42, -40], [-57, 26], [-75, -79], [-30, 12], [-50, -53], [-14, -136], [-99, -39], [-50, 4], [-36, -24], [-47, 12], [-95, -11], [-139, 60]], [[20960, 11079], [80, 126], [-8, 71], [-73, 16], [1, 92], [-25, 118], [5, 57], [-14, 68], [45, 73], [24, 125]], [[20995, 11825], [119, -50], [40, 27], [2, 56], [100, 38], [26, 25], [18, 100], [65, 16], [16, 37], [73, -22]], [[21454, 12052], [35, 4], [27, -25], [45, -2]], [[21561, 12029], [22, -31], [58, 42], [63, -7], [9, 46], [56, -3], [2, 48], [44, 64], [58, -20], [19, -55], [-12, -98], [35, -49], [128, 99], [37, -29], [53, 24], [47, -24]], [[10297, 9419], [-14, -8], [-2, 21], [16, -13]], [[10172, 9564], [7, 9], [3, -3], [-10, -6]], [[17410, 12726], [38, -44], [7, -44]], [[17455, 12638], [-8, -72], [42, -60]], [[17489, 12506], [6, -31], [-33, -66], [-58, -54]], [[17404, 12355], [-13, 43], [-42, 37], [-5, 44], [24, 148], [-19, 8]], [[17349, 12635], [-6, 44], [28, 53], [39, -6]], [[19580, 12563], [41, -105], [41, -33], [-14, -39], [53, -67], [12, -69]], [[19713, 12250], [-35, -5]], [[19678, 12245], [-12, 56], [-79, 64], [-28, -7]], [[19559, 12358], [-39, 41], [-34, -2], [-30, 58], [12, 24], [-22, 62]], [[19446, 12541], [116, 12], [18, 10]], [[17751, 5792], [7, -66], [-9, -34], [9, -95], [-16, -57], [12, -22], [-176, -4], [-1, -402], [13, -49], [62, -92], [50, -55]], [[17702, 4916], [-173, -50], [-54, -2], [-43, 22], [-78, 0], [-55, 13], [-36, 49], [-359, 0], [-25, -6], [-45, 55], [-41, 3], [-36, -32], [-44, 11], [-28, -14]], [[16685, 4965], [7, 104], [-7, 77], [23, 38], [24, 108], [7, 87], [16, 82], [37, 82], [42, 38], [29, 92], [5, 109], [-55, 163], [-17, 76], [32, 52], [-1, 43], [-45, 146], [-4, 37], [-45, 108], [70, 33]], [[16803, 6440], [74, 7], [226, -5], [15, -37], [4, -67], [17, -73], [55, -115], [41, 4], [46, 23], [66, -9], [21, 127], [86, 11], [0, -46], [103, -2], [0, -84], [16, -71], [-13, -121], [33, -68], [13, -103], [18, -40], [59, -6], [68, 27]], [[16803, 6596], [-54, -51], [4, -81], [-29, -8]], [[16724, 6456], [3, 30], [-21, 70]], [[16706, 6556], [69, 78], [28, -38]], [[10212, 4317], [35, -36], [22, -64], [73, -72], [14, -29], [59, -32], [26, 4], [59, -61], [57, -44], [71, -34], [26, -47], [-45, -87], [-11, -67], [-24, -39], [20, -41], [98, -30], [33, -1], [99, 41], [70, 67], [16, 58], [2, 81]], [[10912, 3884], [52, 1], [34, -90], [-16, -110], [-42, -39], [-47, -18], [-21, -38], [-60, -50], [-59, -107], [-80, -121], [-24, -23]], [[10649, 3289], [-23, -44], [6, -51], [-33, -202], [6, -73]], [[10605, 2919], [-23, -11], [-12, -82], [2, -74], [25, -52], [64, -45], [28, -55], [-17, -62], [53, -52], [0, -78], [-99, -174], [-100, -49], [-180, -40], [-100, 7], [15, -74], [-32, -104], [20, -40], [-16, -37], [-59, -30], [-53, -2], [-99, 51], [-28, -42], [9, -113], [55, -62], [54, 41], [8, -87], [-86, 32], [-21, -35], [45, -18], [-46, -41], [-31, -51], [-3, -111], [-30, -68], [-46, 3], [-69, -39], [-54, -109], [19, -54], [57, -58], [73, -13], [15, -43], [-6, -62], [-52, -57], [-59, -40], [-41, -47], [-29, -121], [-84, -47], [-26, -93], [19, -82], [43, -94]], [[9708, 405], [-65, 31], [-76, 20], [-154, -2], [-51, 59], [9, 118], [-60, -11], [-50, 63], [10, 141], [77, 49], [22, 64], [-15, 54], [18, 57], [36, 32], [18, 70], [-15, 64], [8, 72], [36, 45], [-20, 35], [28, 72], [-50, 8], [7, 152], [-32, 41], [7, 95], [25, 11], [-12, 54], [-5, 119], [28, 106], [-8, 41], [26, 39], [-1, 49], [40, 25], [-5, 84], [-16, 51], [3, 113], [12, 45], [49, 42], [10, 48], [-8, 55], [13, 80], [39, 66], [7, 105], [-70, 249], [24, 61], [11, 71], [29, 36], [-15, 112], [20, 31], [12, 93], [27, 31], [54, 138], [35, 19], [-24, 59], [15, 43], [-13, 67], [-1, 105], [29, 57], [78, 49], [28, 130], [-14, 27]], [[9818, 4245], [39, 75], [37, 19], [7, 38], [41, -40], [64, 1], [33, -16], [35, -45], [27, 72], [94, 0], [17, -32]], [[9693, 81], [0, 291]], [[9693, 372], [55, -121], [135, -116], [102, -46], [-108, -28], [-58, 20], [-94, 11], [-32, -11]], [[812, 5357], [-7, -17], [-3, 4], [10, 13]], [[17137, 13513], [-7, -34], [26, -45]], [[17156, 13434], [-60, -79], [0, -51], [-31, -18]], [[17065, 13286], [-9, -24], [-82, -4], [-47, -31], [-71, 14]], [[16856, 13241], [-107, 21], [-28, 30], [-87, 7], [-60, -15]], [[16574, 13284], [-75, 27]], [[16499, 13311], [-6, 27]], [[16493, 13338], [2, 36]], [[16495, 13374], [65, -32], [29, 35], [31, -23], [55, 26], [126, 10], [-28, 57], [84, 52], [10, 34]], [[16867, 13533], [75, -24], [58, 51], [62, -29], [75, -18]], [[17861, 4895], [1, 0]], [[17862, 4895], [23, -79], [21, -30], [34, -118], [48, -51], [42, -21], [8, -50], [37, -5], [-2, -72], [30, -65], [85, -26], [30, -54]], [[18218, 4324], [-38, -33], [-52, -18], [-50, -83], [-64, -56], [-14, -78], [-37, -47], [-43, -13], [-32, -118], [-79, -24], [-65, 25], [-41, 44], [-36, -2], [-27, -92], [-90, -110], [-91, 9], [-1, 45], [19, 39], [-18, 90], [-22, 53], [-34, 38]], [[17403, 3993], [1, 356], [86, 4], [1, 473], [40, 3], [158, 39], [40, -53], [40, 50], [32, -5], [30, 33], [30, 2]], [[17284, 7655], [-1, -38], [-45, -124], [-4, -87], [-18, -78], [9, -70], [-23, -76], [-2, -63], [-27, -41], [-45, -39], [-25, -74], [-31, -44], [2, -148], [-29, -81], [-59, -49], [-32, -63], [-38, -8], [-1, 75], [-85, -74], [-27, 23]], [[16706, 6556], [-16, 56], [-52, 74]], [[16638, 6686], [30, 60], [29, -26], [14, 99], [-35, 24], [11, 45], [62, 3], [-2, 68], [29, -2], [26, -57], [35, -9], [24, 36], [28, -43], [34, 125], [-8, 133], [-42, 36], [0, 55], [38, 52], [12, 40], [-17, 50], [-38, 14], [-56, -23], [-2, 85], [10, 35]], [[16820, 7486], [111, 4], [68, -36], [61, 8], [12, 31]], [[17072, 7493], [28, 79], [14, 91], [82, 14], [88, -22]], [[16493, 13338], [-2, -21], [8, -6]], [[16574, 13284], [-14, -39], [-112, -67], [-51, 34], [-50, -49], [-71, 0]], [[16276, 13163], [-19, 66], [-34, 44], [51, 74], [50, 33]], [[16324, 13380], [39, -5], [49, 32], [83, -33]], [[15183, 8558], [34, -18], [15, -52], [49, -37], [65, 45], [38, -6], [46, -54]], [[15430, 8436], [16, -165], [-25, -37], [-16, -92], [-24, -76], [20, -118], [19, -16], [3, -63], [-30, -4]], [[15393, 7865], [-77, 21], [-159, -28], [-95, -48], [-54, -40]], [[15008, 7770], [-5, 69], [17, 88], [-3, 35], [-36, 47], [-63, 45], [25, 60], [-17, 71]], [[14926, 8185], [24, 1], [16, 80], [17, 37], [-11, 46], [7, 77], [-24, 15], [0, 58], [14, 26]], [[14969, 8525], [28, 39], [55, -40], [67, 73], [2, -59], [62, 20]], [[1764, 4448], [-8, -2], [0, 7], [6, 0], [2, -5]], [[28096, 5671], [25, -20], [-5, -43], [35, -79], [4, -111], [20, -79], [18, -12], [45, 32], [15, -38], [54, -57], [-4, -67], [18, -81], [-3, -44], [42, -85], [18, -73], [-9, -69], [27, -30], [-1, -63], [15, -23], [84, -47], [14, -39], [77, -43], [25, -30], [-6, -44], [41, -57], [39, -159], [28, -25], [23, 16], [51, -45], [5, -105], [31, -37], [47, -31], [28, -63], [70, -104], [22, -83], [-5, -44], [3, -132], [20, -40], [23, -137], [-21, -73], [-9, -80], [-21, -88], [3, -53], [-13, -69], [-31, -73], [-5, -47], [-79, -82], [-28, -67], [-1, -45], [-36, -79], [-4, -66], [-51, -92], [-25, -153], [0, -76], [-41, -33], [-94, -6], [-68, -35], [-62, -69], [-26, -12], [-16, -51], [-81, 70], [-49, 88], [-43, -30], [-23, -42], [-55, -51], [-97, 59], [-53, 14], [-30, -15], [-33, 36], [-57, 25], [-54, 91], [4, 71], [-13, 48], [-44, 71], [-64, 59], [5, 65], [-34, 77], [-34, -118], [-71, -22], [10, 46], [36, 4], [-1, 58], [19, 78], [25, 37], [-14, 80], [-25, -25], [-22, -62], [-68, -52], [-70, -119], [-34, 122], [-34, 47], [-23, 61], [-44, 32], [14, 44], [-53, 59], [-45, -6], [-34, 26], [-46, -7], [-92, 69], [-31, -15], [-52, 3], [-106, -16], [-59, -37], [-87, -36], [-95, 3], [-182, -121], [-13, -49], [-36, -48], [-46, 6], [-74, -17], [-69, 23], [-120, -15], [-43, -57], [-53, -13], [-64, -67], [-133, -6], [-52, 27], [-38, 51], [-50, 28], [0, 84], [31, -6], [25, 46], [-4, 75], [13, 70], [-8, 66], [-42, 108], [-20, 101], [2, 71], [-39, 125], [-31, 57], [-4, 59], [-44, 116], [39, 39], [14, 71], [-20, 36], [-49, 140], [3, 80], [25, 62], [-7, 116], [30, 88], [9, -79], [22, 7], [11, 48], [33, 43], [51, 30], [64, 78], [37, 25], [78, -1], [54, 42], [52, 13], [31, 36], [47, -3], [66, 24], [62, 42], [29, 46], [31, 84], [43, 53], [-10, 105], [47, 73], [26, 15], [29, -79], [42, 35], [-26, 46], [29, 37], [41, -9], [18, 43], [-9, 63], [35, 39], [61, 104], [36, -9], [12, 42], [44, 8], [32, 45], [36, -23], [65, -95], [77, -26], [63, 14], [-28, 49], [37, 115], [28, 23], [-2, 44], [44, 74], [51, 41], [70, -16], [47, 30], [-7, 64], [37, 19], [25, -41], [54, -7], [32, -34], [49, 3], [36, -29], [28, 20], [38, -15], [22, -33], [19, 57], [42, -49], [-51, -96], [-35, -25], [10, -56], [-14, -56], [-40, -79], [9, -27], [59, -52], [15, -30], [119, -80], [39, -58], [74, -29], [18, -52], [71, -53], [67, 34], [12, 59], [22, 43], [19, 77], [2, 62], [18, 72], [-17, 153], [19, 77], [-7, 94], [30, 82], [17, 125], [25, 28], [29, -45], [10, -95]], [[28254, 1927], [48, -16], [81, -46], [73, 21], [37, -2], [47, 33], [30, -31], [-5, -147], [-21, -16], [-3, -87], [-50, -2], [-45, -81], [-75, 0], [-47, 75], [-26, 84], [0, 47], [-44, 92], [0, 76]], [[27010, 5751], [26, -30], [49, 27], [22, -32], [-47, -58], [-57, 18], [-11, 40], [18, 35]], [[27637, 2568], [-31, -33], [-45, -8], [-11, 38], [62, 21], [25, -18]], [[9567, 8832], [3, 7], [12, -15], [0, -9], [-15, 17]], [[19891, 12633], [39, -56], [46, -99], [-1, -58], [-29, -145], [-33, -33], [4, -50]], [[19917, 12192], [-23, -3], [-51, 53], [27, 74], [-31, 40], [-51, -31], [-75, -75]], [[19580, 12563], [26, 21], [102, -50], [19, 24], [-43, 64], [18, 20]], [[19702, 12642], [29, -7], [48, -71], [39, -14], [73, 83]], [[19678, 12245], [-59, 19], [-57, 83]], [[19562, 12347], [-3, 11]], [[17319, 13025], [8, -66], [40, -37], [-31, -69]], [[17336, 12853], [-64, -73], [-5, -54]], [[17267, 12726], [-68, 44]], [[17199, 12770], [-6, 6]], [[17193, 12776], [-23, 47], [-94, 116], [-43, 81], [105, 54], [78, -24], [72, 4], [31, -29]], [[10472, 8931], [21, -20], [-18, -9], [-3, 29]], [[23721, 10055], [6, -87], [-26, 21], [-15, -40]], [[23686, 9949], [-26, 57], [-3, 55], [-25, 82], [-17, 11], [-42, -44], [-16, -42], [-47, -29], [-27, 27], [-19, -35], [-36, -7], [-13, 55]], [[23415, 10079], [-27, 171], [-16, 27], [10, 79], [-57, 51], [37, 67], [37, 0], [-70, 94], [32, 69], [57, -18], [20, -38], [43, -11], [0, -80], [47, -20], [146, 2], [28, -19], [-23, -82], [-63, -39], [-21, -61], [39, -87], [49, 99], [18, -49], [20, -179]], [[16187, 13791], [30, -41], [-20, -41]], [[16197, 13709], [-28, -76]], [[16169, 13633], [-30, -6], [-58, 61], [-57, 2], [-11, 49], [-63, 22], [-57, 38], [-9, 35]], [[15884, 13834], [72, 36]], [[15956, 13870], [43, -20], [32, 18]], [[16031, 13868], [1, 3]], [[16032, 13871], [74, 1], [65, -29], [16, -52]], [[15683, 9149], [-5, -59], [39, -107], [32, -17], [1, -73], [51, -49], [49, 7], [-6, -44], [28, -59]], [[15872, 8748], [-33, -60], [-52, 4], [-45, -60]], [[15742, 8632], [-92, 17]], [[15650, 8649], [-36, -19], [-197, 0], [-9, -34], [22, -160]], [[15183, 8558], [3, 80], [24, 51], [-5, 54], [46, 20], [44, 100], [-9, 46], [29, 43], [36, -35], [29, 15], [-1, 50], [32, -5], [6, 51], [30, 30], [37, -14], [34, 44], [83, 72], [82, -11]], [[18150, 12880], [-9, -47], [-47, -25], [-7, -59], [-29, -25], [45, -72]], [[18103, 12652], [-43, -8], [-23, 23], [-57, -16], [-24, -34]], [[17956, 12617], [-20, -46], [-70, -15], [-69, 41], [-78, -23], [-61, -6]], [[17658, 12568], [9, 50], [-14, 40], [-44, 37]], [[17609, 12695], [13, 72], [40, 32], [-52, 90], [26, 53]], [[17636, 12942], [28, -53], [37, 6], [60, -20], [34, 8], [77, -18], [63, 45], [101, 20], [83, -47], [31, -3]], [[20065, 10609], [2, -50], [-13, 13], [-1, 34], [12, 3]], [[18321, 6891], [-11, -58], [34, -17], [2, -32], [-32, -41], [-38, -94], [-52, -22]], [[18224, 6627], [-17, 74], [2, 105], [-19, 43]], [[18190, 6849], [29, -11], [47, 14], [20, 36], [35, 3]], [[18429, 13966], [-73, -4], [-66, -74], [-75, -16], [-43, 23], [-101, -6], [-43, 33], [-102, 21], [-142, -7], [-66, -48]], [[17718, 13888], [3, 73], [-41, 28], [64, 54], [-1, 60], [-34, 103]], [[17709, 14206], [79, -7], [100, 57], [27, 76], [34, 25], [31, 73]], [[17980, 14430], [85, 14], [48, 49]], [[18113, 14493], [200, -47], [42, -52], [14, -98], [59, -109], [60, -12], [21, -47], [-44, -33], [-68, 13], [16, -116], [16, -26]], [[7926, 9267], [-26, 2], [6, 247]], [[7906, 9516], [25, 11], [31, 74], [16, 3]], [[7978, 9604], [19, -48], [-16, -62], [-3, -128], [-52, -99]], [[15977, 8722], [-11, -33], [20, -43], [11, -65], [-27, -96], [-34, -54], [-4, -43], [-27, -8], [-5, -166], [5, -96], [-6, -86]], [[15899, 8032], [-94, -18]], [[15805, 8014], [0, 360], [-18, 39], [-7, 89], [-49, 51], [11, 79]], [[15872, 8748], [-1, 45], [38, 21], [68, -92]], [[10193, 9527], [6, 4], [0, -5], [-6, 1]], [[10024, 11392], [2, 5], [3, 2], [2, -2], [-6, -5], [-1, 0]], [[25589, 7800], [32, 10], [35, 38], [15, -9]], [[25671, 7839], [-20, -22], [9, -41], [-28, -45], [-43, 69]], [[10602, 4588], [-1, 44], [-80, 70], [-77, -2], [-152, -45], [-47, -119], [0, -65], [-33, -154]], [[9818, 4245], [-61, -1], [-7, 92], [-20, 106], [-31, 51], [-17, 63], [7, 89], [19, 42], [-43, 54], [-14, 119], [-33, 73]], [[9618, 4933], [-13, 29], [53, 79], [5, 61], [-25, 8], [-14, 67], [23, 50], [-19, 34], [11, 50], [34, 52], [-15, 71], [4, 100], [25, 46], [-22, 68], [-55, 135]], [[9610, 5783], [112, -3], [15, 33], [33, 3], [37, 50], [21, 6], [39, 48], [99, 24], [16, -64], [-12, -38], [11, -62], [-2, -59], [29, -74], [43, -31], [19, -33], [53, 3], [50, -24], [27, -44], [60, -34], [24, -36], [66, 8], [51, -43], [0, -49], [17, -59], [9, -209], [147, -10], [8, -112], [49, -41], [22, -102], [-19, -100], [-28, -86], [-4, -57]], [[9726, 8768], [-8, 21], [10, 2], [-2, -23]], [[23638, 10807], [31, -38], [9, -79]], [[23678, 10690], [-56, 1], [-67, -12], [-27, 16], [-50, -24], [-58, 13], [-19, 60]], [[23401, 10744], [28, 68], [49, 57], [102, -45], [31, 20], [27, -37]], [[15950, 143], [7, 3], [3, -7], [-7, 0], [-3, 4]], [[10748, 7457], [40, -14], [25, 74], [68, 17], [32, -28]], [[10913, 7506], [24, -22], [47, 27], [65, -23], [31, 25], [61, 171], [27, 47]], [[11168, 7731], [36, 14], [34, -206], [34, -94], [41, -18], [3, -94], [-42, -44], [-25, -52], [31, -47], [63, -16], [44, 11], [62, -17], [-15, -143], [34, 71], [27, 30], [52, -4], [222, -121], [38, -126], [37, -1], [51, 24], [90, -53], [36, 4], [33, -22], [88, 14], [45, -10], [58, -45], [71, -67], [36, -60], [79, -92], [46, -25], [60, 6], [39, -18], [21, -52], [35, -182], [0, -118], [-25, -121], [-20, -51], [-90, -160], [-48, -49], [-22, -44], [-54, -142], [-41, -77], [-41, -14], [-25, -56], [10, -26], [-11, -138], [15, -152], [-28, -170], [3, -68], [-45, -92], [-2, -118], [-33, -76], [-25, -81], [-34, -52], [-23, -67], [0, -75], [-56, -39], [-26, -41], [-8, -44], [-158, 4], [-45, -5], [-85, -86], [-50, -21], [-78, -57], [-79, -88], [-65, -81], [-3, -92], [-12, -56], [12, -64], [-6, -96], [-16, -80], [-56, -65], [-35, -60], [-45, -132], [-26, 34], [-51, -29], [-23, -80], [-39, -37], [-23, -54], [6, -49], [-41, -119], [-67, -87]], [[11018, 2825], [-11, 75], [37, 52], [-47, 49], [-10, 39], [-61, 53], [-7, 23], [-63, 33], [-31, 51], [-22, -27], [-30, 59], [-55, 67], [-36, -24], [-33, 14]], [[10912, 3884], [29, 157], [-3, 42], [-32, 30], [-64, -18], [-11, 47], [-7, 123], [-22, 47], [-130, 8], [-55, 20], [11, 133], [-26, 115]], [[9610, 5783], [-66, -14], [-26, 9], [2, 199], [-60, -68], [-73, -2], [-21, 65], [-71, 11], [20, 54], [-49, 82], [-15, 74], [-25, 32], [24, 33], [-3, 52], [52, 66], [-4, 44], [19, 49], [7, 68], [86, 81], [83, 19], [15, 27], [71, -9]], [[9576, 6655], [43, 354], [2, 61], [-15, 69], [-38, 46], [2, 90], [47, 21], [19, 44], [-49, 7], [-1, 69], [45, 13], [94, 0], [39, 11], [40, 33], [40, -109]], [[9844, 7364], [49, -63], [50, 33], [27, -38], [27, 56], [36, 16], [53, 46], [3, 39], [57, 31], [3, 34], [-58, 9], [4, 31], [-20, 53], [2, 59], [-46, 73], [51, -5], [11, -29], [52, 10], [39, -45], [19, 52], [52, 9], [56, 41], [45, 16], [35, 52], [-13, 35]], [[10378, 7879], [53, 4], [13, -23], [-15, -68], [40, -20], [14, -57], [-28, -47], [-12, -116], [23, -54], [-2, -52], [44, -61], [64, -17], [16, 41], [67, 16], [21, 37], [44, -15], [28, 10]], [[11347, 7250], [-34, -51], [-15, 42], [49, 9]], [[8859, 10474], [16, -5], [24, -86], [-27, -29], [-35, 42], [21, 37], [1, 41]], [[9809, 13068], [-14, 51], [-32, 17], [-1, 176], [-40, 38], [-56, -21], [-26, 32], [-66, -96], [-27, -64], [2, -38], [-46, -67], [-45, -16], [-22, -36], [-281, 1], [-44, -22], [-90, -86], [-42, -70], [-161, -1], [-43, -22], [19, -80], [-98, -58], [-102, -25], [-100, -68], [-59, 25], [0, 57], [45, 36], [36, 131], [-35, 225], [-87, 61], [-37, 36], [-15, 56], [-38, -4], [-33, 57], [-295, 178], [-88, -40], [-133, 32], [-58, -22], [-122, 73], [-80, 1], [-119, 47], [-1312, 1], [-333, 0], [-474, 0], [-276, 0]], [[4981, 13563], [-24, 0], [-5, 0], [-24, 61], [-50, 3], [-73, 71], [-41, -1], [46, -75], [86, -40], [33, -92], [-28, -12], [-117, 47], [-85, 80], [-45, 13], [-36, 60], [-56, 31], [-65, 68], [37, 28], [19, 83], [-66, 87], [-6, 41], [-162, 160], [24, 29], [-33, 57], [43, 89], [-3, 110]], [[4350, 14461], [-68, 57], [-89, 34], [-22, 54], [-156, 220], [-98, 74], [-45, 63], [-66, -23], [-27, -56], [-80, -35], [-12, 44], [-134, 108], [-158, 32], [-1, 375], [0, 263], [0, 288], [1, 279]], [[3395, 16238], [143, -11], [70, -36], [150, -49], [208, 105], [71, -42], [245, 93], [104, -12], [53, -39], [60, 54], [90, 22], [52, -69], [94, -50], [163, 0], [66, 58], [100, 0], [138, -52], [202, -51], [131, -17], [56, 14], [102, -32], [51, -45], [-97, -31], [10, -44], [214, -16], [138, 14], [74, 25], [102, -68], [51, 8], [61, 65], [-91, 33], [31, 40], [195, 42], [62, -65], [83, -47], [86, 8], [59, -36], [107, -17], [73, 21], [154, -16], [40, 11], [-13, 68], [56, 21], [167, -38], [-10, -119], [78, 1], [-31, 55], [173, 109], [-55, 22], [5, 91], [-156, 49], [-40, 40], [29, 60], [-35, 84], [109, 79], [6, 81], [-32, 36], [-3, 124], [79, 49], [109, 11], [110, -26], [163, -9], [-127, -129], [-153, -60], [-84, -83], [61, -8], [66, -50], [14, -68], [108, -82], [-80, -53], [139, -73], [84, -67], [60, 67], [94, -43], [33, -59], [-43, -27], [22, -72], [72, -66], [61, 31], [58, 91], [21, 73], [67, 50], [-48, 33], [6, 63], [75, 7], [160, -23], [113, -138], [-95, -17], [35, -74], [66, -53], [-15, -59], [-63, -41], [-182, -78], [-80, 20], [-26, 35], [-93, -111], [-72, -49], [32, -38], [-95, -111], [-41, -22], [-95, 6], [-87, -74], [-11, -69], [-101, -15], [-50, -40], [-119, -134], [-54, -117], [-24, -91], [2, -104], [26, -41], [106, -3], [68, -171], [-7, -52], [120, 26], [201, -51], [76, -49], [31, -45], [170, -70], [55, -39], [101, 2], [120, -17], [27, -47], [-18, -74], [24, -51], [-8, -115], [56, -63], [17, -42], [63, -47], [26, -55], [47, -22], [29, 49], [43, 26], [36, 51], [-36, 113], [-4, 128], [-53, 85], [114, 49], [61, 42], [74, 79], [20, 47], [-1, 100], [-51, 112], [-123, 89], [4, 31], [60, 56], [37, 62], [-27, 77], [-6, 97], [12, 52], [-31, 27], [-4, 78], [51, 27], [158, -40], [77, -7], [97, 31], [85, -45], [103, -116], [110, -18], [42, -74], [16, -108], [-9, -40], [184, -141], [74, 31], [27, 39], [62, 30], [76, 186], [29, -5], [57, -118], [103, -140], [-4, -30], [81, -56], [-46, -40], [72, -47], [9, -77], [80, -117], [12, -48], [111, -20], [16, -32], [82, -14], [51, -28], [-22, -41], [36, -50], [94, -34], [26, -46], [-9, -45], [16, -83], [-29, -41], [-81, -57], [-113, -24], [-157, -139], [-144, -12], [-92, 23], [-275, -2], [-61, -19], [-44, -42], [-21, -60], [-60, -9], [-85, -68], [-104, -161], [162, 136], [142, 69], [120, 21], [68, -21], [27, -26], [-2, -54], [-77, -52], [34, -39], [-16, -58], [6, -68], [33, -70], [107, -66], [73, -11], [85, 56], [71, 114], [27, -23], [-16, -64], [58, -45], [-49, -39], [-72, -13], [-34, -53], [-173, -88], [-54, 8], [-6, -32], [-47, -59], [-66, -48], [-41, 39], [-8, 50], [24, 60], [80, 61], [33, 41], [-27, 26], [-82, -50], [-78, -19], [-45, 16]], [[8252, 16454], [50, 28], [-108, 65], [20, 118], [54, 55], [187, 50], [109, -2], [141, -157], [106, -26], [43, 44], [122, 12], [132, -28], [30, -52], [123, -96], [93, 35], [78, -18], [86, -75], [191, -43], [108, -108], [-130, -23], [59, -73], [-41, -56], [72, -5], [68, -61], [170, -18], [64, -42], [6, -50], [87, 9], [19, -50], [69, 16], [65, -48], [-26, -44], [-98, -96], [-62, -14], [4, -52], [-65, 2], [-79, 45], [-80, 91], [-102, 36], [-5, -108], [57, -76], [69, -22], [60, -50], [-20, -25], [91, -79], [-57, -57], [18, -35], [-47, -34], [-279, 136], [-18, -21], [235, -175], [-29, -43], [-96, 34], [-97, 16], [-93, 64], [-48, 0], [-112, 43], [-146, 151], [-215, 36], [-89, -47], [-106, 27], [-18, 80], [66, 60], [106, -23], [135, 11], [70, 46], [-58, 58], [119, 71], [64, 70], [-65, 121], [-123, 54], [-28, 39], [-252, 128], [-109, 1], [-146, 20], [-175, -26], [-242, 33], [-295, 52], [-89, 110], [-22, 76], [79, 160], [81, 55], [147, 32], [130, -23], [-139, -102], [38, -132], [88, -75]], [[9208, 17978], [375, 10], [444, -27], [309, -86], [-274, -66], [-32, -45], [-356, -98], [-226, -115], [-316, -45], [29, -90], [-82, -78], [-107, -24], [-197, -96], [111, -60], [-129, -47], [-140, -25], [-122, 33], [-166, 9], [-82, -24], [-203, 11], [-174, 27], [9, 33], [173, 37], [-58, 69], [66, 29], [-6, 70], [77, 49], [130, 14], [67, 42], [-181, 73], [-6, 64], [239, -7], [314, 39], [-311, 26], [-130, -27], [-265, 22], [-145, 44], [-151, 90], [368, 44], [117, 47], [293, -9], [77, 56], [440, 42], [221, -11]], [[5697, 16627], [89, 8], [38, 42], [250, -45], [25, 41], [189, -101], [-38, 112], [23, 37], [177, -37], [51, -45], [85, -168], [-18, -32], [89, -72], [212, -55], [13, -63], [-147, 7], [78, -78], [-78, -41], [-214, 8], [-109, 37], [-187, -32], [-50, -26], [-153, -33], [-196, 1], [-62, 93], [-234, 26], [-65, 47], [21, 45], [213, 26], [167, -14], [30, 40], [-141, 24], [-187, -18], [-139, 8], [-58, 127], [-69, 23], [75, 109], [86, 40], [215, 55], [67, -30], [-48, -66]], [[5061, 16877], [191, -41], [199, -1], [178, -94], [-329, -109], [-20, -38], [-97, -53], [-2, -49], [-203, -63], [-51, 15], [-54, 62], [-144, 72], [58, 44], [-8, 39], [113, 116], [-77, 74], [246, 26]], [[7466, 17750], [198, -12], [111, -80], [266, -45], [23, -80], [156, -4], [47, -34], [-120, -30], [-140, -73], [-213, -46], [-145, 10], [-261, 138], [-134, 100], [126, 121], [86, 35]], [[7252, 17191], [100, 12], [157, -20], [62, -37], [139, 9], [177, -51], [-55, -40], [156, -63], [147, -7], [223, 48], [142, 3], [181, -26], [65, -36], [11, -59], [-81, -41], [-129, -15], [-511, -1], [-195, 10], [-187, 34], [-37, 56], [27, 77], [-84, 66], [-193, 0], [-126, 48], [11, 33]], [[6271, 17047], [114, 25], [107, -46], [-57, -83], [-98, -17], [-136, 19], [-70, -26], [-249, -57], [-115, 5], [-110, 68], [-224, 37], [158, 144], [133, 10], [113, -27], [153, -93], [189, -5], [-35, 69], [-75, 35], [84, 64], [71, -9], [47, -113]], [[10813, 13889], [-10, -75], [-76, -118], [48, 12], [43, -91], [52, -12], [50, 26], [86, -36], [-37, -51], [12, -42], [68, 2], [-56, -64], [-11, -48], [62, -30], [36, 11], [-41, -114], [-74, 25], [8, 74], [-87, -11], [-29, -48], [-28, 62], [-57, 27], [-53, -12], [-108, 18], [-82, -17], [-34, 42], [83, 77], [-22, 13], [41, 104], [76, 159], [53, 87], [67, 41], [20, -11]], [[6947, 16791], [88, -19], [172, 17], [-5, -62], [-65, -41], [122, -45], [7, -99], [-43, -30], [-192, -43], [-47, 50], [-127, 69], [-49, -1], [-81, 61], [128, -6], [95, 29], [-119, 71], [116, 49]], [[8170, 15692], [11, 38], [129, -32], [210, -101], [59, -77], [75, -14], [-41, -69], [-91, 31], [-43, 36], [-85, 17], [-19, -42], [-73, -61], [-88, -15], [1, 58], [-103, -7], [-14, 42], [67, 30], [-19, 61], [24, 105]], [[5560, 17262], [2, -114], [-106, -47], [-272, -39], [-125, 10], [28, 51], [206, 114], [170, -2], [97, 27]], [[7063, 17146], [114, -59], [-48, -145], [-195, -1], [-15, 78], [-182, -16], [197, 144], [129, -1]], [[6580, 17506], [224, -40], [193, -64], [54, -68], [-437, 25], [46, 65], [-112, 32], [32, 50]], [[8633, 16764], [231, -1], [84, -21], [76, -52], [-14, -36], [-308, 7], [-66, 53], [-3, 50]], [[7187, 16244], [128, -66], [20, -53], [-49, -34], [-254, 46], [87, 123], [68, -16]], [[7412, 17019], [113, -48], [0, -76], [-85, -6], [-181, 50], [75, 65], [78, 15]], [[7162, 17431], [245, -57], [-117, -66], [-188, 80], [60, 43]], [[9024, 16072], [101, -13], [7, -84], [-67, -43], [-109, 0], [-17, 61], [85, 79]], [[6110, 17320], [-33, -54], [-167, -26], [-94, 25], [61, 61], [233, -6]], [[4079, 14203], [9, 39], [81, -27], [34, 11], [-22, -98], [22, -31], [-43, -43], [-67, 97], [-14, 52]], [[6555, 16707], [-50, -44], [-151, 78], [44, 29], [116, 5], [41, -68]], [[6151, 17382], [-91, -20], [-120, 36], [116, 27], [95, -43]], [[8464, 15371], [65, -31], [-72, -54], [-78, -17], [-21, 38], [56, 63], [50, 1]], [[10283, 13572], [-97, 16], [-54, 26], [-53, 71], [99, -25], [99, -52], [6, -36]], [[7288, 17284], [262, 7], [-31, -37], [-197, 3], [-34, 27]], [[10088, 13271], [71, -43], [79, -10], [-16, -48], [-99, 34], [-35, 67]], [[8760, 15261], [-32, -63], [-45, 25], [0, 45], [77, -7]], [[8604, 14106], [36, -66], [-107, 37], [71, 29]], [[9708, 405], [-69, 25], [-38, -40], [-94, -29], [-19, -126], [-29, -21], [-67, 24], [-92, 53], [-43, 48], [6, 118], [-65, 133], [25, 20], [-15, 49], [-83, 81], [-23, 56], [40, 55], [1, 65], [-27, 93], [41, -18], [60, 118], [-83, 52], [27, 94], [54, 83], [72, 34], [3, 101], [26, 71], [-11, 25], [27, 69], [-6, 130], [-73, 20], [-22, 94], [21, 129], [22, 23], [15, 85], [-21, 76], [2, 67], [-16, 51], [6, 66], [34, 8], [52, 203], [34, 64], [20, 124], [30, 76], [17, 147], [-19, 155], [0, 117], [31, 52], [-18, 126], [28, 73], [10, 77], [14, 22], [22, 164], [-6, 72], [23, 59], [-9, 76], [4, 113], [-4, 103], [22, 21], [21, 191], [-11, 116], [6, 55], [-22, 230]], [[9539, 4823], [35, 12], [20, 39], [-6, 34], [30, 25]], [[9693, 81], [111, -7], [0, -47], [-81, 14], [-87, -41], [-39, 12], [-36, 60], [-49, -19], [-21, 49], [-74, 6], [5, 33], [82, 10], [-6, 59], [33, 29], [21, -88], [38, -16], [-38, 134], [-3, 77], [61, 39], [83, -13]], [[9311, 274], [65, -73], [-132, 49], [30, 54], [37, -30]], [[9230, 1772], [22, 7], [28, -65], [-24, -52], [13, -53], [-35, -39], [-45, 22], [20, 48], [1, 81], [20, 51]], [[9193, 652], [-4, -89], [-35, 2], [-9, 57], [48, 30]], [[9108, 973], [26, -57], [1, -59], [-51, -27], [2, 85], [22, 58]], [[24090, 5672], [-1, -7], [-3, 2], [4, 5]], [[18051, 7856], [31, -54], [52, -42], [27, 31], [46, -22], [22, 42], [64, -94], [28, -12], [27, -48]], [[18348, 7657], [1, -82], [-10, -50], [47, -47], [-24, -48], [-90, -119], [-21, -110], [-13, -118], [0, -59]], [[18238, 7024], [-40, -60], [-1, -49], [-22, -22], [15, -44]], [[18224, 6627], [-8, -59], [25, -105], [-11, -33], [19, -83], [39, -43], [52, -163]], [[18340, 6141], [-152, -35], [-27, -73], [-27, -28], [20, -62], [1, -104], [-22, -136], [58, -105], [37, -12], [28, 40], [0, -166], [-19, 29], [-49, -24], [-19, 57], [-42, 70], [-58, 19], [-18, 47], [-35, 39], [-17, -48], [-72, 6], [-62, 50], [1, 46], [-88, -25], [6, 39], [-33, 27]], [[16803, 6440], [-59, -15], [-20, 31]], [[17284, 7655], [11, 121], [30, 67], [26, 26], [35, -2], [46, -45], [21, -43], [55, -16], [46, 0], [47, -23], [23, 10], [21, 64], [17, 16], [36, -29], [19, 21], [57, 24], [40, -6], [51, 18], [22, 43], [50, -14], [32, -27], [53, 20], [29, -24]], [[17654, 8623], [39, -63], [29, -68], [-1, -84], [-11, -72], [61, -11]], [[17771, 8325], [-2, -42], [57, -20], [29, -34], [2, -51], [70, -64], [33, -45], [7, -73], [61, -49], [23, -91]], [[17072, 7493], [-13, 95], [-22, 20], [-47, 78], [-20, 90], [-25, 28], [-10, 163], [53, 178], [24, 36]], [[17012, 8181], [27, -10], [66, 52], [24, -39], [73, 55], [79, 10], [44, 79], [10, 48], [104, 16], [37, 39], [35, 66], [39, 39], [13, 75], [58, 21], [33, -9]], [[18181, 16165], [-43, -67], [17, -42], [60, -18], [59, -53], [-83, -91], [77, -112], [-14, -60], [24, -160], [37, -51], [-44, -34], [109, -68], [30, -41], [-35, -60], [-168, -153], [-125, -93]], [[18082, 15062], [-151, -19], [-187, -60], [-132, 16], [-102, 106], [35, 91], [-47, 140], [39, 66], [79, 44], [28, 49], [57, 24], [103, 96], [71, 25], [-9, 59], [-101, 46]], [[17765, 15745], [-44, 81], [29, 51], [-36, 44], [7, 101], [-63, 52], [-128, 44], [-79, 48]], [[17451, 16166], [94, 27], [67, -71], [71, -11], [60, 25], [72, -24], [87, 45], [20, 90], [48, 33], [122, 19], [121, -79], [-32, -55]], [[27030, 12708], [-61, 76], [-18, -69], [-34, -5], [-36, -52], [-58, 0], [-11, -84], [-86, 21], [-17, 32], [-86, -116], [-94, -57], [-45, -59]], [[26484, 12395], [-122, -47], [-50, -32], [-65, -68], [2, 66], [-29, 23], [50, 62], [29, 58], [-36, 52], [-53, 3], [-69, -91], [-77, -45], [-43, -80], [-60, -21], [-50, 2], [-18, -48], [38, -71], [73, -4], [17, -46], [-4, -57], [65, -23], [54, 66], [37, 18], [70, -49], [44, 9], [44, -19], [-11, -52], [-47, -1], [-77, -43], [-102, -126], [-21, -12], [-38, -81], [6, -21], [86, -64], [49, -170], [6, -44], [35, -30], [48, -85], [-13, -58], [11, -55], [-68, -40], [11, -37], [78, -52], [-10, -102], [-20, 15], [-19, -73], [11, -44], [-40, 1], [-47, -94], [-11, -49], [-63, -79], [-16, -139], [-29, -2], [-28, -35], [2, -36], [-29, -53], [-40, 10], [-5, -48], [-54, -72], [-49, -12], [-39, -86], [-54, -24], [-20, 9], [-73, -9], [-47, -29]], [[25604, 10131], [-18, -6]], [[25586, 10125], [-39, 44], [-3, -82]], [[25544, 10087], [-2, -1]], [[25542, 10086], [-48, -36], [-59, -26], [-23, 8], [-34, -31], [-52, -7], [-61, -50], [-13, -26], [27, -56], [-29, -29], [-34, 47], [-7, 116], [-49, -11], [-28, 30], [-69, -14]], [[25063, 10001], [-56, 9], [-58, 49], [-12, 48], [21, 57], [-60, 23], [-22, -6], [-48, 56], [-39, -27], [-3, -28], [-40, -32], [-90, 12], [-28, -45], [-46, 42], [-31, -48]], [[24551, 10111], [-40, 7], [-11, -27], [18, -53], [-4, -88], [-38, 5], [-12, 48]], [[24464, 10003], [-47, -13], [-41, 9], [-16, 67], [-67, 17], [16, 43], [8, 75], [-47, 14], [-4, 119], [-64, -4], [-51, 50], [27, 101], [58, 72], [21, 102], [-6, 123], [-31, 0], [-18, 78], [-38, 47], [-30, -38]], [[24134, 10865], [-87, 42], [23, 32], [-40, 38], [-3, 45], [-75, -43], [-47, 26], [-38, -21], [-92, -99], [-45, -30], [-14, -35], [-78, -13]], [[23401, 10744], [-4, 76], [-21, 31], [-44, -28]], [[23332, 10823], [-82, -8], [-43, 35], [-25, -22], [-79, 52], [-32, 2], [-78, 75], [-5, 40], [-46, -6], [-37, 52], [-90, 64], [-9, 34], [-57, 9], [-45, -31]], [[22704, 11119], [-73, 43]], [[22631, 11162], [6, 28]], [[22637, 11190], [-58, 23]], [[22579, 11213], [-32, 51]], [[22547, 11264], [-37, 1], [-2, 83]], [[22508, 11348], [-27, 63]], [[22481, 11411], [-6, 10]], [[22475, 11421], [34, 11], [13, -31], [35, 33], [17, 13], [-12, 58], [-50, 50], [-4, 41], [-3, 32], [16, 27], [-53, 40], [-19, 50], [-9, 21], [-6, 16], [-8, 20], [-2, 4], [-12, -2], [-23, -3], [-52, 22], [-20, 38], [-33, -16], [-22, 43], [2, 41], [-71, 68], [-44, 11]], [[22180, 12036], [21, 24], [-30, 98], [6, 41], [-31, 18], [-60, -3], [-14, 111]], [[22072, 12325], [24, 18], [3, 55], [34, 9], [42, 54], [76, -29], [70, 23], [31, 72], [115, 9], [18, 42], [89, 55], [22, -6], [50, 56]], [[22646, 12683], [-1, 72], [45, 49], [-35, 173], [9, 32], [-31, 41], [70, 12], [68, 27], [71, -27], [-18, 61], [66, 208], [151, -49], [77, 51], [-11, 92], [15, 53], [76, 27], [23, 71], [40, 0]], [[23261, 13576], [45, 11]], [[23306, 13587], [14, -80], [94, -77], [41, 6], [68, -49], [15, -49], [35, -44], [11, -117], [-31, -63], [21, -43], [67, -16], [161, -16], [130, -89], [31, 1], [45, -127], [47, -73], [67, 6], [87, -18], [109, -11], [79, 16], [119, -24], [33, -36], [53, -11], [99, -44], [54, 8], [44, -34], [137, 82], [74, 26], [124, -3], [60, 7], [75, 38], [52, 70], [80, 50], [0, 26], [-43, 63], [31, 77], [57, 15], [37, -31], [67, -12], [41, 28], [41, 56], [97, 9], [51, 42], [29, 67], [63, 8], [84, 49], [124, -18], [0, 73], [-100, 106], [-66, 5], [-39, -47], [-47, 31], [-108, 3], [19, 78], [80, 172]], [[25819, 13673], [94, -41], [68, 52], [61, 24], [2, 63], [68, 135], [49, 38], [5, 79], [-37, 42], [51, 53], [126, 27], [114, 6], [106, -54], [76, -17], [71, -112], [34, -137], [32, -42], [23, -121], [25, -28], [60, 0], [50, -30], [34, 8], [92, -104], [11, -69], [28, -50], [117, 6], [64, 46], [37, 2], [60, 32], [49, -86], [-50, -51], [-24, -135], [-65, -106], [-22, -55], [-90, 38], [-33, -45], [-32, -6], [14, -109], [1, -88], [-17, -61], [-39, -15], [-2, -54]], [[25303, 9801], [17, -48], [-27, -41], [-22, -85], [-70, -59], [-36, 10], [-45, 35], [1, 105], [42, 36], [8, 32], [62, 6], [32, 18], [38, -9]], [[26182, 10066], [-54, 71], [-18, 59], [7, 77], [80, 180], [45, 33], [35, -36], [-50, -241], [-32, -64], [-13, -79]], [[19427, 8692], [-25, -60]], [[19402, 8632], [-29, 11], [-59, -21], [-16, 74], [55, 126]], [[19353, 8822], [25, -13], [38, 45]], [[19416, 8854], [19, -42], [1, -53], [-50, -31], [41, -36]], [[10314, 9219], [19, -3], [0, -31], [-10, -5], [-9, 39]], [[9419, 9544], [-12, 56], [23, 95], [-11, 66]], [[9419, 9761], [13, 25], [53, 2], [67, -35], [24, 3], [30, -73], [69, -15], [37, -41], [-25, -58], [-47, 28], [-69, -4], [-42, -25], [-38, 8], [-43, -82], [-29, 50]], [[9457, 8741], [-55, -25], [-24, -61], [-22, -12], [-35, -82], [-12, -153], [22, -25], [11, -59], [22, -42], [-7, -108], [41, -59], [88, -4], [36, 10], [43, -12], [56, -109], [168, 9], [-12, -91], [-17, -26], [-3, -98], [21, -97], [27, -51], [-43, -65], [54, -67], [28, -150]], [[9576, 6655], [-20, 41], [-43, 18], [52, 124], [-23, 41], [-52, 37], [-35, -20], [-34, 28], [-51, -40], [-51, 0], [-16, 15], [-6, 66], [-28, 12], [-15, 60], [-52, 38], [-16, 61], [-67, 66], [-7, -10]], [[9112, 7192], [-45, 25], [-40, 43], [-14, -21], [-44, -2], [-42, 16], [-24, 57], [-25, 2], [-67, 73]], [[8811, 7385], [-20, 34], [36, 19], [-12, 46], [30, 62], [48, 8], [13, 47], [40, 76], [-28, 68], [18, 71], [-8, 87], [12, 51], [-18, 55], [11, 47], [-48, 85]], [[8885, 8141], [62, 95], [-23, 72], [7, 22]], [[8931, 8330], [56, -81], [-13, 74], [47, 40], [33, 64], [27, 1], [12, 148], [57, 68], [54, -5], [19, 37], [64, -7], [44, 51], [44, 26], [10, 45], [55, 26], [35, -49], [-18, -27]], [[6157, 8543], [1, 3], [4, -4], [-3, -5], [-2, 6]], [[8380, 8624], [25, -73], [55, -93], [18, -11]], [[8478, 8447], [-25, 4], [-7, -66], [8, -80], [-4, -57]], [[8450, 8248], [-21, 41], [-39, 13], [-7, 79], [-48, 52], [-32, 12], [-15, 52], [-31, -51], [-47, 44], [-16, 40], [17, 53], [-5, 59]], [[8206, 8642], [17, 9], [50, -26], [22, 16], [65, -47], [20, 30]], [[8495, 10209], [151, -9], [86, -45], [27, -41], [57, -7], [84, -74], [28, -2], [42, -43], [76, -48], [25, -34], [84, -25], [45, -71], [-111, -24], [-59, 13], [-91, -11], [-28, 18], [43, 55], [-21, 30], [-63, 3], [-36, 41], [-23, 75], [-42, -9], [-54, 18], [-53, 45], [-115, 18], [-29, 30], [20, 34], [-70, 4], [-61, -63], [-47, -8], [-10, -30], [-37, -19], [7, 75], [39, 46], [60, 35], [76, 23]], [[8448, 10050], [30, -49], [-28, -14], [-2, 63]], [[13619, 9138], [-26, 21], [2, 33], [27, -36], [-3, -18]], [[9645, 8811], [8, -4], [7, -20], [12, -3], [5, -18], [-15, 11], [-15, 19], [-2, 15]], [[24848, 5842], [13, 11], [1, -7], [-8, -6], [-6, 2]], [[18471, 11755], [148, 49], [-4, -36], [-51, -57], [-55, -11], [-38, 55]], [[16953, 13805], [86, -16], [78, -83], [42, 36], [60, -53], [60, -8], [24, -51]], [[17303, 13630], [-59, -32], [-9, -30], [-98, -55]], [[16867, 13533], [-91, 75], [-46, 92], [28, 45], [156, 64], [39, -4]], [[16820, 7486], [-166, 16], [-5, -16]], [[16649, 7486], [-111, -1], [-20, 24]], [[16518, 7509], [11, 99], [-48, 103], [-33, 22], [-13, 61], [-22, 36]], [[16413, 7830], [25, 94], [-3, 38], [79, 122], [31, 30], [59, -9], [27, -53], [36, 17], [29, 57], [12, 74], [17, 38], [5, 60], [46, 44], [11, 73], [26, 31], [3, 59], [21, 24], [8, 61], [35, 81], [53, 25], [6, 88], [-38, 25], [-12, 93]], [[16889, 8902], [32, -2], [33, -59], [26, -140], [-9, -52], [10, -75], [43, -73], [-72, -7], [-49, 7], [-18, -34], [60, -115], [41, -32], [26, -139]], [[16414, 14330], [69, -11]], [[16483, 14319], [144, -80], [92, -3], [108, 47], [-5, -46], [79, -34]], [[16901, 14203], [-1, -9]], [[16900, 14194], [4, -22]], [[16904, 14172], [16, -57], [-26, -38], [42, -50], [11, -66], [-14, -32], [38, -72], [-18, -52]], [[16324, 13380], [-2, 69], [21, 62], [36, 47], [-65, 26], [-58, -1], [-39, 41]], [[16217, 13624], [10, 45], [-30, 40]], [[16187, 13791], [18, 79], [-24, 50], [65, 39], [31, 41], [13, 113]], [[16290, 14113], [8, 57], [109, 18], [25, 27], [1, 76], [-19, 39]], [[16415, 11998], [-18, -41], [-15, -112], [16, -70], [-27, -91], [-51, -59], [-2, -35], [25, -76], [44, -50], [4, -42], [62, -55], [41, -238]], [[16494, 11129], [-13, -10], [33, -96], [11, -82], [-5, -66], [9, -52], [-15, -77], [7, -99], [-39, -44], [52, -110], [4, -64], [33, -48], [24, 10], [62, -46], [16, 6], [34, -96]], [[16707, 10255], [-241, -209], [-154, -138], [-143, -180], [-137, -40]], [[16032, 9688], [-70, -21], [-26, 23], [7, 87], [-56, 29], [-28, 30], [-26, -5], [-30, 44], [-36, 22], [-5, 50], [-101, 99], [-143, 141], [-131, 124], [-144, 137]], [[15243, 10448], [-214, 194], [-120, 107]], [[14909, 10749], [0, 45]], [[14909, 10794], [2, 136], [84, 75], [47, 29], [30, -5], [86, 17], [22, -12], [24, 50], [84, 81], [57, 24], [9, 41], [-20, 26], [11, 51], [70, 24], [-2, 40], [75, 8], [62, -12], [24, 57], [-33, 33], [-22, 65], [0, 107], [-10, 85], [-38, 43]], [[15471, 11757], [80, 36], [9, 27], [62, 39], [34, -9], [37, 50], [87, 47], [106, 6], [32, 28], [48, -5], [35, 19], [75, -4], [34, -27], [92, 30], [20, 22], [45, -25], [26, 24], [53, -29], [69, 12]], [[16414, 14330], [1, 61], [-47, 23], [2, 120], [41, 81], [68, 8], [51, 52], [43, 0], [-14, -82], [36, -100], [-90, -85], [-22, -89]], [[16758, 14446], [-37, -80], [-79, 6], [-10, 44], [35, 47], [64, 24], [27, -41]], [[16576, 14412], [27, -28], [-24, -39], [-54, 28], [51, 39]], [[16169, 13633], [48, -9]], [[16276, 13163], [-18, -29], [30, -39], [-48, -37], [35, -48], [-1, -66], [61, -22], [-17, -36]], [[16318, 12886], [-8, -4]], [[16310, 12882], [-2, -2], [0, -2]], [[16308, 12878], [-110, -86], [-135, 39], [-46, 26], [-86, -67], [9, -79]], [[15940, 12711], [-101, -10], [-26, 19]], [[15789, 12733], [-9, 14], [-120, -3], [-24, 21], [-99, 30], [-29, 35]], [[15508, 12830], [28, 36], [18, 109], [12, 130], [-9, 104], [-51, 29], [-57, 101], [-2, 30], [-56, 9], [-127, 60], [-10, 66], [137, 41], [38, -45], [109, 18], [-40, 134], [43, 1], [28, -41], [87, -11], [21, 50], [79, 33], [39, 34], [6, 87], [83, 29]], [[10913, 7506], [33, 59], [1, 51], [18, 55], [-32, 60], [-10, 110], [41, 91]], [[10964, 7932], [14, 16], [78, -37], [50, -67], [48, -39], [14, -74]], [[16488, 12762], [5, -92], [-27, -95], [-30, 39], [-27, 90], [79, 58]], [[20505, 4491], [0, -62], [-37, 40], [37, 22]], [[10332, 9320], [-38, -46], [-9, 42], [47, 4]], [[31174, 4949], [29, -36], [7, -48], [-66, -30], [-51, 21], [18, 74], [63, 19]], [[31322, 5104], [-32, -78], [-56, 40], [88, 38]], [[10538, 550], [84, -12], [7, -45], [-150, -70], [-4, 32], [63, 95]], [[10505, 530], [-62, -74], [-45, 39], [32, 26], [75, 9]], [[9112, 7192], [3, -58], [-25, -128], [-44, -77], [-50, -59], [-100, -52], [-49, -62], [-26, -137], [-36, -62], [-19, 4], [-20, 55], [-56, 31], [-7, 111]], [[8683, 6758], [27, 42], [10, 54], [-23, 32], [-23, -32], [-48, 48], [11, 45], [-11, 118], [26, 25], [11, 70], [33, 57], [1, 91], [77, 40], [37, 37]], [[18103, 14921], [-59, -88], [27, -110], [-28, -55]], [[18043, 14668], [-72, 0], [-106, 72], [-83, -25]], [[17782, 14715], [-70, 95], [0, 77], [73, 34], [144, 20], [79, -24], [95, 4]], [[17626, 14812], [61, -18], [-93, -45], [-23, 48], [55, 15]], [[18640, 11269], [5, -13]], [[18645, 11256], [55, -224]], [[18700, 11032], [-14, -27], [-28, -126], [0, -42], [-31, -24], [-71, 101], [-7, 53], [-68, 69], [43, -123], [52, -78], [3, -45], [41, -100], [4, -36], [46, -112], [81, -235], [11, -99]], [[18762, 10208], [-36, -46], [-21, 7], [-23, -70], [-45, -14], [-8, -25]], [[18629, 10060], [-79, -1]], [[18550, 10059], [-165, 0], [-449, 0], [-98, 0]], [[17838, 10059], [0, 462], [0, 477], [-26, 120], [27, 79], [-12, 83], [24, 32]], [[17851, 11312], [31, -17], [36, 13], [123, -34], [12, -19], [85, -18], [47, -30], [42, 11], [80, 68], [60, 18], [42, -18], [32, 8], [70, -61], [88, 11], [41, 25]], [[14180, 9900], [9, 139], [35, 60], [51, 158], [30, 67], [62, 85], [7, 78], [30, 114], [78, 73], [35, 120]], [[14517, 10794], [256, 0], [136, 0]], [[14909, 10749], [-2, -171], [-288, -1], [0, -325], [-86, -59], [-8, -68], [6, -152], [-339, -1], [-12, -72]], [[19353, 8822], [-66, 117], [-39, 43], [-23, 50], [-108, 64], [-51, 8], [-54, -28], [-50, 59], [-34, -88], [-83, 7]], [[18845, 9054], [-11, 117], [9, 12], [36, 152], [7, 88], [31, -5], [11, 35], [63, 31], [28, 57]], [[19019, 9541], [32, -83], [29, -177], [38, -96], [16, 29], [27, -67], [31, 1], [19, -31], [36, -16], [44, -87], [51, -49], [45, -92], [29, -19]], [[17928, 12490], [-85, 34], [-57, -8], [-31, -28], [-11, -42], [-52, -23], [-63, 32], [-1, -56], [45, -71], [-23, -27], [23, -81], [41, 17], [46, -16], [-37, -93], [-43, 1], [-9, -148], [-63, -16], [-20, 43], [-31, -28], [-7, 74], [-49, 64], [20, 31], [56, 27], [56, -31], [2, 38], [-101, -9], [-36, 27], [-34, 72], [-60, 82]], [[17489, 12506], [70, 10], [12, 22], [69, 6], [18, 24]], [[17956, 12617], [24, -46], [-52, -81]], [[17739, 11816], [40, -24], [32, 9], [91, -12], [18, -39], [-102, -13], [-4, 21], [-102, 26], [27, 32]], [[19402, 8632], [-24, -51], [52, -127], [64, -83], [254, -126], [80, -11], [-173, -271], [-76, -116], [-85, 1], [-82, -46], [-22, -43], [-64, -13], [-16, -25]], [[19310, 7721], [-62, -5], [-38, 44], [-78, -54], [-28, -59], [-88, 30], [-35, -3], [-97, 100], [-83, 9], [-10, 21]], [[18791, 7804], [-11, 22], [2, 68], [-47, 23], [-26, 55], [1, 69], [-70, 75], [-23, 61], [-23, 24], [-55, 15], [17, 83], [45, -9], [32, 28], [-2, 119]], [[18631, 8437], [20, 89], [-3, 53], [25, 38], [32, 0], [9, 111], [18, 26], [38, 93], [39, 6], [0, 33], [36, 168]], [[29431, 8111], [9, -21], [-15, -1], [6, 22]], [[15083, 15281], [-9, -26], [-41, -2], [2, 35], [48, -7]], [[15940, 12711], [1, -69], [-95, -80], [-98, -33], [-101, -170], [-13, -41], [12, -45], [37, -41], [-51, -38], [-48, -115], [-36, -1], [-41, -43], [-30, -64], [-197, -2], [-22, -27], [-46, -13], [-14, -34]], [[15198, 11895], [-22, -17], [-38, 23], [-48, 106], [-71, 21]], [[15019, 12028], [-10, 46], [23, 59], [-5, 60], [15, 87], [-31, 62], [41, 11], [13, 43], [5, 135], [43, 45], [-22, 73], [-51, 3], [-22, -21], [-55, 0], [-13, 43], [-58, -36]], [[14892, 12638], [2, 81], [-17, 5], [-12, 82], [82, 31], [17, 39], [67, -17], [139, -4], [100, -20], [82, 14], [36, -19], [34, 12], [52, -20], [34, 8]], [[15941, 12364], [-12, -64], [-60, 40], [34, 34], [38, -10]], [[14257, 10914], [-23, -57], [-25, -18], [-18, 45], [66, 30]], [[17107, 13235], [68, -70], [92, -25], [40, 23]], [[17307, 13163], [23, -83], [-11, -55]], [[17193, 12776], [-61, 59], [-72, 12], [-59, 61], [1, 42], [-31, 35], [-19, 74], [-43, 28], [-31, -66], [-28, 34], [1, 48]], [[16851, 13103], [148, 4], [28, 45], [-2, 49], [64, 42], [18, -8]], [[17267, 12726], [8, -17]], [[17275, 12709], [-76, 61]], [[9419, 9544], [-27, 26], [-67, -11], [-133, 20], [13, 48], [51, -22], [80, -8], [33, 32], [-42, 47], [10, 51], [-60, 52], [53, 14], [89, -32]], [[17591, 13485], [64, -58]], [[17655, 13427], [-76, -58], [-74, -155], [-79, -24]], [[17426, 13190], [-62, 5], [-57, -32]], [[17107, 13235], [-42, 51]], [[17156, 13434], [48, -32], [81, 0], [33, 41], [79, 8], [52, 51], [80, 5], [62, -22]], [[13007, 18058], [367, -21], [176, -52], [376, -66], [-104, -27], [-17, -119], [348, -9], [56, 30], [265, 18], [173, -57], [-334, -88], [-189, -109], [-165, -45], [27, -93], [-117, 14], [-52, -98], [117, -56], [-27, -39], [170, -25], [-316, -77], [113, -27], [85, -75], [12, -68], [-117, 10], [13, -86], [116, -45], [-206, -35], [113, -23], [-7, -43], [-159, -35], [-136, 37], [-130, -14], [-53, -35], [31, -48], [85, -52], [165, -64], [18, -63], [62, -2], [-6, -126], [-134, 6], [-55, 28], [-56, 79], [-183, -49], [-87, 3], [-51, -65], [181, -32], [84, 22], [204, -61], [-26, -27], [-276, -127], [-134, -22], [-126, -37], [-144, -22], [-181, -53], [-69, -117], [-69, -54], [-149, -42], [-41, -59], [-110, 10], [-62, -16], [-108, -66], [-77, 5], [58, -95], [-18, -80], [-88, -104], [-70, -50], [12, -102], [-44, -59], [-7, -87], [-29, -83], [-149, 5], [-24, 54], [-70, 82], [-81, -37], [-82, -11], [-27, 54], [-110, 82], [-17, 65], [-38, 8], [-19, 65], [-59, 39], [-46, 68], [-63, 197], [-122, 119], [-2, 47], [63, 41], [-72, 28], [0, 101], [41, 25], [15, 67], [164, 14], [57, 192], [-146, 0], [-155, 49], [-4, 52], [113, -10], [151, -50], [8, 61], [-125, 47], [11, 57], [-107, 28], [-43, -50], [-66, -12], [-86, 43], [62, 68], [-37, 34], [79, 53], [-64, 40], [-106, 138], [10, 36], [-142, 67], [-54, 83], [-203, 59], [-210, 27], [-286, -54], [-154, 18], [-179, 93], [-20, 52], [212, 21], [-331, 72], [-22, 77], [292, 45], [43, 23], [216, 9], [108, 54], [19, 57], [-212, 14], [-34, 37], [339, 107], [164, -4], [-9, 82], [181, 37], [383, 32], [59, -32], [303, -22], [38, 71], [335, -84], [51, 31], [-169, 63], [243, 35], [-59, 33], [592, 12], [48, 51], [706, 14]], [[11137, 16262], [-23, -45], [-110, -27], [-121, 59], [17, 71], [114, -3], [123, -55]], [[13420, 16365], [-187, -23], [75, 59], [116, 26], [-4, -62]], [[13649, 16654], [48, -28], [9, -60], [-164, 58], [107, 30]], [[14206, 8900], [-5, 37], [22, 31]], [[14223, 8968], [91, -1], [11, 23], [44, 3], [54, -42], [-10, -29], [-63, 46], [-12, -22], [-47, -9], [-4, -23], [-74, -1], [-7, -13]], [[14673, 8815], [60, -66], [31, 40], [53, -24], [45, 60], [35, -76], [-4, -35], [38, -33], [13, -114], [25, -42]], [[14926, 8185], [-41, -37], [-44, 18], [9, 44], [-13, 81], [-23, 21], [-45, -6]], [[14769, 8306], [-18, 23], [-17, 82], [-47, 89], [-54, 1], [-55, -18], [-19, -54], [-32, -47], [-22, -5]], [[14505, 8377], [-9, 67], [-48, 56], [-42, 33], [-17, 34], [9, 44], [-32, 31]], [[14366, 8642], [20, 54], [37, 22], [45, 5], [2, 126]], [[14470, 8849], [55, -6], [64, -41], [23, 14], [61, -1]], [[16649, 7486], [0, -151], [-113, -1], [-33, 8]], [[16503, 7342], [-26, 15], [39, 95], [2, 57]], [[16423, 7692], [17, -16], [-22, -55], [-17, 34], [22, 37]], [[12410, 196], [64, -16], [15, -52], [-78, 35], [-1, 33]], [[7926, 9267], [32, 3], [28, -26]], [[7986, 9244], [-80, -85], [0, -57], [-18, -26]], [[7888, 9076], [-67, -88]], [[7821, 8988], [-44, 23], [-40, -1], [-41, 19], [-59, 61]], [[7637, 9090], [13, 70], [-8, 29], [40, 98], [110, 7], [2, 38], [-80, 105], [30, 11], [4, 65], [158, 3]], [[28249, 8936], [3, 15], [11, 6], [-3, -27], [-11, 6]], [[14366, 8642], [-35, 31], [-15, 53], [-107, 79]], [[14209, 8805], [57, 17], [32, -5], [43, 32], [129, 0]], [[16638, 6686], [-67, 115], [-45, 51], [-55, 106], [-39, 142], [39, 58], [5, 47], [27, 57], [0, 80]], [[10288, 8764], [4, 22], [10, 5], [-3, -25], [-11, -2]], [[19446, 12541], [-57, 59], [-27, -19], [-84, 11]], [[19278, 12592], [19, 52], [-28, 106], [-51, 44], [-73, 40]], [[19145, 12834], [57, 22], [84, -42], [107, -8], [77, -52], [123, -10], [51, -30], [-8, -35], [66, -37]], [[15443, 13621], [-4, -4], [-7, 4], [12, 7], [-1, -7]], [[15650, 8649], [8, -62], [37, -47], [-3, -70], [19, -45], [-14, -85], [29, -56], [-11, -18], [5, -113], [-10, -60], [19, -53], [38, -42]], [[15767, 7998], [-23, -41], [-63, -7], [-89, -68], [-67, -26], [-43, -34], [-25, 23], [-64, 20]], [[15198, 11895], [0, -3], [-1, 0], [1, 3]], [[10691, 7962], [-16, -66], [2, -40], [-33, -3], [-31, -106], [31, -101], [33, -4], [9, -67], [44, -107], [18, -11]], [[10378, 7879], [-54, 92], [20, 40], [-2, 64], [67, 33], [-29, 74], [17, 38], [42, 27], [18, 37], [-14, 28]], [[10443, 8312], [73, -63], [58, -95], [14, -56], [29, -15], [71, -89], [3, -32]], [[25604, 10131], [13, -18], [-14, -24], [-17, 36]], [[22061, 300], [-14, 19], [14, 6], [17, -14], [-17, -11]], [[8428, 9151], [-115, -49], [-38, 24], [-45, -90], [-28, -19], [-34, 8], [-19, -34], [-35, 0], [3, -61], [-25, -39], [-27, -2]], [[8065, 8889], [-43, 55]], [[8022, 8944], [8, 52], [-32, 24], [-34, -17], [-76, 73]], [[7986, 9244], [42, 23], [74, -17], [48, 5], [41, 24], [36, -15], [40, 13], [62, -24], [28, -36], [48, -34], [23, -32]], [[27913, 12545], [43, 27], [15, -91], [32, -50], [20, -108], [-45, -121], [-49, -45], [7, -87], [-41, -159], [25, -71], [-32, -22], [-11, -48], [-45, -21], [-30, 37], [-27, -9], [-5, -46], [-33, -18], [-18, 41], [-31, -58], [-57, 8], [-77, 39], [-9, -43], [31, -27], [-49, -33], [-48, -93], [-30, 14], [-30, 46], [2, 46], [22, 26], [-59, 36], [-34, -8], [-159, -75], [-32, -36], [-33, 24], [-14, -49], [34, -107], [-21, -31], [-33, -154], [-56, -49], [-40, 30], [7, 116], [24, 54], [-18, 68], [-49, -58], [-14, 36], [9, 59], [96, 80], [9, 48], [33, 9], [46, 41], [78, 93], [118, 10], [93, 27], [41, -33], [36, 37], [-9, 30], [60, 91], [137, 62], [54, 82], [46, 42], [32, 87], [26, 104], [-14, 51], [-1, 79], [68, 41], [9, 29]], [[28111, 12983], [44, -36], [106, -40], [28, -24], [23, -61], [-33, -39], [-62, 0], [-52, -39], [-38, -97], [-125, 86], [-71, -39], [-24, 35], [-33, -43], [36, -17], [-29, -76], [-54, 95], [8, 50], [54, 45], [1, 47], [56, -25], [20, 18], [-2, 57], [23, 27], [13, 84], [-15, 70], [28, 46], [98, -124]], [[27298, 11649], [38, 15], [42, -25], [7, -46], [-32, -33], [-90, -25], [-28, -81], [-43, 24], [-10, 67], [49, 85], [52, -15], [15, 34]], [[22072, 12325], [-114, -19], [-66, 19], [-69, -7], [-24, 26], [-102, -7], [2, 57], [59, 30], [42, -24], [38, 25]], [[21838, 12425], [24, 13], [44, -23], [56, 59], [8, 55], [-51, 19], [-81, -1], [-23, 37], [-43, 18], [91, 75], [-27, 11]], [[21836, 12688], [30, 66], [48, 8], [124, -42], [27, 68], [61, 26], [82, -51], [57, 15], [42, -11], [49, 15], [100, -18], [37, 7], [51, -19], [38, -37], [64, -32]], [[25022, 9110], [-18, -74], [24, -100], [-11, -50], [4, -77], [-47, -34], [-49, -17], [-52, -44], [-7, -80], [-38, -18], [-37, -43], [-40, -16]], [[24751, 8557], [-47, 27], [-18, 28], [-48, 7], [-3, 57], [-17, 40]], [[24618, 8716], [-16, 66], [4, 38], [-22, 31], [-14, 76], [70, 136], [45, 14], [21, -12], [77, 11], [34, -11]], [[24817, 9065], [15, -30], [70, -6], [-14, 38], [44, 30], [27, -36], [63, 49]], [[1971, 7452], [15, -19], [-3, -10], [-26, 22], [14, 7]], [[19448, 5657], [-22, 19], [13, 21], [9, -40]], [[10207, 9453], [-6, -4], [-8, 10], [6, 5], [8, -11]], [[27030, 12708], [4, -17]], [[27034, 12691], [-53, -29], [-36, -67], [6, -89], [-43, -22], [-80, -88], [-30, -1], [-39, -38], [-11, -64], [31, -14], [53, -64]], [[26832, 12215], [-26, -39], [-81, -2], [-40, -60]], [[26685, 12114], [-92, -4], [-74, 41], [56, 150], [-1, 33], [-51, 23], [-39, 38]], [[19878, 10907], [-63, -2], [-22, 62], [-79, 13]], [[19714, 10980], [27, 44], [23, 67], [22, 20], [50, -13]], [[19836, 11098], [36, -37], [-25, -51], [31, -103]], [[8593, 9716], [13, 0], [-1, -8], [-9, 0], [-3, 8]], [[23332, 10823], [-11, -99], [15, -45], [-7, -42], [-67, -11], [-23, 27], [-29, -18], [-36, 23], [-39, -4], [-20, 36], [-27, -14], [-57, 37], [-5, 38], [-50, 15], [-110, 8], [-63, 54], [-63, 29], [-9, 26], [-63, 28], [-37, 35], [26, 118], [47, 55]], [[30187, 7135], [2, 5], [3, -3], [-4, -6], [-1, 4]], [[874, 4729], [7, 15], [9, -13], [-9, -12], [-7, 10]], [[16856, 13241], [-22, -21], [23, -99]], [[16857, 13121], [-54, 6], [-84, -44], [30, -45], [-20, -26], [11, -69], [108, -88], [34, -110], [67, -82], [31, -18], [83, 2], [-6, -67], [92, -47], [82, -55], [43, -66], [-44, -19], [-13, 38], [-65, 31], [-44, -60], [-7, -50], [54, -36], [-4, -63], [-48, -21], [3, -36], [-44, -69], [-38, 37], [43, 65], [-12, 92], [-21, 64], [-71, 40], [-14, 56], [-59, 21], [-29, 52], [-100, 30], [-85, 108], [-99, 86], [0, 42], [-31, 91], [-75, 46], [-46, 12], [-54, -63], [-53, -20]], [[16743, 12908], [7, -5], [1, 9], [-8, -4]], [[16742, 12641], [7, -1], [-1, 5], [-6, -4]], [[17020, 12170], [-44, -101], [20, -61], [-17, -45], [-55, 16], [-179, 129], [6, 30], [52, 21], [54, -27], [68, 9], [95, 29]], [[16504, 12507], [13, -46], [-21, -175], [-44, 5], [-18, -41], [-43, 26], [15, 103], [-21, 91], [81, 86], [38, -49]], [[10348, 9006], [9, 19], [8, -25], [-17, 6]], [[14598, 9120], [-54, 61], [-46, 107], [-40, 10], [-45, 65], [-63, 3], [-54, -23], [-50, 1], [-11, -35]], [[14235, 9309], [-8, -20]], [[14227, 9289], [-1, -1]], [[14226, 9288], [6, 69], [30, 119], [3, 123], [-11, 60], [-26, 53], [23, 115], [-23, 60], [-48, 13]], [[15243, 10448], [-151, -1], [32, -421], [7, -96], [44, -581], [24, -28], [-15, -103], [-53, -3], [-277, 0], [-49, -17], [-69, 6], [-30, -22], [-40, 53], [-21, -16], [-11, -83], [-36, -16]], [[26832, 12215], [24, -64], [61, -113], [12, -64], [-2, -158], [-34, -62], [-91, -6], [-46, -54], [-42, 2], [-42, -39], [-16, 120], [36, 84], [-18, 36], [-7, 68], [27, 36], [-9, 113]], [[24551, 10111], [42, -69], [28, -14], [-5, -55], [21, -58], [55, -14], [48, 14], [53, -97], [-8, -44], [-26, -24], [-27, 11], [-29, -51], [73, -65], [37, -18], [-3, -30], [45, -60], [11, -39], [47, -51], [21, -40], [18, -71], [61, -40], [-19, -36], [31, -76], [-3, -74]], [[24817, 9065], [29, 28], [8, 145], [-19, 44], [-31, 12], [-26, 55], [4, 111], [-45, 63], [-26, 59], [-51, 16], [-31, -59], [-39, -5], [-42, 34], [-83, -96], [-16, 14], [18, 62], [-10, 50], [25, 76], [-11, 74], [-63, -8], [6, 80], [-42, 25]], [[24372, 9845], [9, 38], [47, 84], [36, 36]], [[10247, 9375], [4, 13], [4, -11], [-8, -2]], [[25895, 7747], [15, -43], [-33, -84], [18, -16], [40, -98], [-16, -52], [71, -85], [10, -56], [-58, 8], [-34, -25], [-17, -50], [-6, -146], [-78, -86], [-13, -44], [13, -57], [-29, -96], [6, -95], [-33, 13], [-104, -70], [-20, 87], [-38, 21], [-37, -16], [-52, 57], [-35, -50], [-25, 8], [-48, -23], [2, 56], [-41, 19], [-35, -20], [-35, 27], [-26, -13], [-28, 149], [10, 62], [-12, 30], [-41, -20], [-32, 132], [10, 37], [-23, 40], [-6, 59], [18, 94], [24, 54], [27, 18]], [[25204, 7473], [3, -59], [52, -79], [25, -19], [56, 27], [54, -9], [59, 74], [100, -42], [29, 25], [50, 2], [26, 63], [-7, 35], [37, 38], [-5, 51], [32, 25], [6, 108], [26, 57], [117, -1], [31, -22]], [[24025, 7894], [129, -21], [56, -97], [4, -36], [49, -53], [82, -77], [67, -120], [46, 4], [18, -26], [36, 8], [9, -62], [57, -16], [3, -47], [26, 0], [30, -30], [8, -33], [38, -43], [5, -85], [-27, -50], [31, -34], [53, -11], [11, -107], [26, -16], [8, -40], [59, -11], [42, -106], [-19, -51], [5, -169], [-8, -108], [-44, 36], [-11, -39], [-41, 32], [-10, -51], [-71, 118], [-35, 27], [-89, 103], [-13, 46], [-50, 56], [-25, 60], [-36, 55], [-6, 55], [-45, 135], [-57, 115], [-44, 38], [-33, 146], [-2, 36], [-31, 39], [-57, 42], [-15, 66], [-57, 100], [-42, 29], [-76, 107], [-27, 73], [4, 45], [29, 5], [40, -37]], [[27933, 6866], [0, -175], [-1, -301], [-12, -47], [14, -37], [0, -286]], [[27934, 6020], [-29, 34], [-63, 102], [-68, -4], [-28, -34], [-104, 0], [27, 81], [22, 32], [41, 14], [-2, 100], [-21, 37], [-33, 110], [-43, 47], [-147, 83], [-61, 8], [-88, 84], [-18, -8], [-25, 44], [-33, -68], [-31, -7], [-3, 67], [-57, 115], [43, -14], [27, 38], [56, -16], [0, 53], [-121, -8], [-30, 46], [8, 25], [-59, 39], [-34, -3], [-26, 59], [96, 35], [30, 34], [48, 11], [67, -46], [46, -2], [25, -78], [-13, -45], [6, -80], [28, -30], [33, -88], [54, -15], [64, 96], [13, 45], [32, 0], [42, 26], [-10, 32], [47, 35], [87, -36], [97, -72], [29, 4], [78, -36]], [[26538, 7344], [-42, -75], [-76, -28], [-49, 29], [-108, -10], [-23, 13], [-43, -15], [-43, 15], [-35, -40], [-12, -55], [6, -62], [55, -91], [32, -1], [43, 71], [33, -15], [25, 23], [51, -22], [-40, -71], [-44, -26], [-27, -58], [20, -18], [54, -112], [-16, -59], [54, -67], [1, -34], [-60, -17], [-14, -46], [-38, 12], [1, 88], [-52, 59], [4, 122], [-44, -5], [-26, -36], [14, -38], [-3, -78], [6, -99], [-12, -56], [13, -46], [-61, -31], [-32, 38], [19, 113], [2, 61], [-11, 65], [-50, 10], [-7, 104], [24, 27], [20, 74], [1, 92], [31, 63], [17, 149], [27, 47], [32, 0], [24, 65], [51, -4], [13, -26], [77, -8], [122, -22], [35, 22], [45, 60], [16, -51]], [[24896, 6427], [110, -1], [25, -32], [54, 0], [39, -74], [67, 1], [76, -20], [28, 62], [40, -25], [31, 6], [51, -34], [42, 0], [16, -83], [48, -32], [64, 20], [34, -24], [-8, -82], [-26, -25], [-69, 45], [-49, -22], [-32, 15], [-140, 19], [-72, 45], [-70, 20], [-54, -15], [-53, 10], [-38, 30], [-74, 11], [-23, 56], [-28, 22], [-39, -7], [30, 101], [20, 13]], [[26772, 7324], [17, -9], [29, 68], [42, 24], [0, -61], [-30, -27], [2, -30], [-41, -40], [14, -135], [-32, 67], [2, 62], [-24, 102], [9, 81], [16, 30], [26, -36], [0, -37], [-30, -59]], [[26965, 6823], [40, -6], [45, -79], [-3, -34], [-70, 48], [-93, 18], [-43, -13], [-34, 50], [11, 27], [82, -14], [22, 21], [43, -18]], [[26362, 6149], [-11, -60], [-89, -37], [-35, 9], [-34, -19], [-17, 16], [-80, -1], [-8, 30], [40, 42], [31, 3], [78, -45], [41, 20], [25, -23], [59, 65]], [[25913, 6153], [104, -28], [13, -56], [-33, 6], [-28, -21], [-64, -7], [-58, -24], [-26, 16], [9, 56], [26, 23], [46, -12], [11, 47]], [[26547, 5978], [-57, -91], [-53, -25], [-20, 55], [9, 38], [31, 37], [38, 22], [41, 28]], [[26536, 6042], [11, -64]], [[24889, 6985], [18, -83], [40, -43], [-24, -41], [-39, 22], [-18, 85], [-40, 2], [14, 73], [37, 8], [12, -23]], [[26108, 5985], [38, -33], [31, -51], [-33, -35], [-25, 11], [-44, 57], [-42, 5], [0, 47], [75, -1]], [[26697, 6806], [39, -46], [-3, -30], [-43, -23], [-44, 28], [-17, 57], [68, 14]], [[27389, 6414], [-11, -54], [-24, -40], [-24, 2], [6, 100], [33, 79], [18, -29], [2, -58]], [[26383, 6584], [-21, -47], [18, -26], [-47, -39], [-29, 39], [6, 72], [59, 51], [14, -50]], [[25702, 6149], [28, -33], [-42, -45], [-27, 71], [41, 7]], [[25805, 6068], [-33, -21], [-12, 61], [30, 31], [30, -18], [-15, -53]], [[25580, 6313], [-36, -47], [-65, 9], [3, 34], [98, 4]], [[25058, 6870], [25, -24], [-7, -49], [-47, -12], [2, 86], [27, -1]], [[24149, 7388], [35, -56], [-4, -46], [-41, 41], [-27, 60], [37, 1]], [[24297, 6972], [-29, 12], [-26, 64], [26, 36], [29, -112]], [[27142, 6283], [-23, -16], [-2, -53], [-33, 21], [35, 46], [23, 2]], [[27085, 7184], [-43, -37], [-42, 42], [46, 13], [39, -18]], [[15032, 14350], [-78, -79], [52, -42], [35, 13], [76, -17]], [[15117, 14225], [-7, -26], [30, -123], [-32, -77], [-106, -34], [-96, -64], [-52, -14], [-58, 18], [-4, 58], [61, 129], [-67, 45], [26, 60], [2, 58], [100, -10], [-11, 58], [41, 56], [80, 28], [8, -37]], [[18763, 11518], [4, -72]], [[18767, 11446], [-10, -39]], [[18757, 11407], [-26, 19], [-24, -48], [2, -68], [41, -19]], [[18750, 11291], [-2, -51], [-25, -87], [-16, -115]], [[18707, 11038], [-7, -6]], [[18645, 11256], [19, 48]], [[18664, 11304], [25, 68], [28, 127]], [[18717, 11499], [46, 19]], [[15274, 14231], [-21, 8], [18, 22], [15, -12], [-12, -18]], [[21958, 6262], [9, -8], [-1, -2], [-8, 10]], [[22481, 11411], [27, -63]], [[22547, 11264], [32, -51]], [[22637, 11190], [-6, -28]], [[23678, 10690], [44, 11], [82, 0], [61, 81], [87, 47], [49, 46], [37, -8], [70, -62]], [[24108, 10805], [-29, -50], [-55, -19], [-75, -72], [-5, -79], [-41, -77], [3, -58], [-50, -148], [-57, 12], [-10, -102], [-21, -21], [4, -93], [-18, -39], [-33, -4]], [[23415, 10079], [-1, -62], [-44, -8], [-68, 12], [-54, -23], [-29, -47], [13, -59], [-21, -50], [-38, -50], [-76, -42], [-44, -46], [-71, -122], [-45, -39], [-36, -57], [-49, -38], [-31, -50], [-2, -47], [-42, -27], [-36, -1], [-34, -76], [-26, 17], [-33, -27], [-18, -79], [10, -63], [-3, -62], [17, -106], [-15, -96], [-34, -114], [7, -171], [-48, -11], [-26, -70], [4, -55], [-52, -23], [-23, -31], [-12, -63], [-49, -38], [-40, 33], [-43, 77], [-27, 136], [-42, 172], [-51, 104], [-29, 97], [-15, 109], [-34, 127], [-26, 48], [-10, 50], [-33, 81], [-17, 136], [-26, 141], [-26, 207], [18, 101], [-22, 77], [5, 63], [-31, 75], [-19, -31], [15, -46], [-18, -57], [-98, -63], [-32, 10], [-46, 47], [-93, 139], [54, 15], [49, 30], [48, 76], [47, 5], [-2, 104], [-29, 34]], [[21833, 10352], [14, 59], [-34, 89], [-3, 38], [-45, 29], [3, 80], [-55, 29], [5, 52], [50, 88], [36, 23], [25, -39], [89, 34], [42, 99], [51, 42], [39, 113], [38, 27], [-9, 23], [42, 66], [20, 31], [-6, 83], [29, 42], [44, 12], [-9, 14]], [[22199, 11386], [-16, 24], [-23, -1], [-7, 48], [-27, -7], [-29, 51], [-5, 69], [22, 42], [-25, 3], [-14, 46], [13, 32], [36, 18], [66, -21], [59, -15], [21, 22], [53, 12], [24, 22], [15, 25], [62, 51], [44, -111], [53, -42], [-16, -26], [7, -71], [49, -52], [13, -57], [-18, -14], [-34, -33], [-13, 31], [-34, -11]], [[21761, 10348], [-14, -68], [27, -28], [56, 36], [23, -38], [-35, -33], [-91, -60], [-44, 12], [-47, 45], [-13, 47], [18, 33], [88, 20], [-65, 38]], [[21664, 10352], [97, -4]], [[19561, 12028], [6, -49], [34, -53], [11, -51], [35, -23], [33, -89], [-22, -10], [-38, -77], [-3, -64], [88, -136], [57, -55], [28, -11], [36, -80], [-12, -99], [27, -8], [2, -61], [39, -67]], [[19882, 11095], [-46, 3]], [[19714, 10980], [-11, -5], [-149, 20], [-226, 243], [-59, 38], [-90, 74], [-105, 27]], [[19074, 11377], [-35, 158]], [[19039, 11535], [193, 137], [19, 46], [14, 111], [-11, 54], [13, 60], [36, 10], [46, 67]], [[19349, 12020], [37, 34], [72, -18], [36, 10], [67, -18]], [[14300, 15801], [79, -28], [92, -67], [12, -54], [-122, -108], [-85, -17], [-64, -43], [-81, -10], [-48, -34], [-84, -7], [-91, 17], [-143, 83], [-58, 79], [42, 84], [-79, 18], [-81, -20], [-16, 44], [92, 88], [42, -1], [141, -108], [105, 23], [58, 49], [89, -3], [200, 15]], [[15467, 13596], [14, 0], [-11, -11], [-3, 11]], [[8844, 9575], [47, 33], [75, -15], [55, -34], [-17, -38], [-105, 0], [-30, 47], [-25, 7]], [[19074, 11377], [-17, -20], [-174, -65], [86, -129], [-43, -65], [-65, -18], [-22, -48], [-37, -40], [-97, 22]], [[18705, 11014], [2, 24]], [[18750, 11291], [7, 116]], [[18767, 11446], [31, -5], [34, -35], [36, -7], [171, 136]], [[19917, 12192], [11, -87], [39, -36], [60, -13], [23, -39], [62, -47], [74, -18], [131, 38], [40, -9], [-3, 69]], [[20354, 12050], [77, 24], [5, 29], [54, 43], [74, 0], [13, 23], [50, -9], [37, -34], [69, -33], [50, 1], [34, -22], [29, -48], [42, -16], [29, -50], [67, -1], [11, -132]], [[20960, 11079], [42, -65], [40, -94], [84, -47], [1, -133], [45, -12], [-13, -65], [-73, -17], [-40, -38], [-22, -134]], [[21024, 10474], [-21, -15], [-63, 27], [-139, 17], [-42, 26], [-39, -7], [-68, 29], [-22, 79], [-12, 78], [-51, 24], [-63, -28], [-75, -60], [-43, 28], [-49, 0], [-24, 33], [-64, 41], [-22, 44], [-35, 26], [-55, 14], [-35, 114], [-29, 42], [-3, 36], [-61, 102], [-127, -29]], [[19561, 12028], [-19, 77], [-30, 19], [5, 118], [-21, 70], [66, 35]], [[19310, 7721], [-79, -156], [0, -348], [0, -118], [49, -109]], [[19280, 6990], [-47, -50], [-22, -53], [-50, -35], [-7, -72], [-58, -168], [-21, -14]], [[19075, 6598], [-122, 127], [-19, 33], [5, 51], [-272, 230], [-51, 35]], [[18616, 7074], [-1, 143], [52, 128], [25, 23], [18, 82], [-8, 79], [-41, 94], [-1, 55], [-28, 31], [-11, 42]], [[18621, 7751], [34, 53]], [[18655, 7804], [98, 0]], [[18753, 7804], [38, 0]], [[20569, 10446], [20, -62], [46, -71], [64, -32], [77, -27], [46, -94], [43, -34], [2, -37], [-40, -102], [-43, -49], [-33, -87], [-33, 19], [-22, -43], [-13, -66], [10, -77], [-13, -21], [-72, -24], [-43, -107], [-77, -16], [-18, -74], [-19, -29], [-80, -4], [-87, -43]], [[20284, 9366], [-96, 304]], [[20188, 9670], [260, 129], [58, 259], [-39, 93]], [[18717, 11499], [76, 199]], [[18793, 11698], [32, 3], [22, -58], [-47, -54], [-2, -30], [-35, -41]], [[18015, 3358], [29, 21], [36, 75], [76, 43], [59, -67], [12, -35], [-25, -72], [-70, -33], [-23, -63], [-31, 7], [-33, 43], [-30, 81]], [[17709, 14206], [-17, 38], [-46, 15]], [[17646, 14259], [4, 69], [-136, 45]], [[17514, 14373], [-18, 107]], [[17496, 14480], [92, 47], [213, -18], [96, -20], [83, -59]], [[18043, 14668], [43, -27], [-8, -44], [38, -68], [-3, -36]], [[17496, 14480], [0, 99], [54, 94], [77, 26], [60, -84], [59, -13], [41, 34], [-5, 79]], [[17838, 10059], [0, -258], [-85, -2], [-2, -65]], [[17751, 9734], [-240, 178], [-455, 333], [-88, -56]], [[16968, 10189], [-70, -45], [-67, 72], [-124, 39]], [[16494, 11129], [31, 16], [34, 70], [-14, 74], [72, 90], [53, 47], [-1, 82]], [[16669, 11508], [67, -44], [76, 10], [88, -26], [25, -25], [60, -17], [25, -89], [45, -52], [120, -28], [72, -40], [66, -63], [37, 5], [35, 28], [33, 76], [-21, 85], [24, 63], [72, 62], [60, 24], [38, -1], [78, -37], [20, -55], [75, -26], [77, -11], [10, -35]], [[15198, 11859], [9, -41], [43, -43], [123, -5], [31, 14], [4, -2], [10, -22], [53, -3]], [[14517, 10794], [23, 38], [70, 16], [52, 30], [39, 57], [72, 72], [37, 72], [17, 71], [-24, 31], [5, 98], [49, 102], [0, 47], [63, 90], [88, 50], [63, 59], [42, 97], [35, 124], [46, 17], [4, -6]], [[16310, 12882], [-2, -4]], [[16032, 9688], [0, -276], [-14, -15], [-1, -75], [-17, -81], [-32, -46], [-77, 3], [-110, -13], [-34, -36], [-64, 0]], [[14673, 8815], [2, 71], [-16, 41], [-43, 46], [1, 84], [-19, 63]], [[23306, 13587], [35, 39], [51, -3], [73, 32], [-1, 28], [153, 70], [30, 32], [79, -1], [39, -17], [100, -1], [33, -68], [73, -15], [69, 8], [93, -29], [47, 26], [37, 74], [-39, 60], [9, 42], [85, 106], [91, -48], [47, -3], [142, -51], [14, -97], [51, -36], [68, -23], [148, 42], [118, -20], [37, -38], [68, -14], [2, -31], [52, -44], [89, -15], [118, -5], [185, 54], [14, 30], [96, 57], [54, -10], [39, -37], [71, 15], [43, -23]], [[25544, 10087], [0, -4], [-1, 0], [-1, 3]], [[28348, 9178], [-3, -13], [-4, 2], [1, 12], [6, -1]], [[16968, 10189], [17, -128], [1, -65], [35, -70], [0, -26], [32, -56], [-20, -59], [-13, -149], [-8, -237], [-98, -155], [-44, -88], [-6, -40], [-27, -37], [13, -95]], [[16850, 8984], [-67, -29], [-35, -55], [-32, 4], [-52, 33], [-71, 1], [-54, -20], [-39, -52], [-59, 5], [-95, 64], [-80, -44], [-46, 84], [-75, 33], [-24, -20], [-36, 4], [-61, -40], [-5, -63], [-37, -60], [-5, -107]], [[18118, 13104], [-11, 71], [14, 56], [-14, 70], [-70, 93], [-11, 37], [-46, 36]], [[17980, 13467], [14, 18], [88, 3], [58, -41], [62, -21], [0, -60], [36, -69], [30, -18], [-5, -57], [-60, 21], [-19, -65], [-66, -74]], [[17349, 12635], [-74, 74]], [[17336, 12853], [38, -45], [58, -36], [-22, -46]], [[19957, 5635], [33, -87], [36, -136], [4, -100], [25, -100], [-23, -82], [-29, 71], [-22, -15], [20, -86], [-1, -45], [-36, -95], [8, -51], [-16, -94], [-40, -151], [-51, -247], [-34, -129], [-27, -172], [-42, -151], [-35, -28], [-33, -1], [-66, -48], [-34, -6], [-33, 34], [-37, 10], [-29, 33], [-32, 88], [-2, 82], [10, 31], [-34, 82], [-11, 104], [22, 82], [22, 10], [14, 61], [51, 109], [-4, 89], [-18, 37], [-13, 74], [-12, 133], [41, 97], [13, 65], [26, -12], [37, 17], [33, 47], [35, -11], [73, 86], [51, 20], [21, 55], [11, 113], [25, 2], [57, 46], [15, 64], [-14, 46], [45, 59]], [[30476, 8438], [-1, -5], [-5, 6], [6, -1]], [[17455, 12638], [43, 42], [111, 15]], [[16913, 11874], [18, -15], [-5, -8], [-15, 9], [2, 14]], [[20682, 4547], [-28, -1], [15, 57], [24, -24], [-11, -32]], [[22053, 7919], [-8, -9], [0, 3], [7, 8], [1, -2]], [[21836, 12688], [-89, -70], [-65, -39], [-48, -66], [-49, -14], [-12, 49], [-112, 11], [-9, 77], [-45, 16], [7, 122], [-84, 109], [-54, -20], [-98, 8], [-117, -22], [-81, 100], [-219, 170], [-224, -77], [-1, -327], [0, -149]], [[20536, 12566], [-43, -8], [-59, 100], [-59, 41], [-99, -27], [-50, -49]], [[20226, 12623], [-1, 47], [26, 72], [-71, 24], [-52, 69], [-83, 162], [44, -3], [49, 96], [93, 6], [49, 75], [0, 115], [-51, 14], [-27, -21], [-85, 38], [-66, -30], [-105, -71]], [[19946, 13216], [-54, 138], [-49, 47], [-77, 6], [1, 35], [-56, 50], [42, 98], [-10, 77], [63, 82], [58, -74], [49, 23], [-20, 77], [65, 29], [6, 32], [77, 30], [21, 36], [153, 16], [24, -33], [71, 1], [92, -83], [52, 6], [54, -40], [72, 60], [155, 11], [58, -56], [76, -14], [106, 14], [34, 16], [14, 61], [-97, 46], [-34, 38], [81, 49], [-25, 49], [41, 41], [-21, 79], [38, 58], [49, -15], [235, 56], [304, 75], [73, 58], [101, -35], [58, 16], [38, -80], [-8, -66], [58, 12], [143, -34], [-3, -64], [92, 24], [84, 55], [99, 34], [-7, -40], [120, -100], [111, -174], [76, -143], [57, 59], [35, -13], [35, -54], [88, 0], [56, 31], [54, -16], [45, -81], [58, -26], [21, -52], [82, -21], [45, 13], [56, -64]], [[18705, 5703], [-28, -21], [-23, -58], [22, -169], [41, -28], [67, -125], [-5, -177], [-44, -26], [-14, -80], [-62, 75], [-15, 47], [30, 82], [-7, 90], [-15, 24], [-46, -19], [-30, 18], [-20, 52]], [[18556, 5388], [-37, 39], [16, 63], [2, 73], [31, 14], [-14, 126], [15, 52], [-12, 37], [37, 40], [-27, 87], [-36, 65]], [[18531, 5984], [45, -28], [49, 15], [42, -70], [7, -127], [31, -71]], [[24372, 9845], [-50, 2], [-36, -36], [-6, -33], [-40, -19], [-44, 13], [-22, -50], [-24, -115], [23, -106], [45, -79], [46, -123], [-23, -15], [-2, -83], [-25, -16], [0, -58], [28, -60], [31, -34], [19, -48], [-4, -85], [26, -63], [20, -101], [-37, -90], [-38, -62], [-3, -32]], [[24256, 8552], [-24, 40], [19, 35], [4, 82], [-16, 98], [9, 47], [-25, 112], [-24, 23], [-2, 53], [-21, 80], [-10, 129], [-11, 66], [-33, 73], [-28, 19], [-13, -42], [-83, -67], [-31, -53], [-43, 4], [-62, 41], [30, 168], [-10, 95], [-23, 85], [-44, 33], [-14, 36], [-18, 95], [-44, 20], [-37, 70], [-16, 55]], [[24108, 10805], [26, 60]], [[18349, 16256], [-27, -28], [-108, -31], [-33, -32]], [[17451, 16166], [-53, -89], [-158, 21], [-176, -142], [25, -30], [-87, -95], [-75, -46], [-2, -104], [-73, -95], [39, -18], [-12, -56], [-112, -6], [-61, -91], [27, -131], [-13, -70], [62, -47], [-54, -46], [32, -64], [-10, -55], [-69, -66], [6, -64], [-27, -13]], [[16660, 14859], [-8, 15], [-133, -8], [-137, -117], [-62, -21], [-145, 60], [-29, 35], [40, 30], [-6, 68], [-63, -15], [-3, 66], [19, 41], [-50, 100], [34, 74], [-27, 43], [23, 36], [208, 124], [187, 71], [24, 56], [122, 92], [65, 67], [92, 127], [37, 87], [96, 72], [13, 45], [131, 37], [-71, 94], [138, -17], [75, 58], [9, 60], [94, 58], [59, -40], [96, 10], [95, 59], [107, -9], [181, 111], [136, -76], [63, 78], [148, -52], [62, -2], [75, -50], [-121, -41], [115, -29]], [[8885, 8141], [-46, 106], [-13, 82], [-34, 36], [-45, 6], [-29, -55], [-51, -37], [-5, -29], [38, -72], [-40, -33], [-36, -2], [-30, 53], [-29, 18], [-15, 47], [-43, 23], [-47, -3], [-10, -33]], [[8478, 8447], [29, -73], [43, 3], [22, -30], [57, 12], [63, 42], [41, 48], [52, -19], [51, -5], [36, -22], [59, -73]], [[22644, 8479], [51, -70], [47, -103], [10, -57], [26, -52], [9, -82], [-16, -69], [-31, -36], [-65, -36], [-46, 36], [-18, 89], [-7, 142], [14, 122], [26, 116]], [[15008, 7770], [-62, 27], [-90, 75], [-84, 117], [-48, 33], [-61, 81]], [[14663, 8103], [18, 38], [59, 73], [25, 54], [4, 38]], [[16850, 8984], [39, -82]], [[16413, 7830], [-30, -37], [-74, -13], [-14, 9], [-99, -29], [-50, 56], [-41, 139], [-42, 64], [-59, 20], [-105, -7]], [[8428, 9151], [-14, -29], [9, -62], [-20, -46], [-11, -66], [4, -69], [-21, -113], [8, -51], [-16, -30], [13, -61]], [[8206, 8642], [-71, 90], [-23, 56], [-79, 92], [32, 9]], [[16032, 13871], [-59, 10], [71, 95], [44, 92], [88, 64], [76, 10], [38, -29]], [[15956, 13870], [75, -2]], [[27933, 6866], [20, -6], [114, -75], [82, -28], [43, -44], [44, -4], [49, -69], [25, -8], [38, -54], [-3, -75], [59, -26], [51, -42], [51, -21], [23, -70], [-66, -11], [-12, -29], [21, -67], [46, -61], [34, -23], [10, -55], [30, -66], [46, 1], [13, -58], [46, -44], [14, -30], [61, -30], [-19, -50], [-41, 11], [-20, 27], [-174, 40], [-35, 66], [-24, 17], [-86, 171], [-27, 20], [-71, 22], [-33, 25], [-59, -49], [-20, -34], [-54, -12], [31, -59], [0, -30], [-67, -40], [-35, 20], [-104, 4]], [[28906, 6647], [16, -8], [-25, -125], [-21, -29], [-29, -1], [-28, -49], [-75, -44], [-59, -1], [-51, 22], [-58, 47], [-2, 30], [77, -7], [151, 24], [28, 55], [30, 10], [-12, 86], [58, -10]], [[29222, 6326], [-43, 7], [-12, 51], [-39, 52], [1, 46], [26, 1], [35, -75], [32, -32], [0, -50]], [[28794, 6861], [99, -78], [67, -81], [25, -52], [-19, -73], [-20, 49], [2, 36], [-29, 70], [-119, 110], [-6, 19]], [[15019, 12028], [-45, -25], [-59, 18], [-17, 42], [-2, 127], [-57, 38], [10, 83], [40, 90], [20, 139], [-17, 98]], [[27375, 8161], [-11, 10], [7, 19], [7, 2], [-3, -31]], [[20127, 10384], [-42, 31]], [[20085, 10415], [-3, 95], [23, 69], [46, -18], [-7, -48], [11, -57], [-28, -72]], [[18118, 13104], [43, -31], [46, 26], [38, -28]], [[18245, 13071], [-8, -50], [-51, -19], [-31, -49], [-5, -73]], [[17636, 12942], [-18, 33], [-73, 25], [-79, 141], [-40, 49]], [[17655, 13427], [41, 8], [133, -37], [37, 24], [68, 8], [46, 37]], [[30720, 1866], [65, 19], [37, -8], [-12, -51], [12, -46], [-60, -93], [-22, -52], [-36, -28], [-8, -59], [-39, -38], [-80, -50], [-22, -85], [-44, -100], [-89, -111], [-101, -6], [-30, 31], [-124, 20], [-15, 69], [65, 101], [47, 40], [49, 71], [41, 12], [72, 52], [103, 91], [29, 47], [25, 88], [50, 52], [10, 68], [41, 41], [29, -33], [7, -42]], [[30718, 2740], [13, -57], [64, -23], [55, -77], [-6, -39], [29, -48], [1, -71], [38, -17], [47, 17], [14, -74], [27, -35], [79, -41], [34, 12], [40, 46], [46, -19], [-18, -94], [-34, -40], [-5, -39], [-71, -22], [0, -61], [-39, -107], [-48, -83], [-54, -57], [-72, 36], [46, 78], [4, 67], [-24, 35], [-88, 50], [-10, 40], [52, 29], [18, 32], [20, 123], [-36, 124], [1, 62], [-45, 27], [-73, 123], [6, 29], [-41, 67], [30, 7]], [[9539, 4823], [-86, 86], [-12, 54], [-52, 34], [-31, 40], [-108, 63], [-32, 35], [-95, 73], [-33, 64], [-32, 30], [-32, 63], [7, 98], [-25, 50], [-29, 88], [-28, 38], [-15, 71], [-28, 28], [-3, 46], [-44, 105], [-22, 102], [-15, 21], [-14, 76], [-21, 52], [-39, 61], [-22, 81], [-34, 58], [-88, 77], [21, 53], [-28, 56], [10, 28], [-22, 43], [6, 53], [65, 99], [25, 9]], [[2672, 4905], [-24, -2], [-3, 24], [23, 1], [4, -23]], [[30275, 3437], [2, 4], [5, -3], [-3, -5], [-4, 4]], [[7210, 10572], [-7, -43], [-37, -52], [-11, -141], [0, -151], [-8, -53], [17, -113], [42, -127], [60, -106], [19, -71], [36, -63], [86, -43], [28, -43], [28, 0], [69, 28], [45, 5], [71, 29], [28, -32], [29, 7], [14, 54], [45, 56], [25, 78], [11, 126], [65, 50], [73, 14], [68, 25], [65, -22], [41, -39], [-10, -35], [-49, -95], [-6, -111], [-27, -129], [-42, 29]], [[7637, 9090], [-83, 120], [-63, 79], [-45, 14], [-60, 0], [-95, -60], [-55, 4], [-80, 32], [-67, 44], [-23, 26], [-76, 24], [-31, 30], [-84, 40], [-83, 90], [-29, 1], [-97, 44], [-32, 52], [-53, 52], [-51, 33], [-43, 77], [-18, 55], [33, 32], [5, 112], [-22, 33], [7, 58], [-88, 130], [-62, 119], [-38, 51], [-38, 25], [1, 38], [-30, 38], [-86, 62], [9, 69], [-22, 54], [-28, 7], [-16, 42], [-40, 26], [-14, 75], [-50, 20], [-83, 124], [-52, 125], [-31, 99], [-3, 63], [-145, 69], [-9, -69], [14, -41], [7, -86], [23, -52], [58, -59], [16, -50], [56, -69], [13, -78], [31, -37], [34, -74], [33, -34], [27, -119], [52, -119], [7, -75], [38, -1], [28, -33], [34, -69], [-6, -46], [-48, -16], [-24, 72], [-125, 132], [-37, 48], [13, 88], [-27, 72], [-61, 56], [-48, 17], [-68, 58], [-51, 73], [57, 9], [23, 30], [0, 56], [-73, 107], [-65, 56], [-35, 132], [-50, 100], [0, 37], [-42, 92]], [[5471, 11426], [207, 23], [-1, -30], [323, -149], [243, 0], [9, 58], [138, 0], [102, -119], [42, -36], [37, -124], [94, -77], [45, 25], [19, 64], [31, 18], [75, -12], [67, -88], [36, -107], [64, -90], [8, -70], [30, -79], [76, -46], [94, -15]], [[25922, 7745], [-19, 0], [-8, 2]], [[25204, 7473], [23, -44], [49, -4], [33, -21], [22, 21], [8, 77], [41, 70], [114, 44], [77, 130], [18, 54]], [[25671, 7839], [2, -11], [10, 14], [36, 38], [48, 119], [44, 73], [59, -7], [36, -28], [-6, -64], [31, 14], [108, -109], [-46, -31], [-49, -14], [32, -63], [-54, -25]], [[24546, 8014], [94, -120], [23, -66], [5, -64], [-13, -73], [12, -33], [-2, -76], [34, -59], [39, -122], [-16, -20], [-27, 16], [-7, -2], [-18, -26], [-11, 32], [-75, 72], [-31, 20], [-33, 47], [-41, 33], [-1, 53], [-51, 82], [-12, 57], [3, 59], [-21, 40], [-2, 115], [-20, 58]], [[24375, 8037], [24, 15], [61, -36], [15, -59], [26, 16], [22, -23], [23, 64]], [[18525, 3719], [-66, 3]], [[18459, 3722], [-4, 103], [-9, 12]], [[18446, 3837], [6, 106], [-6, 104], [-36, 111], [-23, 138]], [[18387, 4296], [90, 133], [61, 209], [-23, 44], [20, 126], [-5, 61], [8, 84], [-17, 54], [11, 28], [-55, 35], [-35, 4], [-60, 54], [-70, 0], [-2, 50]], [[18310, 5178], [-16, 81], [126, 62], [136, 67]], [[18705, 5703], [50, 0], [27, 19], [32, -35], [53, 15], [50, -14], [46, 54], [48, -19], [37, 32], [30, 0], [65, 47], [35, 39]], [[19178, 5841], [18, -22], [-18, -85], [17, -157], [-4, -127], [6, -67], [18, -66], [-21, -117], [-63, -129], [-70, -73], [-56, -22], [-61, -40], [-48, -43], [-72, -132], [-44, -26], [-56, -81], [-35, -31], [-7, -73], [34, -59], [-2, -32], [25, -126], [16, -11], [4, -100], [-13, -84], [6, -57], [-37, -71], [-151, -87], [-43, -39], [-22, -55], [19, -32], [7, -78]], [[17702, 4916], [68, 20], [65, -10], [26, -31]], [[17403, 3993], [0, -474], [-36, -16], [-38, -56], [-35, 15], [-49, -9], [-66, 25], [-8, 62], [-38, 20], [-12, -50], [-26, -22]], [[17095, 3488], [-64, 83], [-37, 91], [-18, 116], [-22, 84], [2, 90], [-34, 126], [6, 157], [-12, 75], [-37, 68], [-49, 119], [-72, 228], [-47, 78], [-17, 49], [-9, 113]], [[29939, 4591], [38, -22], [63, -61], [36, -61], [111, -106], [-12, -40], [-54, 37], [-35, 45], [-69, 52], [-44, 68], [-34, 88]], [[26177, 9622], [29, -2], [64, -44], [36, -3], [-14, -66], [32, -90], [-28, -105], [-39, -23], [-31, -97], [26, -76], [8, -78], [37, -27], [22, 52], [22, 0], [48, -45], [41, -10], [-16, -39], [31, -63], [22, -10], [-6, -61], [-29, 40], [-37, 22], [-13, 48], [-55, 66], [-3, -32], [-71, 34], [-53, -38], [-42, 72], [30, 37], [-9, 33], [-65, 9], [-29, 152], [54, 22], [-7, 52], [11, 58], [-7, 79], [20, 116], [21, 17]], [[26580, 8477], [39, -41], [37, -77], [5, -138], [15, -15], [2, -61], [-45, -54], [-22, 68], [-37, -72], [27, -76], [-24, -81], [-21, 27], [-58, 30], [-41, 51], [-7, 65], [20, 43], [-16, 49], [-39, 28], [-24, -43], [-63, 28], [-33, -101], [-21, 2], [14, 102], [22, 37], [50, 16], [10, 42], [38, 26], [21, -10], [12, -57], [30, 5], [50, 96], [29, -15], [36, 46], [-6, 80]], [[26545, 8841], [36, -55], [0, -74], [16, -62], [-56, 13], [2, -58], [18, -58], [-39, -22], [-3, 78], [-29, 23], [16, 50], [32, 49], [-46, 58], [-12, 44], [65, 14]], [[26384, 8386], [-24, 0], [-47, 79], [6, 32], [34, 19], [-3, 53], [33, 63], [31, -25], [-34, -119], [4, -102]], [[26311, 8727], [47, -35], [17, -35], [-47, -65], [-31, -9], [-14, 49], [4, 87], [24, 8]], [[25885, 8309], [12, 64], [41, 41], [56, 94], [39, 53], [18, 51], [23, -43], [-42, -61], [-33, -17], [-13, -59], [-42, -43], [-59, -80]], [[26189, 8959], [47, -61], [4, -56], [-27, -51], [-25, 32], [-17, 67], [-30, 69], [48, 0]], [[26455, 8569], [-4, -31], [-51, -39], [46, 127], [9, -57]], [[26473, 8527], [29, -19], [-7, -40], [-51, -15], [-7, 30], [36, 44]], [[26394, 8832], [52, -49], [-14, -29], [-45, 48], [7, 30]], [[21833, 10352], [-27, 25], [-45, -29]], [[21664, 10352], [-7, 1], [-38, -16], [-54, 5], [-22, -17], [-8, 89], [-67, 16], [0, 44], [-19, 32], [-184, -25], [-67, 14], [-16, -18], [-76, 5], [-67, -28], [-15, 20]], [[22071, 11993], [39, -7], [42, 23], [42, -12], [71, -68], [-4, -41], [23, -44], [34, 17], [20, -39], [23, -69], [62, 52], [-63, -52], [-14, -21], [-27, -25], [-49, -10], [-22, -20], [-59, 16], [-67, 19], [-32, -16], [-16, -35], [16, -47], [23, -1], [-21, -44], [4, -67], [28, -51], [30, 7], [6, -48], [23, 1], [16, -25]], [[17386, 14269], [153, -16], [107, 6]], [[17718, 13888], [41, -120], [-70, -63], [-52, -68], [-10, -63]], [[17627, 13574], [-53, 33], [-59, 15], [-128, -23], [-30, 43], [-54, -12]], [[16904, 14172], [-4, 22]], [[16901, 14203], [165, 45], [99, 59], [93, 12], [37, -59], [56, -14], [35, 23]], [[10766, 13303], [-9, 3], [0, 12], [11, -7], [-2, -8]], [[4494, 4042], [5, 5], [0, -12], [-5, 7]], [[9835, 9604], [93, -5], [6, -57], [-28, -11], [-88, 5], [-9, 51], [26, 17]], [[18640, 11269], [24, 35]], [[24618, 8716], [-13, 46], [-38, 25], [-47, 61], [-72, -5], [-2, 107], [-59, 4], [-24, -25], [1, -144], [-35, -101], [-8, -65], [-20, -45], [-11, -100], [27, -75], [33, 12], [11, -88], [27, -42], [20, -122], [45, -65], [46, -1], [47, -79]], [[24375, 8037], [-35, 60], [-2, 32], [-54, 54], [-9, 53], [-23, 40], [-36, -13], [-2, 125], [18, 56], [24, 108]], [[21561, 12029], [9, 48], [43, 81], [-25, 47], [6, 52], [-61, 37], [24, 54], [68, -9], [38, 83], [28, 3], [11, 67], [29, -12], [50, 29], [29, -89], [28, 5]], [[653, 6091], [0, 0], [1, 0], [1, 2], [1, -2], [-1, 0], [-2, 0]], [[26536, 6042], [17, 40], [62, 22], [63, 2], [34, 17], [2, -46], [-47, -33], [-92, -42], [-28, -24]], [[19946, 13216], [-88, -75], [-51, -18], [-77, -154], [47, -37], [16, -42], [2, -102], [23, -50], [73, -105]], [[19145, 12834], [-110, 117], [-46, 17], [-35, 39], [-104, 61], [16, 32], [42, -14], [73, 87], [11, 37], [-20, 47], [110, 52], [-6, 27], [-86, -18]], [[18990, 13318], [8, 59], [46, 36], [72, -2], [27, 56], [-26, 50], [3, 48], [28, 59], [-75, 51], [-129, 34], [-23, 41], [-69, -27], [-49, 27], [-39, -10], [-45, 110], [-73, 7], [11, 70], [-51, 70], [-122, -2], [-55, -29]], [[18103, 14921], [0, 32], [78, 13], [16, 47], [-115, 49]], [[18349, 16256], [97, 18], [87, -20], [-31, -36], [314, -48], [189, -95], [128, -39], [96, -57], [28, -61], [-13, -45], [-67, -54], [-102, -35], [-76, -8], [-242, 43], [-228, 72], [56, -83], [52, -16], [61, -57], [-38, -51], [40, -110], [70, -20], [54, -47], [107, -22], [41, 22], [-24, 57], [-48, -4], [-62, 64], [50, 34], [217, -75], [75, 32], [-56, 67], [12, 39], [137, 63], [60, 47], [170, -28], [27, 81], [-55, 51], [34, 121], [-57, 43], [193, -12], [76, -80], [-106, -16], [-36, -51], [87, -61], [140, 14], [31, 84], [165, 53], [84, 44], [109, 25], [145, 51], [15, -76], [49, -13], [137, 48], [82, -11], [175, 56], [33, -36], [133, 27], [-53, 73], [55, 49], [169, -18], [358, -113], [132, -74], [49, 76], [-55, 21], [-43, 62], [-98, 39], [47, 32], [-2, 88], [-51, 11], [20, 60], [121, 63], [49, 113], [70, 32], [161, 2], [97, -31], [1, -56], [-71, -99], [76, -79], [-25, -77], [4, -151], [84, -77], [-39, -97], [-42, -28], [-93, -113], [86, -12], [111, 52], [82, 97], [-27, 90], [33, 51], [151, 21], [90, -107], [43, 21], [-45, 79], [-138, 45], [-84, -17], [-97, 7], [-22, 76], [58, 108], [-101, 111], [43, 46], [119, 51], [29, -107], [105, 20], [-33, 46], [193, 64], [101, -6], [175, -79], [146, -12], [-77, -52], [58, -37], [3, -56], [60, -4], [-42, 89], [31, 63], [-122, 79], [-112, 26], [-34, 113], [20, 29], [401, 22], [151, 25], [-112, 75], [266, 118], [389, 56], [51, 37], [166, -30], [130, 9], [149, 66], [174, 11], [1, 43], [92, 59], [186, 50], [154, -39], [-78, -46], [272, -42], [253, 3], [116, -19], [20, -54], [103, -43], [-38, -88], [-144, -66], [-115, -25], [-200, -106], [-104, -7], [-51, -60], [108, -1], [196, 40], [-22, 48], [62, 24], [266, -52], [176, 11], [284, -20], [-18, -39], [224, -38], [185, -3], [33, 92], [79, 19], [117, -42], [172, 6], [135, -78], [10, -98], [-75, -29], [81, -80], [136, -74], [53, 27], [76, 118], [71, -42], [98, -20], [133, 32], [120, -27], [71, 21], [152, -5], [-23, 52], [70, 70], [126, 32], [304, -21], [139, -33], [117, 2], [131, -39], [-16, -32], [151, -55], [92, -67], [111, 4], [191, 28], [241, -22], [72, -28], [42, -57], [-24, -54], [156, -57], [73, 32], [144, 11], [55, -21], [188, -11], [83, 33], [46, -66], [167, -55], [65, 35], [-36, 134], [219, -33], [258, 1], [67, -28], [167, -33], [104, -60], [3, -196], [-4, -309], [-103, -50], [-86, 5], [-2, -52], [54, -1], [44, -110], [40, -33], [21, -72], [-39, -44], [-95, 31], [-79, 0], [-136, -48], [-232, -106], [-72, -63], [-123, -59], [-20, -53], [-61, 51], [-117, 27], [-117, -37], [-70, -63], [-10, 79], [-76, -42], [-66, -2], [-87, -29], [-13, -73], [-78, -83], [-37, -68], [109, -53], [-41, -49], [0, -75], [39, -8], [8, -68], [-107, -13], [-28, -58], [3, -68], [23, -48], [-35, -31], [-49, 9], [-93, -53], [-34, -122], [-94, -42], [-4, -79], [-56, -86], [-102, -89], [-17, 51], [-6, 99], [-25, 88], [-47, 262], [-7, 75], [10, 80], [29, 91], [85, 90], [-13, 48], [115, 34], [81, 54], [68, 86], [174, 141], [15, 31], [142, 57], [13, 81], [57, 153], [-96, -21], [-28, -86], [-57, -28], [-138, -113], [-50, 2], [-50, 118], [-47, 29], [-139, -18], [-69, -36], [-10, -36], [-66, -65], [-87, -53], [-63, -99], [74, -10], [8, -36], [-90, -16], [-51, 19], [-52, -37], [-43, 12], [-85, 72], [-59, -11], [-101, 34], [-102, -50], [-76, -14], [-87, 24], [-51, -7], [-235, -3], [-100, -46], [-43, -51], [-65, -39], [-36, -64], [-110, -77], [-86, -84], [-1, -19], [-175, -148], [-81, -59], [50, -36], [94, -2], [-9, -99], [54, 31], [36, -11], [16, -46], [113, 77], [41, 13], [48, -58], [75, -65], [8, -91], [22, -59], [-53, -76], [-36, -106], [12, -90], [-41, -211], [-73, -83], [-65, -107], [-20, -59], [-55, -93], [-75, -81], [-61, -89], [-23, -19], [-67, -112], [-102, -79], [-73, -26], [-65, 25], [-2, 50], [-52, -15], [-39, -51], [-33, -18], [-19, -44]], [[21654, 17146], [-54, -47], [-270, -58], [-132, -15], [-265, -80], [-28, -43], [-108, -37], [-209, -157], [-94, -100], [-9, -70], [73, -98], [102, -54], [-200, -24], [-129, 28], [-28, 91], [-122, -2], [-29, 72], [67, 7], [41, 58], [-22, 35], [142, 77], [-40, 46], [89, 25], [100, 71], [-12, 22], [108, 89], [186, 74], [434, 50], [247, 81], [142, -1], [20, -40]], [[479, 15836], [85, 75], [153, -20], [53, -45], [116, -57], [-110, -85], [-79, 4], [-15, -58], [-62, -33], [46, -51], [-70, -23], [-95, 49], [-134, 45], [-26, 61], [-75, 17], [-116, -16], [-87, 104], [-42, -36], [39, -59], [-60, -66], [0, 25], [0, 4], [0, 19], [0, 24], [0, 24], [0, 1], [0, 22], [0, 24], [0, 23], [0, 22], [0, 23], [0, 23], [0, 22], [0, 23], [0, 22], [0, 14], [0, 7], [0, 22], [0, 22], [0, 22], [0, 21], [0, 21], [0, 21], [0, 21], [0, 21], [0, 21], [53, -12], [159, -78], [190, -80], [47, -43], [30, -107]], [[28114, 14138], [19, -82], [-15, -114], [25, -58], [31, -142], [51, -168], [-60, 29], [-58, -25], [-38, -133], [-1, -41], [37, -64], [23, -98], [-123, 1], [18, 73], [-5, 66], [17, 57], [-27, 90], [23, 101], [-6, 143], [14, 61], [-49, 106], [-1, 53], [21, 84], [-5, 54], [109, 7]], [[27762, 17091], [99, -51], [143, 40], [301, -70], [-75, -66], [-178, -31], [-67, 16], [-219, -39], [-79, 16], [-104, 64], [43, 88], [136, 33]], [[24193, 17594], [177, -35], [-50, -73], [39, -39], [-132, -20], [-301, 36], [-128, 69], [129, 63], [266, -1]], [[24631, 17493], [185, -65], [-31, -62], [-285, -14], [-173, -24], [155, 147], [149, 18]], [[24184, 17682], [-56, -66], [-321, -29], [-119, 33], [89, 87], [185, 41], [222, -66]], [[28457, 16978], [272, -15], [44, -44], [-211, -11], [-178, 56], [73, 14]], [[17386, 14269], [17, 63], [108, 8], [3, 33]], [[28065, 16787], [94, -53], [-28, -34], [-144, 15], [-63, 59], [141, 13]], [[132, 16490], [81, -38], [-32, -30], [-127, -20], [-54, 12], [1, 72], [131, 4]], [[20032, 16187], [-49, -47], [-124, 2], [17, 60], [68, 22], [88, -37]], [[20771, 17713], [-195, -50], [-169, 54], [364, -4]], [[21069, 17694], [-82, -60], [-156, 13], [23, 41], [215, 6]], [[20829, 16333], [92, -54], [-17, -32], [-139, 49], [64, 37]], [[31326, 16486], [0, -72], [-121, 12], [121, 60]], [[30387, 16230], [-121, 33], [39, 26], [99, -19], [-17, -40]], [[29252, 13759], [-64, -64], [-17, 37], [81, 27]], [[18238, 7024], [47, 3], [30, 40]], [[18315, 7067], [31, -77], [-1, -91], [-24, -8]], [[19878, 10907], [38, -118], [32, -15], [15, -47], [56, -54], [14, -65], [-10, -37], [62, -156]], [[20127, 10384], [25, -34]], [[20188, 9670], [-106, -27], [-147, -24], [-79, -58], [-50, -92], [-13, -43], [-40, -21], [-23, 41], [-32, -5], [-83, 12], [-20, 13], [-131, -7], [-22, 23], [-23, -53], [8, -47], [-43, -49]], [[19384, 9333], [-4, 39], [-31, 57], [-5, 39], [-55, 69], [-37, 89], [-8, 52], [-34, 89], [-58, 65], [-31, 19], [-40, 75], [-28, 128], [11, 53], [-7, 50], [-34, 99], [-31, 55], [-69, 53], [-24, 60], [3, 47], [-47, 110], [-74, 139], [-35, 85], [-33, 46], [-30, 2], [22, 161]], [[21668, 873], [43, -63], [68, 27], [14, -39], [-32, -46], [-102, 38], [-15, 46], [24, 37]], [[15805, 8014], [-38, -16]], [[19349, 12020], [-138, 1], [-83, -47], [-95, -7], [-46, 27], [-70, -33], [-62, 23], [-27, -107], [-40, -10]], [[18788, 11867], [-11, 50], [36, 41], [-20, 35], [-56, -46], [-66, 29], [-52, -67], [-102, -30], [-35, 18], [-25, 41], [-70, 43], [-54, 9], [-25, -79], [-45, -12], [-48, 9], [-42, 50], [-61, 46], [-51, -1], [0, 30], [-32, 49], [1, 50], [-57, 24], [-9, 31], [50, 65], [-32, 50], [-38, 23], [-3, 67], [49, 54], [47, 9], [20, -21], [111, 12], [48, 54], [-6, 54], [176, -14], [10, 25], [103, 67], [65, 24], [125, -7], [64, -42], [40, 12], [37, -61], [24, 16], [75, -46], [85, -14], [82, 23], [67, -22], [72, 37], [43, 40]], [[18103, 12652], [10, -52], [81, -44], [-23, -36], [-51, 14], [-61, -13], [-20, -35], [-47, -19], [-64, 23]], [[19075, 6598], [-8, -58], [-29, -119], [8, -47], [56, -97], [-15, -22], [-9, -126], [13, -75], [21, -43], [14, -82], [38, -51], [14, -37]], [[18531, 5984], [-45, 36], [-40, 9], [-53, 59], [-29, 1], [-24, 52]], [[18315, 7067], [25, 9], [131, -2], [145, 0]], [[20354, 12050], [-8, 74], [8, 131], [-34, 50], [-15, 86], [-41, -2], [-13, 54], [20, 76], [77, -40], [39, 7], [36, 41], [-52, 61], [-30, 81], [-48, -4], [-33, -45], [-34, 3]], [[20536, 12566], [92, -3], [-3, 77], [28, 32], [43, 8], [31, 57], [39, 16], [68, -60], [49, -12], [11, -98], [23, -24], [79, -14], [31, 12], [28, -32], [51, -141], [133, -116], [25, -9], [93, -79], [46, -12], [59, -41], [-8, -75]], [[16415, 11998], [49, 36], [47, 16], [28, -12], [41, -117], [-1, -48], [44, -47], [7, -51], [-48, -89], [-38, -30], [1, -56], [49, -44], [35, 2], [7, -42], [33, -8]], [[405, 4464], [26, -2], [-7, -18], [-19, 20]], [[19427, 8692], [36, -63], [57, -72], [53, -1], [74, 56], [51, -20], [29, 10], [62, 51], [61, -4], [49, 24], [26, -9], [100, 38], [55, 55], [44, -23], [-15, -63], [6, -91], [-22, -41], [-8, -112], [-33, -72], [-28, -87], [-24, -35], [-13, -56], [-42, -99], [-14, -69], [-37, -95], [-59, -131], [-107, -174], [-60, -86], [-121, -108], [-84, -105], [-137, -216], [-46, -104]], [[10691, 7962], [16, 21], [90, -28], [8, 25], [61, -10], [30, 11], [65, -20], [3, -29]], [[17096, 17590], [182, -61], [37, -51], [140, -8], [205, -115], [100, -84], [-140, 4], [-91, 38], [-95, 82], [-114, -11], [-71, -119], [-53, -17], [-45, -95], [-60, -9], [-178, 78], [-6, 53], [-219, 144], [-84, 128], [259, 21], [163, -11], [70, 33]], [[17438, 17635], [176, -38], [122, 23], [254, -14], [24, -35], [-163, -71], [-132, -14], [-225, 17], [-191, 47], [-64, 51], [199, 34]], [[18753, 7804], [-17, 51], [-81, -51]], [[18621, 7751], [-42, -60], [-42, 16], [-93, -36], [-67, 25], [-29, -39]], [[17771, 8325], [30, 35], [14, 109], [33, 73], [63, 17], [49, -113], [27, -10], [39, 17], [65, -2]], [[18091, 8451], [16, -34], [57, 1], [20, 38]], [[18184, 8456], [47, 15], [4, 42], [35, 25], [75, -70], [42, 5], [59, 109], [41, 55], [-6, 82], [36, 72], [41, -4], [-11, -75], [9, -112], [22, -16], [40, -65], [-3, -82], [16, 0]], [[16238, 7217], [-11, 25], [11, 14], [12, -16], [-12, -23]], [[8022, 8944], [-9, -31], [-50, 1], [-70, 40], [-43, 7], [-29, 27]], [[10174, 9546], [5, 1], [-2, -6], [-3, 5]], [[18793, 11698], [-5, 169]], [[18459, 3722], [-14, -62], [-71, 16], [-30, 51], [2, 46], [27, 70], [25, 23], [48, -29]], [[9405, 10051], [2, -18], [-7, 11], [5, 7]], [[17751, 9734], [0, -488], [-78, -4], [-10, -62], [-50, -84], [10, -60], [-38, -42], [17, -56], [-30, -40], [60, -132], [1, -64], [25, -17], [-4, -62]], [[20494, 6588], [-10, 11], [2, 7], [9, -8], [-1, -10]], [[29560, 6004], [19, -23], [36, 2], [-2, -52], [-43, 3], [-10, 70]], [[29571, 6122], [-28, -1], [-45, 38], [-55, 59], [33, 4], [30, -43], [27, -13], [38, -44]], [[29650, 6123], [70, -160], [-9, -13], [-54, 75], [-12, 43], [5, 55]], [[29723, 5867], [46, -25], [-30, -30], [-16, 55]], [[18550, 10059], [35, -35], [36, 6], [8, 30]], [[18629, 10060], [243, 0]], [[18872, 10060], [31, -190], [1, -125], [16, -95], [99, -109]], [[18184, 8456], [0, 61], [-100, 4], [7, -70]], [[17765, 15745], [-156, -26], [-108, -104], [37, -50], [-77, -80], [-120, -45], [-60, -41], [-88, -120], [-40, -88], [13, -110], [112, -43], [42, -66], [-100, -132], [-67, -14], [-27, -41], [-10, -125], [-29, -99], [-45, -80], [-100, 10], [-30, -25], [-15, -74], [-73, -6], [-67, 104], [31, 53], [-48, 50], [-86, 156], [6, 110]], [[17316, 14720], [-26, -88], [-52, 4], [32, 72], [46, 12]], [[24700, 7394], [9, -21], [-13, -5], [-11, 21], [15, 5]], [[15173, 5135], [-10, -10], [-3, 4], [7, 12], [6, -6]], [[16851, 13103], [6, 18]], [[17627, 13574], [-36, -89]], [[14663, 8103], [-83, 58], [3, 21], [-44, 45], [-34, 150]], [[14209, 8805], [-3, 95]], [[14223, 8968], [-37, 105], [-21, 35], [42, 100], [19, 80]], [[14227, 9289], [8, 20]], [[10362, 8610], [-7, -87], [-40, 18], [2, 60], [45, 9]], [[31099, 6410], [-6, -1], [-2, 4], [7, 0], [1, -3]], [[20284, 9366], [-55, -30], [-28, -59], [3, -47], [-84, -54], [-63, -22], [-29, -23], [-49, -14], [-45, -31], [-34, -59], [-62, 0], [-52, -52], [-58, -28], [-91, -12], [-70, -78], [-25, 9], [-52, -27], [-44, 32], [-20, 53], [3, 58], [-24, 90], [-6, 70], [-21, 98], [12, 42], [-6, 51]], [[18525, 3719], [-29, -167], [-16, -53], [-54, -55], [-54, -88], [-51, -125], [-43, -83], [-54, -57], [-47, -74], [-86, -100], [-70, -62], [-53, -33], [-51, 7], [-43, -41], [-51, -23], [-104, 30], [-27, -16], [-65, 13], [-32, -9], [-36, -40], [-70, 2], [-39, -14], [-47, -46], [-30, 7], [-70, 81], [-36, 61], [-50, 110], [26, 10], [16, 63], [-10, 67], [-42, 80], [-40, 102], [-41, 162], [-31, 60]], [[18218, 4324], [25, 8], [56, -27], [52, 6], [36, -15]], [[18310, 5178], [-52, 0], [-52, -20], [-33, -37], [-5, -59], [-83, -59], [-20, -50], [-49, -78], [-31, -15], [-40, 22], [-30, -10], [-53, 23]], [[18990, 13318], [-170, -62], [-31, 2], [-63, -35], [-53, -47], [69, -99], [82, 28], [5, -52], [-76, 5], [-36, -38], [-51, -11], [-37, -39], [-55, 14], [13, 50], [-89, 70], [96, 55], [-43, 35], [-60, -10], [-59, 31], [16, 43], [-73, -4], [-83, -99], [-48, -44], [1, -40]], [[15646, 13883], [140, -14], [-3, -26], [-99, -54], [-40, 11], [-97, -4], [-101, -26], [-83, 8], [-23, -59], [-42, 23], [-95, -15], [61, 66], [33, 54], [63, 26], [-80, 47], [-50, -19], [-7, 54], [71, 29], [16, 59], [-24, 54], [111, 41], [-8, 86], [-41, 54], [20, 46], [-154, 4], [43, 88], [-34, 28], [-50, -7], [2, 72], [-27, 38], [18, 71], [-11, 52], [72, 137], [55, -10], [91, 18], [18, -36], [-71, -51], [5, -51], [157, 14], [25, -32], [-63, -112], [-11, -69], [88, -65], [41, -120], [53, -22], [96, -193], [69, -7], [29, -22], [-11, -86], [-67, -73], [-85, -7]], [[15032, 14350], [99, 19], [59, -95], [-73, -49]], [[1536, 8030], [-5, -5], [-4, 9], [-11, 10], [0, 5], [20, -19]], [[28615, 13087], [-18, 0], [-113, -80], [34, 62], [53, 12], [27, 32], [17, -26]], [[9133, 9593], [4, 3], [1, -7], [-2, -1], [-3, 5]], [[25916, 9166], [0, -3], [-12, 5], [12, -2]], [[26410, 10544], [-5, -2], [-2, 2], [5, 4], [2, -4]], [[20410, 5142], [-1, -5], [-5, 8], [3, 1], [3, -4]], [[9809, 13068], [25, -49], [-20, -22], [-89, -48], [-63, 18], [-11, -47], [-78, -29], [-52, -75], [-33, -109], [43, -80], [-94, -52], [-118, -17], [25, -58], [-64, -23], [-64, -2], [8, -39], [-36, -114], [-46, -37], [-17, -109], [-22, -52], [-30, -13], [-20, 61], [-25, 17], [-7, -169], [38, -77], [10, -112], [-67, -61], [5, -51], [-53, -16], [-39, -29], [-39, -71], [-67, -19], [-48, -86], [-160, -153], [-2, -46], [-30, -60], [28, -183], [54, -148], [2, -52], [44, -173], [-7, -118], [-24, -93], [-58, -2], [-18, 61], [-38, 41], [-14, 54], [-56, 110], [-24, 83], [11, 94], [-7, 58], [-27, 26], [-55, 89], [-48, 21], [-16, -21], [-66, -32], [-31, 45], [-61, 42], [-43, 6], [-85, -15], [-99, 15], [-43, -13], [-40, -35], [11, -56], [-74, -21], [-14, -24], [-45, 22], [-57, 53], [-38, -35], [-81, 30], [-71, -14], [-75, -43], [-35, -53], [-151, -98], [-33, -108], [-10, -62], [35, -118]], [[5471, 11426], [-31, 100], [-91, 93], [-51, 11], [-32, 35], [-99, 24], [-3, 74], [-107, 153], [8, 63], [-51, 52], [-50, 133], [-66, 92], [-13, 116], [-43, 58], [22, 73], [3, 79], [-30, 113], [-11, 68], [32, 129], [21, 220], [-11, 165], [-52, 156], [11, 45], [51, -23], [145, -22], [-32, 63], [-10, 67]], [[4350, 14461], [-3, -86], [-24, -39], [-63, 19], [-103, 79], [-40, 62], [28, 52], [-72, 72], [-75, 138], [-159, 27], [-69, -20], [-94, 57], [-41, 41], [-127, 62], [-16, 42], [-88, -9], [-66, 30], [-98, 13], [-107, -9], [-155, 59], [0, 19], [-99, 46], [-143, -23], [47, -39], [-11, -42], [-52, -29], [-56, 14], [-77, -69], [-121, -44], [-13, 80], [42, 77], [0, 41], [77, 38], [-25, 32], [-81, -43], [-91, -124], [-67, -34], [-59, -63], [62, -34], [-4, -30], [-60, -61], [-192, -113], [-12, -41], [-91, -54], [-72, -28], [-10, -52], [-113, -25], [-60, -42], [-82, -1], [-50, -52], [-93, -22], [-36, -38], [-81, -26], [-40, 20], [36, 40], [106, 28], [61, 34], [66, 64], [62, 10], [182, 113], [104, 91], [28, 119], [-113, 47], [-27, -42], [-49, 54], [-63, 17], [-120, -34], [-19, 56], [16, 44], [-68, 60], [-62, -21], [-67, 1], [-107, 89], [25, 70], [-46, 6], [-49, 54], [42, 84], [64, 47], [6, 45], [71, 46], [69, -25], [80, 59], [69, -5], [57, 51], [-52, 78], [23, 57], [-175, -61], [-59, 18], [-106, -16], [-100, 19], [-47, 64], [36, 26], [-142, 35], [53, 40], [233, 87], [60, 6], [28, -66], [158, -9], [48, 47], [-108, 82], [-94, 16], [-56, 72], [-190, 89], [26, 63], [157, 11], [97, 48], [26, 61], [84, 63], [92, 10], [122, 63], [148, 7], [103, 58], [136, -29], [76, -40], [153, 8], [5, -36], [151, -29], [106, 20], [147, -37], [165, -10], [102, -21], [85, 18], [89, -14], [146, -51]], [[2391, 14785], [-23, -45], [53, -59], [-64, -61], [-61, -10], [-29, -41], [-48, 31], [-11, 66], [183, 119]], [[3866, 14752], [44, -35], [36, -154], [-64, 14], [-1, 46], [-75, 68], [-23, 44], [83, 17]], [[4097, 14475], [37, -31], [42, -70], [-98, -41], [-42, 183], [61, -41]], [[2119, 9821], [32, -19], [41, -64], [-14, -23], [-79, -41], [-16, 91], [36, 56]], [[728, 15470], [212, -52], [-28, -28], [-135, 44], [-49, 36]], [[4081, 14598], [28, -61], [-98, -2], [-43, 44], [50, 33], [63, -14]], [[1208, 15045], [48, -65], [-90, -9], [-62, 49], [104, 25]], [[3984, 14748], [-6, -33], [34, -66], [-49, -40], [-38, 150], [59, -11]], [[2040, 9931], [48, -28], [-32, -29], [-16, 57]], [[11018, 2825], [-35, -84], [-33, -35], [-69, -40], [-64, 26], [-40, -20], [-89, 62], [-58, -4], [-50, 75], [6, 98], [19, 16]], [[10342, 8911], [-11, 7], [6, 21], [8, -5], [-3, -23]], [[9457, 8741], [-55, -45], [30, -113], [-42, -107], [39, -96], [25, 6], [25, 38], [0, 50], [-33, 73], [0, 75], [125, 74], [-22, 47], [34, 28], [21, -73], [67, -11], [37, -32], [15, -70], [35, -22], [75, 17], [65, 4], [38, -45], [65, -27], [25, 5], [88, 72], [92, 10], [1, -46], [31, -68], [17, 13], [51, -15], [59, -53], [7, -70], [26, -47], [45, -1]], [[10046, 9599], [0, -4], [-5, 0], [-6, -6], [3, 10], [8, 0]], [[10029, 9512], [-8, -13], [-5, 8], [13, 5]], [[30179, 5240], [30, -6], [-3, -55], [-30, -5], [3, 66]], [[331, 5488], [3, -5], [-4, -11], [-4, 8], [5, 8]], [[25063, 10001], [-47, -36], [-24, -41], [-25, -6], [-34, -83], [-49, -49], [-28, -124], [26, -65], [43, -50], [20, -79], [70, -106], [70, -66], [27, -72], [25, -34], [35, -182], [-3, -66], [16, -64], [-18, -35], [3, -92], [-24, -73], [-193, -161], [-22, -68], [-87, -68], [-32, -50], [-30, 28], [5, 93], [18, 47], [-54, 58]], [[669, 5458], [-19, -45], [-22, 34], [41, 11]], [[25476, 9365], [-1, -2], [-6, 6], [5, 0], [2, -4]], [[25606, 8637], [2, 5], [3, -4], [-3, -3], [-2, 2]], [[18762, 10208], [26, -55], [28, -13], [56, -80]]],
            "transform": {
                "scale": [0.011492036008427504, 0.00770630192628524],
                "translate": [-180, -55.51892459417436]
            },
            "objects": {
                "countries": {
                    "type": "GeometryCollection",
                    "geometries": [{
                        "arcs": [[0, 1]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Andorra", "NAME_NO": "Andorra"},
                        "id": "AD"
                    }, {
                        "arcs": [[2, 3, 4, 5]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "United Arab Emirates", "NAME_NO": "De forente arabiske emirater"},
                        "id": "AE"
                    }, {
                        "arcs": [[6, 7, 8, 9, 10, 11, 12]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Afghanistan", "NAME_NO": "Afghanistan"},
                        "id": "AF"
                    }, {
                        "arcs": [[13]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Antigua and Barbuda", "NAME_NO": "Antigua og Barbuda"},
                        "id": "AG"
                    }, {
                        "arcs": [[14]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Anguilla", "NAME_NO": "Anguilla"},
                        "id": "AI"
                    }, {
                        "arcs": [[15, 16, 17, 18, 19]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Albania", "NAME_NO": "Albania"},
                        "id": "AL"
                    }, {
                        "arcs": [[20, 21, 22, 23, 24]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Armenia", "NAME_NO": "Armenia"},
                        "id": "AM"
                    }, {
                        "arcs": [[[25, 26, 27, 28]], [[29, 30, 31]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Angola", "NAME_NO": "Angola"},
                        "id": "AO"
                    }, {
                        "arcs": [[[32, 33, 34, 35, 36, 37]], [[38, 39]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Argentina", "NAME_NO": "Argentina"},
                        "id": "AR"
                    }, {
                        "arcs": [[40]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "American Samoa", "NAME_NO": "American Samoa"},
                        "id": "AS"
                    }, {
                        "arcs": [[41, 42, 43, 44, 45, 46, 47, 48, 49]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Austria", "NAME_NO": "Østerrike"},
                        "id": "AT"
                    }, {
                        "arcs": [[50, 51, 52, 53]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Botswana", "NAME_NO": "Botswana"},
                        "id": "BW"
                    }, {
                        "arcs": [[54, -32, 55, 56, 57, 58]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Congo", "NAME_NO": "Kongo, Republikken"},
                        "id": "CG"
                    }, {
                        "arcs": [[-48, 59, -46, 60, 61, 62]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Switzerland", "NAME_NO": "Sveits"},
                        "id": "CH"
                    }, {
                        "arcs": [[63, 64, 65, 66, 67, 68]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Côte D’Ivoire", "NAME_NO": "Elfenbenskysten"},
                        "id": "CI"
                    }, {
                        "arcs": [[69]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cook Islands", "NAME_NO": "Cook Islands"},
                        "id": "CK"
                    }, {
                        "arcs": [[[70]], [[71]], [[72]], [[73]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Australia", "NAME_NO": "Australia"},
                        "id": "AU"
                    }, {
                        "arcs": [[74]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Aruba", "NAME_NO": "Aruba"},
                        "id": "AW"
                    }, {
                        "arcs": [[[75, 76, -21, 77, 78]], [[79, 80, -23]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Azerbaijan", "NAME_NO": "Aserbajdsjan"},
                        "id": "AZ"
                    }, {
                        "arcs": [[81, 82, 83, 84, 85]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bosnia and Herzegovina", "NAME_NO": "Bosnia-Hercegovina"},
                        "id": "BA"
                    }, {
                        "arcs": [[86]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Barbados", "NAME_NO": "Barbados"},
                        "id": "BB"
                    }, {
                        "arcs": [[87, 88, 89]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bangladesh", "NAME_NO": "Bangladesh"},
                        "id": "BD"
                    }, {
                        "arcs": [[90, 91, 92, 93, 94, 95, 96]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Belgium", "NAME_NO": "Belgia"},
                        "id": "BE"
                    }, {
                        "arcs": [[97, 98, 99, 100, -64, 101]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Burkina Faso", "NAME_NO": "Burkina Faso"},
                        "id": "BF"
                    }, {
                        "arcs": [[102, 103, 104, 105, 106, 107]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bulgaria", "NAME_NO": "Bulgaria"},
                        "id": "BG"
                    }, {
                        "arcs": [[108]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bahrain", "NAME_NO": "Bahrain"},
                        "id": "BH"
                    }, {
                        "arcs": [[109, 110, 111]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Burundi", "NAME_NO": "Burundi"},
                        "id": "BI"
                    }, {
                        "arcs": [[112, 113, 114, 115, 116]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Belarus", "NAME_NO": "Belarus"},
                        "id": "BY"
                    }, {
                        "arcs": [[117, 118, 119]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Belize", "NAME_NO": "Belize"},
                        "id": "BZ"
                    }, {
                        "arcs": [[120, 121, 122, -99, 123]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Benin", "NAME_NO": "Benin"},
                        "id": "BJ"
                    }, {
                        "arcs": [[124]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Saint Barthélemy", "NAME_NO": "Saint Barthélemy"},
                        "id": "BL"
                    }, {
                        "arcs": [[125]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bermuda", "NAME_NO": "Bermuda"},
                        "id": "BM"
                    }, {
                        "arcs": [[126, 127]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Brunei", "NAME_NO": "Brunei"},
                        "id": "BN"
                    }, {
                        "arcs": [[128, -38, 129, 130, 131]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bolivia", "NAME_NO": "Bolivia"},
                        "id": "BO"
                    }, {
                        "arcs": [[132]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Bonaire, Sint Eustatius and Saba",
                            "NAME_NO": "Bonaire, Sint Eustatius and Saba"
                        },
                        "id": "BQ"
                    }, {
                        "arcs": [[133, 134, 135]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bhutan", "NAME_NO": "Bhutan"},
                        "id": "BT"
                    }, {
                        "arcs": [[136]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bouvet Island", "NAME_NO": "Bouvet Island"},
                        "id": "BV"
                    }, {
                        "arcs": [[[137, 138, 139, 140, -34, 141, -132, 142, 143, 144, 145]], [[146]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Brazil", "NAME_NO": "Brasil"},
                        "id": "BR"
                    }, {
                        "arcs": [[147]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bahamas", "NAME_NO": "Bahamas"},
                        "id": "BS"
                    }, {
                        "arcs": [[[148, 149, 150, 151]], [[152]], [[153]], [[154]], [[155]], [[156]], [[157]], [[158]], [[159]], [[160]], [[161]], [[162]], [[163]], [[164]], [[165]], [[166]], [[167]], [[168]], [[169]], [[170]], [[171]], [[172]], [[173]], [[174]], [[175]], [[176]], [[177]], [[178]], [[179]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Canada", "NAME_NO": "Canada"},
                        "id": "CA"
                    }, {
                        "arcs": [[[-37, 180, 181, -130]], [[-39, 182]], [[183]], [[184]], [[185]], [[186]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Chile", "NAME_NO": "Chile"},
                        "id": "CL"
                    }, {
                        "arcs": [[187]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cocos (Keeling) Islands", "NAME_NO": "Cocos (Keeling) Islands"},
                        "id": "CC"
                    }, {
                        "arcs": [[188, 189, 190, -111, 191, 192, -29, 193, -30, -55, 194]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Democratic Republic of The Congo",
                            "NAME_NO": "Kongo, Den demokratiske republikken"
                        },
                        "id": "CD"
                    }, {
                        "arcs": [[195, 196, -195, -59, 197, 198]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Central African Republic",
                            "NAME_NO": "Den sentralafrikanske republikk"
                        },
                        "id": "CF"
                    }, {
                        "arcs": [[199, 200, 201, 202]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Finland", "NAME_NO": "Finland"},
                        "id": "FI"
                    }, {
                        "arcs": [[[203, 204, 205, 206, 207, 208, 209, 210, 211, 212, -136, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, -7, 223, 224, 225, 226, 227, 228]], [[229]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "China", "NAME_NO": "Kina"},
                        "id": "CN"
                    }, {
                        "arcs": [[230]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Taiwan", "NAME_NO": "Taiwan"},
                        "id": "TW"
                    }, {
                        "arcs": [[231, 232, 233, 234]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Djibouti", "NAME_NO": "Djibouti"},
                        "id": "DJ"
                    }, {
                        "arcs": [[235]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Dominica", "NAME_NO": "Dominica"},
                        "id": "DM"
                    }, {
                        "arcs": [[236, 237]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Dominican Republic", "NAME_NO": "Den dominikanske republikk"},
                        "id": "DO"
                    }, {
                        "arcs": [[238, -144, 239, 240, 241, 242, 243]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Colombia", "NAME_NO": "Colombia"},
                        "id": "CO"
                    }, {
                        "arcs": [[244]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Clipperton Island", "NAME_NO": "Clipperton Island"},
                        "id": "CP"
                    }, {
                        "arcs": [[245, 246, 247, 248]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Costa Rica", "NAME_NO": "Costa Rica"},
                        "id": "CR"
                    }, {
                        "arcs": [[[249]], [[250]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Cuba", "NAME_NO": "Cuba"},
                        "id": "CU"
                    }, {
                        "arcs": [[251]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cape Verde", "NAME_NO": "Kapp Verde"},
                        "id": "CV"
                    }, {
                        "arcs": [[252]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Curaçao", "NAME_NO": "Curaçao"},
                        "id": "CW"
                    }, {
                        "arcs": [[253]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Christmas Island", "NAME_NO": "Christmas Island"},
                        "id": "CX"
                    }, {
                        "arcs": [[254]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cyprus", "NAME_NO": "Kypros"},
                        "id": "CY"
                    }, {
                        "arcs": [[255, 256, -50, 257]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Czechia", "NAME_NO": "Tsjekkia"},
                        "id": "CZ"
                    }, {
                        "arcs": [[-198, -58, 258, 259, 260, 261, 262]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cameroon", "NAME_NO": "Kamerun"},
                        "id": "CM"
                    }, {
                        "arcs": [[263, 264, 265, 266, 267, -258, -49, -63, 268, 269, -91, 270, 271]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Germany", "NAME_NO": "Tyskland"},
                        "id": "DE"
                    }, {
                        "arcs": [[272, 273, 274, 275, 276, 277, 278, 279]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Algeria", "NAME_NO": "Algerie"},
                        "id": "DZ"
                    }, {
                        "arcs": [[[-264, 280]], [[281]], [[282]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Denmark", "NAME_NO": "Danmark"},
                        "id": "DK"
                    }, {
                        "arcs": [[[-93, 283, -269, -62, 284, 285, 286, 287, 288, -2, 289, 290]], [[-139, 291, 292]], [[293]], [[294]], [[295]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "France", "NAME_NO": "Frankrike"},
                        "id": "FR"
                    }, {
                        "arcs": [[[296]], [[297]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Fiji", "NAME_NO": "Fiji"},
                        "id": "FJ"
                    }, {
                        "arcs": [[[298]], [[299]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Falkland Islands", "NAME_NO": "Falkland Islands"},
                        "id": "FK"
                    }, {
                        "arcs": [[300, 301, -241]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Ecuador", "NAME_NO": "Ecuador"},
                        "id": "EC"
                    }, {
                        "arcs": [[[302, 303, 304]], [[305]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Estonia", "NAME_NO": "Estland"},
                        "id": "EE"
                    }, {
                        "arcs": [[306, 307, 308, 309, 310, 311, 312, 313]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Egypt", "NAME_NO": "Egypt"},
                        "id": "EG"
                    }, {
                        "arcs": [[314, 315, -278, 316]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Western Sahara", "NAME_NO": "Western Sahara"},
                        "id": "EH"
                    }, {
                        "arcs": [[-234, 317, 318, 319]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Eritrea", "NAME_NO": "Eritrea"},
                        "id": "ER"
                    }, {
                        "arcs": [[[320, -18, 321, -105, 322]], [[323]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Greece", "NAME_NO": "Hellas"},
                        "id": "GR"
                    }, {
                        "arcs": [[-233, 324, 325, 326, 327, -318]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Ethiopia", "NAME_NO": "Etiopia"},
                        "id": "ET"
                    }, {
                        "arcs": [[328]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Micronesia", "NAME_NO": "Mikronesiaføderasjonen"},
                        "id": "FM"
                    }, {
                        "arcs": [[329]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Faroes", "NAME_NO": "Faroes"},
                        "id": "FO"
                    }, {
                        "arcs": [[[-290, -1, -289, 330, 331, 332, 333]], [[334]], [[335]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Spain", "NAME_NO": "Spania"},
                        "id": "ES"
                    }, {
                        "arcs": [[[336, 337, -86, 338, 339]], [[-84, 340, 341]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Croatia", "NAME_NO": "Kroatia"},
                        "id": "HR"
                    }, {
                        "arcs": [[-237, 342]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Haiti", "NAME_NO": "Haiti"},
                        "id": "HT"
                    }, {
                        "arcs": [[343, 344, 345, -337, 346, -43, 347]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Hungary", "NAME_NO": "Ungarn"},
                        "id": "HU"
                    }, {
                        "arcs": [[[348]], [[349]], [[350]], [[351]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Greenland", "NAME_NO": "Greenland"},
                        "id": "GL"
                    }, {
                        "arcs": [[352, 353]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Gambia", "NAME_NO": "Gambia"},
                        "id": "GM"
                    }, {
                        "arcs": [[354, -68, 355, 356, 357, 358, 359]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Guinea", "NAME_NO": "Guinea"},
                        "id": "GN"
                    }, {
                        "arcs": [[[360, 361, -260]], [[362]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Equatorial Guinea", "NAME_NO": "Ekvatorial-Guinea"},
                        "id": "GQ"
                    }, {
                        "arcs": [[363]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "South Georgia and The South Sandwich Islands",
                            "NAME_NO": "South Georgia and The South Sandwich Islands"
                        },
                        "id": "GS"
                    }, {
                        "arcs": [[364, 365, 366, 367, 368, -118]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Guatemala", "NAME_NO": "Guatemala"},
                        "id": "GT"
                    }, {
                        "arcs": [[369]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Guam", "NAME_NO": "Guam"},
                        "id": "GU"
                    }, {
                        "arcs": [[370, 371, -359]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Guinea-Bissau", "NAME_NO": "Guinea-Bissau"},
                        "id": "GW"
                    }, {
                        "arcs": [[-57, 372, -361, -259]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Gabon", "NAME_NO": "Gabon"},
                        "id": "GA"
                    }, {
                        "arcs": [[373]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Grenada", "NAME_NO": "Grenada"},
                        "id": "GD"
                    }, {
                        "arcs": [[-78, -25, 374, 375, 376]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Georgia", "NAME_NO": "Georgia"},
                        "id": "GE"
                    }, {
                        "arcs": [[377]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Guernsey", "NAME_NO": "Guernsey"},
                        "id": "GG"
                    }, {
                        "arcs": [[378, 379, -65, -101]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Ghana", "NAME_NO": "Ghana"},
                        "id": "GH"
                    }, {
                        "arcs": [[380]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Gibraltar", "NAME_NO": "Gibraltar"},
                        "id": "GI"
                    }, {
                        "arcs": [[381, -146, 382, 383]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Guyana", "NAME_NO": "Guyana"},
                        "id": "GY"
                    }, {
                        "arcs": [[-206, 384]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Hong Kong", "NAME_NO": "Hong Kong"},
                        "id": "HK"
                    }, {
                        "arcs": [[385]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Heard Island and Mcdonald Islands",
                            "NAME_NO": "Heard Island and Mcdonald Islands"
                        },
                        "id": "HM"
                    }, {
                        "arcs": [[386, 387, 388, -366, 389]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Honduras", "NAME_NO": "Honduras"},
                        "id": "HN"
                    }, {
                        "arcs": [[[390]], [[391]], [[392]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Japan", "NAME_NO": "Japan"},
                        "id": "JP"
                    }, {
                        "arcs": [[-225, 393, 394, 395]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Kyrgyzstan", "NAME_NO": "Kirgisistan"},
                        "id": "KG"
                    }, {
                        "arcs": [[396, 397, 398, 399]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cambodia", "NAME_NO": "Kambodsja"},
                        "id": "KH"
                    }, {
                        "arcs": [[400]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Kiribati", "NAME_NO": "Kiribati"},
                        "id": "KI"
                    }, {
                        "arcs": [[401]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Comoros", "NAME_NO": "Komorene"},
                        "id": "KM"
                    }, {
                        "arcs": [[402]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Saint Kitts and Nevis", "NAME_NO": "Saint Kitts og Nevis"},
                        "id": "KN"
                    }, {
                        "arcs": [[403, 404, 405, 406, -204]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "North Korea", "NAME_NO": "Nord-Korea"},
                        "id": "KP"
                    }, {
                        "arcs": [[407, 408, 409]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Kuwait", "NAME_NO": "Kuwait"},
                        "id": "KW"
                    }, {
                        "arcs": [[410]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Cayman Islands", "NAME_NO": "Cayman Islands"},
                        "id": "KY"
                    }, {
                        "arcs": [[411, -215]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Nepal", "NAME_NO": "Nepal"},
                        "id": "NP"
                    }, {
                        "arcs": [[412]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Nauru", "NAME_NO": "Nauru"},
                        "id": "NR"
                    }, {
                        "arcs": [[413]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Niue", "NAME_NO": "Niue"},
                        "id": "NU"
                    }, {
                        "arcs": [[[414, 415, -285, -61, -45], [416], [417]], [[418]], [[419]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Italy", "NAME_NO": "Italia"},
                        "id": "IT"
                    }, {
                        "arcs": [[420]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Saint Lucia", "NAME_NO": "Saint Lucia"},
                        "id": "LC"
                    }, {
                        "arcs": [[-60, -47]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Liechtenstein", "NAME_NO": "Liechtenstein"},
                        "id": "LI"
                    }, {
                        "arcs": [[421, 422, 423, 424, -317, -277, 425]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Mauritania", "NAME_NO": "Mauritania"},
                        "id": "MR"
                    }, {
                        "arcs": [[426, -406]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "South Korea", "NAME_NO": "Sør-Korea"},
                        "id": "KR"
                    }, {
                        "arcs": [[427, -400, 428, 429, -211]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Laos", "NAME_NO": "Laos"},
                        "id": "LA"
                    }, {
                        "arcs": [[430]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Montserrat", "NAME_NO": "Montserrat"},
                        "id": "MS"
                    }, {
                        "arcs": [[[431, 432]], [[433]], [[434, 435]], [[436]], [[437]], [[438]], [[439]], [[440]], [[441]], [[442, 443]], [[444]], [[445]], [[446]], [[447]], [[448]], [[449]], [[450]], [[451]], [[452]], [[453]], [[454]], [[455]], [[456]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Indonesia", "NAME_NO": "Indonesia"},
                        "id": "ID"
                    }, {
                        "arcs": [[457, 458]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Ireland", "NAME_NO": "Irland"},
                        "id": "IE"
                    }, {
                        "arcs": [[459, 460, 461, 462, 463, -308, 464, 465, 466]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Israel", "NAME_NO": "Israel"},
                        "id": "IL"
                    }, {
                        "arcs": [[467]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Isle of Man", "NAME_NO": "Isle of Man"},
                        "id": "IM"
                    }, {
                        "arcs": [[468]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "British Indian Ocean Territory",
                            "NAME_NO": "British Indian Ocean Territory"
                        },
                        "id": "IO"
                    }, {
                        "arcs": [[[-222, 469, -220, 470, -218, 471, -216, -412, -214, -135, 472, 473, -90, 474, 475, 476]], [[477, 478]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "India", "NAME_NO": "India"},
                        "id": "IN"
                    }, {
                        "arcs": [[479, 480, -409, 481, 482, 483, 484]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Iraq", "NAME_NO": "Irak"},
                        "id": "IQ"
                    }, {
                        "arcs": [[485]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Iceland", "NAME_NO": "Island"},
                        "id": "IS"
                    }, {
                        "arcs": [[486]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Jersey", "NAME_NO": "Jersey"},
                        "id": "JE"
                    }, {
                        "arcs": [[487]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Jamaica", "NAME_NO": "Jamaica"},
                        "id": "JM"
                    }, {
                        "arcs": [[488, 489, -463, 490, -461, 491, -483]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Jordan", "NAME_NO": "Jordan"},
                        "id": "JO"
                    }, {
                        "arcs": [[-22, -77, 492, 493, -10, 494, 495, -480, 496, -80]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Iran", "NAME_NO": "Iran"},
                        "id": "IR"
                    }, {
                        "arcs": [[497, 498, 499, 500, 501, 502, 503, -326]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Kenya", "NAME_NO": "Kenya"},
                        "id": "KE"
                    }, {
                        "arcs": [[504, 505, 506, -4]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Oman", "NAME_NO": "Oman"},
                        "id": "OM"
                    }, {
                        "arcs": [[-467, 507, 508]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Lebanon", "NAME_NO": "Libanon"},
                        "id": "LB"
                    }, {
                        "arcs": [[509]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Lesotho", "NAME_NO": "Lesotho"},
                        "id": "LS"
                    }, {
                        "arcs": [[-115, 510, 511, 512, 513]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Lithuania", "NAME_NO": "Litauen"},
                        "id": "LT"
                    }, {
                        "arcs": [[-270, -284, -92]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Luxembourg", "NAME_NO": "Luxembourg"},
                        "id": "LU"
                    }, {
                        "arcs": [[514, -116, -514, 515, -304]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Latvia", "NAME_NO": "Latvia"},
                        "id": "LV"
                    }, {
                        "arcs": [[-313, 516, 517, 518, -274, 519, 520]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Libya", "NAME_NO": "Libya"},
                        "id": "LY"
                    }, {
                        "arcs": [[521, -279, -316, 522]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Morocco", "NAME_NO": "Marokko"},
                        "id": "MA"
                    }, {
                        "arcs": [[523, -287]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Monaco", "NAME_NO": "Monaco"},
                        "id": "MC"
                    }, {
                        "arcs": [[524, -102, -69, -355, 525, -426, -276]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Mali", "NAME_NO": "Mali"},
                        "id": "ML"
                    }, {
                        "arcs": [[-228, 526]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Mongolia", "NAME_NO": "Mongolia"},
                        "id": "MN"
                    }, {
                        "arcs": [[-208, 527]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Macau", "NAME_NO": "Macau"},
                        "id": "MO"
                    }, {
                        "arcs": [[528]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Northern Mariana Islands", "NAME_NO": "Northern Mariana Islands"},
                        "id": "MP"
                    }, {
                        "arcs": [[529, 530, -124, -98, -525, -275, -519]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Niger", "NAME_NO": "Niger"},
                        "id": "NE"
                    }, {
                        "arcs": [[531, 532]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Moldova", "NAME_NO": "Moldova"},
                        "id": "MD"
                    }, {
                        "arcs": [[-20, 533, -341, -83, 534]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Montenegro", "NAME_NO": "Montenegro"},
                        "id": "ME"
                    }, {
                        "arcs": [[535]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Madagascar", "NAME_NO": "Madagaskar"},
                        "id": "MG"
                    }, {
                        "arcs": [[536]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Marshall Islands", "NAME_NO": "Marshalløyene"},
                        "id": "MH"
                    }, {
                        "arcs": [[-106, -322, -17, 537]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "North Macedonia", "NAME_NO": "Nord-Makedonia, Republikken"},
                        "id": "MK"
                    }, {
                        "arcs": [[538]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Malta", "NAME_NO": "Malta"},
                        "id": "MT"
                    }, {
                        "arcs": [[539]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Mauritius", "NAME_NO": "Mauritius"},
                        "id": "MU"
                    }, {
                        "arcs": [[540]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Maldives", "NAME_NO": "Maldivene"},
                        "id": "MV"
                    }, {
                        "arcs": [[-226, -396, 541, 542, 543, 544]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Kazakhstan", "NAME_NO": "Kasakhstan"},
                        "id": "KZ"
                    }, {
                        "arcs": [[545, 546, 547]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Malawi", "NAME_NO": "Malawi"},
                        "id": "MW"
                    }, {
                        "arcs": [[-430, 548, 549, -88, -474, 550, -212]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Myanmar/Burma", "NAME_NO": "Myanmar"},
                        "id": "MM"
                    }, {
                        "arcs": [[551, -203, 552, 553]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Norway", "NAME_NO": "Norge"},
                        "id": "NO"
                    }, {
                        "arcs": [[-243, 554, -247, 555]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Panama", "NAME_NO": "Panama"},
                        "id": "PA"
                    }, {
                        "arcs": [[556]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Sri Lanka", "NAME_NO": "Sri Lanka"},
                        "id": "LK"
                    }, {
                        "arcs": [[-67, 557, 558, -356]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Liberia", "NAME_NO": "Liberia"},
                        "id": "LR"
                    }, {
                        "arcs": [[559, -262, 560, -121, -531]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Nigeria", "NAME_NO": "Nigeria"},
                        "id": "NG"
                    }, {
                        "arcs": [[561, -249, 562, -387]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Nicaragua", "NAME_NO": "Nicaragua"},
                        "id": "NI"
                    }, {
                        "arcs": [[[-271, -97, 563]], [[-95, 564]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Netherlands", "NAME_NO": "Nederland"},
                        "id": "NL"
                    }, {
                        "arcs": [[[-435, 565]], [[566]], [[567]], [[568]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Papua New Guinea", "NAME_NO": "Papua Ny-Guinea"},
                        "id": "PG"
                    }, {
                        "arcs": [[569, -333]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Portugal", "NAME_NO": "Portugal"},
                        "id": "PT"
                    }, {
                        "arcs": [[570]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Palau", "NAME_NO": "Palau"},
                        "id": "PW"
                    }, {
                        "arcs": [[-142, -33, -129]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Paraguay", "NAME_NO": "Paraguay"},
                        "id": "PY"
                    }, {
                        "arcs": [[571, 572]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Qatar", "NAME_NO": "Qatar"},
                        "id": "QA"
                    }, {
                        "arcs": [[573, 574, -108, 575, -345, 576, -532]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Romania", "NAME_NO": "Romania"},
                        "id": "RO"
                    }, {
                        "arcs": [[[577]], [[578]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "New Zealand", "NAME_NO": "New Zealand"},
                        "id": "NZ"
                    }, {
                        "arcs": [[-143, -131, -182, 579, -301, -240]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Peru", "NAME_NO": "Peru"},
                        "id": "PE"
                    }, {
                        "arcs": [[580]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "French Polynesia", "NAME_NO": "French Polynesia"},
                        "id": "PF"
                    }, {
                        "arcs": [[581]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Norfolk Island", "NAME_NO": "Norfolk Island"},
                        "id": "NF"
                    }, {
                        "arcs": [[582, -119, -369, 583, 584]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Mexico", "NAME_NO": "Mexico"},
                        "id": "MX"
                    }, {
                        "arcs": [[[585, -433, 586, -128, 587]], [[588, 589]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Malaysia", "NAME_NO": "Malaysia"},
                        "id": "MY"
                    }, {
                        "arcs": [[590, 591, 592, 593, 594, -546, 595, 596]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Mozambique", "NAME_NO": "Mosambik"},
                        "id": "MZ"
                    }, {
                        "arcs": [[597, -54, 598, 599, -27]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Namibia", "NAME_NO": "Namibia"},
                        "id": "NA"
                    }, {
                        "arcs": [[600]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "New Caledonia", "NAME_NO": "New Caledonia"},
                        "id": "NC"
                    }, {
                        "arcs": [[-576, -107, -538, -16, -535, -82, -338, -346]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Serbia", "NAME_NO": "Serbia"},
                        "id": "RS"
                    }, {
                        "arcs": [[[601]], [[602]], [[603]], [[604]], [[605]], [[606]], [[607]], [[608]], [[609]], [[610]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Philippines", "NAME_NO": "Filippinene"},
                        "id": "PH"
                    }, {
                        "arcs": [[-476, 611, -479, 612, -495, -9, 613]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Pakistan", "NAME_NO": "Pakistan"},
                        "id": "PK"
                    }, {
                        "arcs": [[614, -511, -114, 615, 616, -256, -268, 617, -266, 618]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Poland", "NAME_NO": "Polen"},
                        "id": "PL"
                    }, {
                        "arcs": [[619]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Saint Pierre and Miquelon",
                            "NAME_NO": "Saint Pierre and Miquelon"
                        },
                        "id": "PM"
                    }, {
                        "arcs": [[620]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Pitcairn Islands", "NAME_NO": "Pitcairn Islands"},
                        "id": "PN"
                    }, {
                        "arcs": [[621]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Puerto Rico", "NAME_NO": "Puerto Rico"},
                        "id": "PR"
                    }, {
                        "arcs": [[[-491, -462]], [[-307, 622, -465]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Palestine", "NAME_NO": "Palestine"},
                        "id": "PS"
                    }, {
                        "arcs": [[-429, -399, 623, -590, 624, -549]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Thailand", "NAME_NO": "Thailand"},
                        "id": "TH"
                    }, {
                        "arcs": [[-394, -224, -13, 625]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Tajikistan", "NAME_NO": "Tadsjikistan"},
                        "id": "TJ"
                    }, {
                        "arcs": [[626]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Tokelau", "NAME_NO": "Tokelau"},
                        "id": "TK"
                    }, {
                        "arcs": [[-444, 627]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Timor-Leste", "NAME_NO": "Øst-Timor"},
                        "id": "TL"
                    }, {
                        "arcs": [[[-404, -229, -527, -227, -545, 628, -79, -377, 629, 630, -117, -515, -303, 631, -200, -552, 632]], [[633]], [[634]], [[635]], [[636]], [[637]], [[638]], [[639]], [[640]], [[-615, 641, -512]], [[642]], [[643]], [[644]], [[645]], [[646]], [[647]], [[648]], [[649]], [[650]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Russian Federation", "NAME_NO": "Russland"},
                        "id": "RU"
                    }, {
                        "arcs": [[-112, -191, 651, 652]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Rwanda", "NAME_NO": "Rwanda"},
                        "id": "RW"
                    }, {
                        "arcs": [[-408, 653, -572, 654, -5, -507, 655, 656, -489, -482]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Saudi Arabia", "NAME_NO": "Saudi-Arabia"},
                        "id": "SA"
                    }, {
                        "arcs": [[657]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "French Southern and Antarctic Lands",
                            "NAME_NO": "French Southern and Antarctic Lands"
                        },
                        "id": "TF"
                    }, {
                        "arcs": [[-123, 658, -379, -100]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Togo", "NAME_NO": "Togo"},
                        "id": "TG"
                    }, {
                        "arcs": [[[-375, -24, -81, -497, -485, 659, 660]], [[661, -323, -104]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Turkey", "NAME_NO": "Tyrkia"},
                        "id": "TR"
                    }, {
                        "arcs": [[-500, 662, -596, -548, 663, -192, -110, -653, 664]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "United Republic of Tanzania", "NAME_NO": "Tanzania"},
                        "id": "TZ"
                    }, {
                        "arcs": [[-11, -494, 665, -543, 666]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Turkmenistan", "NAME_NO": "Turkmenistan"},
                        "id": "TM"
                    }, {
                        "arcs": [[-520, -273, 667]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Tunisia", "NAME_NO": "Tunisia"},
                        "id": "TN"
                    }, {
                        "arcs": [[668]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Tonga", "NAME_NO": "Tonga"},
                        "id": "TO"
                    }, {
                        "arcs": [[-498, -325, -232, 669]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Somalia", "NAME_NO": "Somalia"},
                        "id": "SO"
                    }, {
                        "arcs": [[-292, -138, -382, 670]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Suriname", "NAME_NO": "Surinam"},
                        "id": "SR"
                    }, {
                        "arcs": [[[671]], [[672]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Svalbard and Jan Mayen", "NAME_NO": "Svalbard and Jan Mayen"},
                        "id": "SJ"
                    }, {
                        "arcs": [[-327, -504, 673, -502, 674, -189, -197, 675, 676, 677]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "South Sudan", "NAME_NO": "Sør-Sudan"},
                        "id": "SS"
                    }, {
                        "arcs": [[678]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "São Tomé and Príncipe", "NAME_NO": "São Tomé og Príncipe"},
                        "id": "ST"
                    }, {
                        "arcs": [[679, -367, -389]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "El Salvador", "NAME_NO": "El Salvador"},
                        "id": "SV"
                    }, {
                        "arcs": [[680]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Sint-Maarten", "NAME_NO": "Sint-Maarten"},
                        "id": "SX"
                    }, {
                        "arcs": [[-484, -492, -460, -509, 681, -660]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Syria", "NAME_NO": "Syria"},
                        "id": "SY"
                    }, {
                        "arcs": [[-592, 682]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Eswatini", "NAME_NO": "Eswatini"},
                        "id": "SZ"
                    }, {
                        "arcs": [[683]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Turks and Caicos Islands", "NAME_NO": "Turks and Caicos Islands"},
                        "id": "TC"
                    }, {
                        "arcs": [[684, -199, -263, -560, -530, -518]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Chad", "NAME_NO": "Tsjad"},
                        "id": "TD"
                    }, {
                        "arcs": [[685]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Seychelles", "NAME_NO": "Seychellene"},
                        "id": "SC"
                    }, {
                        "arcs": [[[686]], [[687]], [[688]], [[689]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Solomon Islands", "NAME_NO": "Salomonøyene"},
                        "id": "SB"
                    }, {
                        "arcs": [[690, 691, 692, -319, -328, -678, 693, -676, -196, -685, -517, -312]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Sudan", "NAME_NO": "Sudan"},
                        "id": "SD"
                    }, {
                        "arcs": [[[694, -553, -202]], [[695]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "Sweden", "NAME_NO": "Sverige"},
                        "id": "SE"
                    }, {
                        "arcs": [[696]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Singapore", "NAME_NO": "Singapore"},
                        "id": "SG"
                    }, {
                        "arcs": [[697]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Saint Helena, Ascension and Tristan Da Cunha",
                            "NAME_NO": "Saint Helena, Ascension and Tristan Da Cunha"
                        },
                        "id": "SH"
                    }, {
                        "arcs": [[-340, 698, -415, -44, -347]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Slovenia", "NAME_NO": "Slovenia"},
                        "id": "SI"
                    }, {
                        "arcs": [[699, -348, -42, -257, -617]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Slovakia", "NAME_NO": "Slovakia"},
                        "id": "SK"
                    }, {
                        "arcs": [[-559, 700, -357]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Sierra Leone", "NAME_NO": "Sierra Leone"},
                        "id": "SL"
                    }, {
                        "arcs": [[-417]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "San Marino", "NAME_NO": "San Marino"},
                        "id": "SM"
                    }, {
                        "arcs": [[-526, -360, -372, 701, -354, 702, -424, 703, -422]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Senegal", "NAME_NO": "Senegal"},
                        "id": "SN"
                    }, {
                        "arcs": [[704]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Trinidad and Tobago", "NAME_NO": "Trinidad og Tobago"},
                        "id": "TT"
                    }, {
                        "arcs": [[705]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Tuvalu", "NAME_NO": "Tuvalu"},
                        "id": "TV"
                    }, {
                        "arcs": [[-311, -691]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Bir Tawil (Disputed Territory)",
                            "NAME_NO": "Bir Tawil (Disputed Territory)"
                        },
                        "id": "XV"
                    }, {
                        "arcs": [[706, -656, -506]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Yemen", "NAME_NO": "Jemen"},
                        "id": "YE"
                    }, {
                        "arcs": [[-593, -683, -591, 707, -599, -53, 708], [-510]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "South Africa", "NAME_NO": "Sør-Afrika"},
                        "id": "ZA"
                    }, {
                        "arcs": [[-547, -595, 709, -51, -598, -26, -193, -664]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Zambia", "NAME_NO": "Zambia"},
                        "id": "ZM"
                    }, {
                        "arcs": [[-594, -709, -52, -710]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Zimbabwe", "NAME_NO": "Zimbabwe"},
                        "id": "ZW"
                    }, {
                        "arcs": [[710, -574, -533, -577, -344, -700, -616, -113, -631]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Ukraine", "NAME_NO": "Ukraina"},
                        "id": "UA"
                    }, {
                        "arcs": [[-665, -652, -190, -675, -501]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Uganda", "NAME_NO": "Uganda"},
                        "id": "UG"
                    }, {
                        "arcs": [[[711]], [[-458, 712]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "United Kingdom", "NAME_NO": "United Kingdom"},
                        "id": "GB"
                    }, {
                        "arcs": [[713]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "United States Minor Outlying Islands",
                            "NAME_NO": "United States Minor Outlying Islands"
                        },
                        "id": "UM"
                    }, {
                        "arcs": [[714]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Kuril Islands", "NAME_NO": "Kuril Islands"},
                        "id": "XI"
                    }, {
                        "arcs": [[715]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Navassa Island", "NAME_NO": "Navassa Island"},
                        "id": "XL"
                    }, {
                        "arcs": [[716]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Scarborough Reef", "NAME_NO": "Scarborough Reef"},
                        "id": "XM"
                    }, {
                        "arcs": [[717]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Senkaku Islands", "NAME_NO": "Senkaku Islands"},
                        "id": "XN"
                    }, {
                        "arcs": [[718]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Bassas Da India", "NAME_NO": "Bassas Da India"},
                        "id": "XO"
                    }, {
                        "arcs": [[-677, -694]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Abyei", "NAME_NO": "Abyei"},
                        "id": "XU"
                    }, {
                        "arcs": [[[719, -585, 720, -149]], [[-151, 721]], [[722]], [[723]], [[724]], [[725]], [[726]], [[727]], [[728]], [[729]], [[730]]],
                        "type": "MultiPolygon",
                        "properties": {"NAME_ENGL": "United States", "NAME_NO": "USA"},
                        "id": "US"
                    }, {
                        "arcs": [[731, -35, -141]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Uruguay", "NAME_NO": "Uruguay"},
                        "id": "UY"
                    }, {
                        "arcs": [[-395, -626, -12, -667, -542]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Uzbekistan", "NAME_NO": "Usbekistan"},
                        "id": "UZ"
                    }, {
                        "arcs": [[-418]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Vatican City", "NAME_NO": "Vatican City"},
                        "id": "VA"
                    }, {
                        "arcs": [[732]],
                        "type": "Polygon",
                        "properties": {
                            "NAME_ENGL": "Saint Vincent and The Grenadines",
                            "NAME_NO": "Saint Vincent og Grenadinene"
                        },
                        "id": "VC"
                    }, {
                        "arcs": [[-383, -145, -239, 733]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Venezuela", "NAME_NO": "Venezuela"},
                        "id": "VE"
                    }, {
                        "arcs": [[734]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "British Virgin Islands", "NAME_NO": "British Virgin Islands"},
                        "id": "VG"
                    }, {
                        "arcs": [[735]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Us Virgin Islands", "NAME_NO": "Us Virgin Islands"},
                        "id": "VI"
                    }, {
                        "arcs": [[736]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Vanuatu", "NAME_NO": "Vanuatu"},
                        "id": "VU"
                    }, {
                        "arcs": [[737]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Wallis and Futuna", "NAME_NO": "Wallis and Futuna"},
                        "id": "WF"
                    }, {
                        "arcs": [[738, -397, -428, -210]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Vietnam", "NAME_NO": "Vietnam"},
                        "id": "VN"
                    }, {
                        "arcs": [[739]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Samoa", "NAME_NO": "Samoa"},
                        "id": "WS"
                    }, {
                        "arcs": [[740]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Paracel Islands", "NAME_NO": "Paracel Islands"},
                        "id": "XA"
                    }, {
                        "arcs": [[741]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Spratly Islands", "NAME_NO": "Spratly Islands"},
                        "id": "XB"
                    }, {
                        "arcs": [[-551, -473, -134, -213]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Arunachal Pradesh", "NAME_NO": "Arunachal Pradesh"},
                        "id": "XD"
                    }, {
                        "arcs": [[-692, -310, 742]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Hala'Ib Triangle", "NAME_NO": "Hala'Ib Triangle"},
                        "id": "XF"
                    }, {
                        "arcs": [[-503, -674]],
                        "type": "Polygon",
                        "properties": {"NAME_ENGL": "Ilemi Triangle", "NAME_NO": "Ilemi Triangle"},
                        "id": "XG"
                    }]
                }
            }
        }
    };

    function pug_attr(t, e, n, r) {
        if (!1 === e || null == e || !e && ("class" === t || "style" === t)) return "";
        if (!0 === e) return " " + (r ? t : t + '="' + t + '"');
        var f = _typeof(e);
        return "object" !== f && "function" !== f || "function" != typeof e.toJSON || (e = e.toJSON()), "string" == typeof e || (e = JSON.stringify(e), n || -1 === e.indexOf('"')) ? (n && (e = pug_escape(e)), " " + t + '="' + e + '"') : " " + t + "='" + e.replace(/'/g, "&#39;") + "'";
    }
    function pug_classes(s, r) {
        return Array.isArray(s) ? pug_classes_array(s, r) : s && "object" == _typeof(s) ? pug_classes_object(s) : s || "";
    }
    function pug_classes_array(r, a) {
        for (var s, e = "", u = "", c = Array.isArray(a), g = 0; g < r.length; g++) (s = pug_classes(r[g])) && (c && a[g] && (s = pug_escape(s)), e = e + u + s, u = " ");
        return e;
    }
    function pug_classes_object(r) {
        var a = "",
            n = "";
        for (var o in r) o && r[o] && pug_has_own_property.call(r, o) && (a = a + n + o, n = " ");
        return a;
    }
    function pug_escape(e) {
        var a = "" + e,
            t = pug_match_html.exec(a);
        if (!t) return e;
        var r,
            c,
            n,
            s = "";
        for (r = t.index, c = 0; r < a.length; r++) {
            switch (a.charCodeAt(r)) {
                case 34:
                    n = "&quot;";
                    break;
                case 38:
                    n = "&amp;";
                    break;
                case 60:
                    n = "&lt;";
                    break;
                case 62:
                    n = "&gt;";
                    break;
                default:
                    continue;
            }
            c !== r && (s += a.substring(c, r)), c = r + 1, s += n;
        }
        return c !== r ? s + a.substring(c, r) : s;
    }
    var pug_has_own_property = Object.prototype.hasOwnProperty;
    var pug_match_html = /["&<>]/;
    function pug_rethrow(n, e, r, t) {
        if (!(n instanceof Error)) throw n;
        if (!("undefined" == typeof window && e || t)) throw n.message += " on line " + r, n;
        try {
            t = t || require("fs").readFileSync(e, "utf8");
        } catch (e) {
            pug_rethrow(n, null, r);
        }
        var i = 3,
            a = t.split("\n"),
            o = Math.max(r - i, 0),
            h = Math.min(a.length, r + i),
            i = a.slice(o, h).map(function (n, e) {
                var t = e + o + 1;
                return (t == r ? "  > " : "    ") + t + "| " + n;
            }).join("\n");
        throw n.path = e, n.message = (e || "Pug") + ":" + r + "\n" + i + "\n\n" + n.message, n;
    }
    function numericTemplate (locals, jade) {
        var pug_html = "",
            pug_mixins = {},
            _pug_interp;
        var pug_debug_filename, pug_debug_line;
        try {
            var locals_for_with = locals || {};
            (function (Object, convertedDefaultDisplayedGraph, data, document, firstTabValue, navigator, tabsList, test) {
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/variables/pug/icons.pug";
                var shareIcon = '<svg aria-hidden="true" viewBox="0 0 24 24" width="24" height="24" class="metrics-icon share-icon"><path d="M14.7 14.7a2 2 0 0 0-1.3.5l-4.8-2.7a2 2 0 0 0 0-1l4.7-2.7c.4.3.9.5 1.4.5a2 2 0 1 0-2-1.5l-4.6 2.7a2 2 0 1 0 0 3l4.7 2.7v.5a2 2 0 1 0 1.9-2zM12 1C5.8 1 .7 6 .7 12s5 11 11.3 11c6.2 0 11.3-5 11.3-11S18.3 1 12 1zm0 1c5.7 0 10.3 4.5 10.3 10S17.7 22 12 22C6.3 22 1.7 17.5 1.7 12S6.3 2 12 2z"/></svg>',
                    downloadIcon = '<svg aria-hidden="true" viewBox="0 0 24 24" width="24" height="24" class="metrics-icon download-icon"><path d="M7 7.3c-.6 0-1.1.5-1.1 1.2v7c0 .6.5 1.2 1.1 1.2h9.4c.6 0 1.1-.6 1.1-1.2V9.7c0-.7-.5-1.2-1.1-1.2h-4.7l-1.2-1.2zm3.5 3H13v2.3h1.7l-3 2.9-2.8-3h1.7zM12 1C5.8 1 .7 6 .7 12s5 11 11.3 11c6.2 0 11.3-5 11.3-11S18.3 1 12 1zm0 1c5.7 0 10.3 4.5 10.3 10S17.7 22 12 22C6.3 22 1.7 17.5 1.7 12S6.3 2 12 2z"/></svg>',
                    icons = {
                        download: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--download"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                        downloads: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--downloads"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                        citation: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citation"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                        citations: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citations"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                        views: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--views"><path d="M7 2.27a7.56 7.56 0 00-7 4.76 7.56 7.56 0 0014 0 7.56 7.56 0 00-7-4.76zm0 7.93a3.17 3.17 0 110-6.35 3.17 3.17 0 010 6.35zm0-5.04A1.87 1.87 0 107 8.9a1.87 1.87 0 000-3.73z"/></svg>',
                        facebook: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--facebook"><path d="M.84 0a.8.8 0 00-.8.8v12.4c0 .44.36.8.8.8h6.78V8.61H5.68v-2.1h1.76v-1.6c0-1.75 1.14-2.89 2.82-2.89l1.58.1v1.93H10.7c-.88 0-.97.35-.97.96v1.41h2.1l-.43 2.11H9.64V14h3.52a.8.8 0 00.8-.8V.8a.8.8 0 00-.8-.8z"/></svg>',
                        twitter: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--twitter""><path d="M12.28 4.57v.35a10.3 10.3 0 01-2 5.67 6.2 6.2 0 01-2.45 2c-1.05.62-2.1.7-3.32.7A6.98 6.98 0 01.5 12.08h.7c1.22 0 2.35-.52 3.4-1.4a2.62 2.62 0 01-2.53-2h.52c.27 0 .53 0 .7-.17-.7 0-1.22-.35-1.66-.88a3.07 3.07 0 01-.6-1.83c.34.18.78.26 1.21.26A2.97 2.97 0 01.94 3.7c0-.61.08-1.05.35-1.49.7.88 1.48 1.66 2.53 2.19a6.1 6.1 0 003.14.87v-.7c0-.87.26-1.48.78-2.1.53-.52 1.05-.87 1.75-.87s1.4.35 1.92.88c.7-.1 1.13-.35 1.74-.7a2.62 2.62 0 01-1.22 1.74l1.57-.43a5.34 5.34 0 01-1.3 1.48z"/></svg>',
                        stackexchange: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--stackexchange"><path d="M1.8 9.4h10.4v.6c0 1-.7 1.7-1.6 1.7H10L7.9 14v-2.3H3.4c-.9 0-1.6-.7-1.6-1.7zm0-.6h10.4V6.7H1.8zm0-2.7h10.4V3.9H1.8zM10.6 1H3.4c-.9 0-1.6.8-1.6 1.7v.6h10.4v-.6c0-1-.7-1.7-1.6-1.7z"/></svg>',
                        blog: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--blog"><path d="M11.8 1.4H2.2c-.7 0-1.2.5-1.2 1.1v10.9L3.4 11h8.4c.7 0 1.2-.5 1.2-1.3V2.5c0-.6-.5-1.1-1.2-1.1zm-1.2 7.2H3.4V7.4h7.2zm0-1.8H3.4V5.5h7.2zm0-1.8H3.4V3.7h7.2z"/></svg>',
                        default: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--default"><path d="M2.3 3.5h10.5V2.3H2.3c-.6 0-1.1.6-1.1 1.2v6.4H0v1.8h8.2V9.9H2.3zm11.1 1.2H10c-.3 0-.6.2-.6.5v5.9c0 .3.3.6.6.6h3.5c.3 0 .6-.3.6-.6V5.3c0-.4-.3-.6-.6-.6zm-.6 5.2h-2.3V6h2.3z"/></svg>',
                        newsfeed: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--newsfeed"><path d="M9.8 0H2.2C1.5 0 1 .6 1 1.3v8.9h1.2v-9h7.6zm2 2.6h-7c-.8 0-1.3.5-1.3 1.2v9c0 .7.5 1.2 1.3 1.2h7c.7 0 1.2-.6 1.2-1.3V3.8c0-.7-.5-1.2-1.3-1.2zm0 10.1h-7V3.8h7z"/></svg>',
                        wikipedia: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wikipedia"><path d="M7 0a7 7 0 100 14A7 7 0 007 0zm4.9 4.2H9.8c-.3-.8-.5-1.7-1-2.5 1.3.4 2.4 1.3 3 2.5zM7 1.4c.6.9 1 1.7 1.3 2.8H5.7c.3-1 .7-2 1.3-2.8zm-5.5 7a5.7 5.7 0 010-2.8H4a11.6 11.6 0 000 2.8zm.6 1.4h2.1c.3.8.5 1.7 1 2.5a5.7 5.7 0 01-3-2.5zm2.1-5.6h-2a5.6 5.6 0 013-2.5c-.5.8-.7 1.7-1 2.5zM7 12.7c-.6-.9-1-1.9-1.3-3h2.6c-.3 1.1-.8 2-1.3 2.9zm1.7-4.3H5.3a9.8 9.8 0 010-2.8h3.4a9.8 9.8 0 010 2.8zm.2 4l.9-2.6h2a5.6 5.6 0 01-3 2.5zm1.1-4a11.6 11.6 0 000-2.8h2.4a5.7 5.7 0 010 2.8z"/></svg>',
                        wordpressdotcom: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wordpressdotcom"><path d="M1 7c0 2.4 1.3 4.5 3.4 5.5l-3-8A6 6 0 001 6.9zm6 6c.7 0 1.4 0 2-.3L7 7.5l-1.8 5.3c.5.2 1 .3 1.7.3zm.9-8.9l2.1 6.6.7-2 .4-2c0-.6-.2-1.2-.5-1.6-.3-.6-.6-1-.6-1.5s.4-1 1-1a6 6 0 00-9 1H3.8c.4 0 .4.4 0 .5h-.6l2.2 6.7 1.3-4-1-2.6h-.6c-.3 0-.2-.5 0-.5h3.3c.3 0 .4.4 0 .4l-.6.1zm2.1 8.1c1.9-1 3-3 3-5.2 0-1-.2-2-.7-3 .1 1 0 2-.4 2.9l-1.8 5.4zM7 14A7 7 0 117 0a7 7 0 010 14z"/></svg>',
                        reddit: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--reddit"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>',
                        redditlinks: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--redditlinks"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>'
                    };
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/locales/locales.pug";
                var lang = document.documentElement.lang || 'en';
                var translations = {
                    periods: {
                        en: {
                            'total': 'Total',
                            'firstNDays': 'First {{N}} Days',
                            'last6': 'Last 6 Months',
                            'last12': 'Last 12 Months'
                        },
                        no: {
                            'total': 'Totalt',
                            'firstNDays': 'Første {{N}} dagene',
                            'last6': 'Siste 6 måneder',
                            'last12': 'Siste 12 måneder'
                        }
                    },
                    viewAll: {
                        en: 'View all metrics',
                        no: 'Vis all statistikk'
                    },
                    noDataMsg: {
                        en: 'This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later',
                        no: 'Ingen tilgjengelig statistikk'
                    },
                    toolbar: {
                        title: {
                            en: 'Metrics',
                            no: 'Statistikk'
                        }
                    },
                    numericMap: {
                        mapTitle: {
                            en: 'geographical distribution',
                            no: 'geografisk fordeling'
                        },
                        footerTitle: {
                            en: 'Country %',
                            no: 'Land'
                        }
                    },
                    menu: {
                        downloadAs: {
                            en: 'Download as',
                            no: 'Last ned som'
                        },
                        shareTo: {
                            en: 'Share to',
                            no: 'Del til'
                        }
                    }
                };
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                var dataDbTarget = "numeric-metrics--menu",
                    defaultSelected = function defaultSelected(i) {
                        return i === 0 ? "metrics-selected--js" : '';
                    };
                pug_debug_line = 11;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                pug_html = pug_html + "<div class=\"numeric-metrics full-metrics\">";
                pug_debug_line = 12;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                pug_html = pug_html + "<div class=\"metrics-header\">";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-title\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_html = pug_html + "<span class=\"metrics-title__text\">";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_debug_line = 5;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = data.widgetTitle ? data.widgetTitle : 'Metrics') ? "" : _pug_interp) + "</span></div>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                var navData = data.dataSections;
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                pug_debug_line = 5;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-nav metrics-rlist\">";
                pug_debug_line = 6;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                (function () {
                    var $$obj = navData;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                            if (item.months.length > 0 || item.firstNDays && item.firstNDays.length > 0) {
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color) : '', " ").concat(item.displayDefault ? 'metrics-selected--js' : '')], [false, true]), false, false) + " href=\"#\" role=\"button\"" + pug_attr("title", item.title, true, false) + pug_attr("data-title", item.id, true, false)) + ">";
                                pug_debug_line = 10;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></a></li>";
                            } else {
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li" + pug_attr("class", pug_classes(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(icons[item.id] ? '' : "metrics-nav__item-link--default-".concat(index))], [false, false, true]), false, false) + pug_attr("data-title", item.id, true, false) + " title=\"This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later\"") + ">";
                                pug_debug_line = 15;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></span></li>";
                            }
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                            if (item.months.length > 0 || item.firstNDays && item.firstNDays.length > 0) {
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color) : '', " ").concat(item.displayDefault ? 'metrics-selected--js' : '')], [false, true]), false, false) + " href=\"#\" role=\"button\"" + pug_attr("title", item.title, true, false) + pug_attr("data-title", item.id, true, false)) + ">";
                                pug_debug_line = 10;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></a></li>";
                            } else {
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li" + pug_attr("class", pug_classes(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(icons[item.id] ? '' : "metrics-nav__item-link--default-".concat(index))], [false, false, true]), false, false) + pug_attr("data-title", item.id, true, false) + " title=\"This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later\"") + ">";
                                pug_debug_line = 15;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></span></li>";
                            }
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</ul></div>";
                pug_debug_line = 17;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                pug_html = pug_html + "<div class=\"numeric-metrics__content-section\">";
                pug_debug_line = 18;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                pug_html = pug_html + "<div class=\"metrics-chart__top\">";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-total\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                (function () {
                    var $$obj = data.dataSections;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 4;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<div" + (pug_attr("class", pug_classes(["metrics-total__item", "metrics-total__item--".concat(item.id, " ").concat(item.months && item.months.length > 0 ? defaultSelected(index) : '')], [false, true]), false, false) + pug_attr("title", "Total ".concat(item.title), true, false)) + ">";
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + pug_attr("class", pug_classes(["metric-icon-fill", "".concat(defaultSelected(index), " metric-icon-fill--").concat(item.id, " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : '')], [false, true]), false, false) + ">";
                            pug_debug_line = 6;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp) + "</span>";
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + (" class=\"metrics-total__item-text\"" + pug_attr("data-count", item.total ? item.total.toLocaleString(navigator.language) : '0', true, false)) + ">";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = item.total ? item.total.toLocaleString(navigator.language) : '0') ? "" : _pug_interp) + "</span></div>";
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 4;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<div" + (pug_attr("class", pug_classes(["metrics-total__item", "metrics-total__item--".concat(item.id, " ").concat(item.months && item.months.length > 0 ? defaultSelected(index) : '')], [false, true]), false, false) + pug_attr("title", "Total ".concat(item.title), true, false)) + ">";
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + pug_attr("class", pug_classes(["metric-icon-fill", "".concat(defaultSelected(index), " metric-icon-fill--").concat(item.id, " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : '')], [false, true]), false, false) + ">";
                            pug_debug_line = 6;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp) + "</span>";
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + (" class=\"metrics-total__item-text\"" + pug_attr("data-count", item.total ? item.total.toLocaleString(navigator.language) : '0', true, false)) + ">";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = item.total ? item.total.toLocaleString(navigator.language) : '0') ? "" : _pug_interp) + "</span></div>";
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</div>";
                pug_debug_line = 20;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                pug_html = pug_html + "<div class=\"metrics-chart__right-subsection\">";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                var isfirstNDaysData,
                    isSixMonthData = false,
                    isTwelveMonthData = false,
                    defaultMetrics = [],
                    firstNDaysVal = data['First-N-Days'];
                test = 'none', convertedDefaultDisplayedGraph = data.defaultDisplayedGraph === 'last12Months' ? 'last12' : data.defaultDisplayedGraph === 'last6Months' ? 'last6' : data.defaultDisplayedGraph === 'firstNDays' ? 'firstNDays' : 'total', tabsList = {
                    'total': {
                        'shown': true,
                        'isDefaultTab': false
                    },
                    'last12': {
                        'shown': false,
                        'isDefaultTab': false
                    },
                    'last6': {
                        'shown': false,
                        'isDefaultTab': false
                    },
                    'firstNDays': {
                        'shown': false,
                        'isDefaultTab': false
                    }
                };
                firstTabValue = "";
                pug_debug_line = 18;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_debug_line = 19;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                var mainCLasses = 'metrics-tabs metrics-menu';
                pug_debug_line = 21;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getDefaultMetrics"] = _pug_interp = function pug_interp() {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 22;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = data.dataSections;
                        if ('number' == typeof $$obj.length) {
                            for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                                var item = $$obj[index];
                                pug_debug_line = 23;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                item.displayDefault && defaultMetrics.push(item.id);
                            }
                        } else {
                            var $$l = 0;
                            for (var index in $$obj) {
                                $$l++;
                                var item = $$obj[index];
                                pug_debug_line = 23;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                item.displayDefault && defaultMetrics.push(item.id);
                            }
                        }
                    }).call(this);
                };
                pug_debug_line = 25;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getMonthsData"] = _pug_interp = function pug_interp() {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 26;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = data.dataSections;
                        if ('number' == typeof $$obj.length) {
                            for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                                var item = $$obj[index];
                                pug_debug_line = 27;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isSixMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 28;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isSixMonthData = item && item.months && item.months.length >= 6;
                                    if (isSixMonthData) tabsList.last6.shown = true;
                                }
                                pug_debug_line = 32;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (isSixMonthData && !isTwelveMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 33;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isTwelveMonthData = item && item.months && item.months.length >= 12;
                                    if (isTwelveMonthData) tabsList.last12.shown = true;
                                }
                                pug_debug_line = 37;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isfirstNDaysData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 38;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isfirstNDaysData = item && item.firstNDays && item.firstNDays.length > 1;
                                    if (isfirstNDaysData) tabsList.firstNDays.shown = true;
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var index in $$obj) {
                                $$l++;
                                var item = $$obj[index];
                                pug_debug_line = 27;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isSixMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 28;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isSixMonthData = item && item.months && item.months.length >= 6;
                                    if (isSixMonthData) tabsList.last6.shown = true;
                                }
                                pug_debug_line = 32;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (isSixMonthData && !isTwelveMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 33;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isTwelveMonthData = item && item.months && item.months.length >= 12;
                                    if (isTwelveMonthData) tabsList.last12.shown = true;
                                }
                                pug_debug_line = 37;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isfirstNDaysData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 38;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isfirstNDaysData = item && item.firstNDays && item.firstNDays.length > 1;
                                    if (isfirstNDaysData) tabsList.firstNDays.shown = true;
                                }
                            }
                        }
                    }).call(this);
                    pug_debug_line = 41;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    test = tabsList[convertedDefaultDisplayedGraph] && tabsList[convertedDefaultDisplayedGraph].shown === true;
                    if (tabsList[convertedDefaultDisplayedGraph] && tabsList[convertedDefaultDisplayedGraph].shown === true) {
                        tabsList[convertedDefaultDisplayedGraph].isDefaultTab = true;
                    } else if (tabsList.last6.shown === true) {
                        tabsList.last6.isDefaultTab = true;
                    } else if (tabsList.firstNDays.shown === true) {
                        tabsList.firstNDays.isDefaultTab = true;
                    } else {
                        // total is always shown
                        tabsList.total.isDefaultTab = true;
                    }
                };
                pug_debug_line = 54;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getFirstTabValue"] = _pug_interp = function pug_interp() {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 55;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = translations.periods[lang];
                        if ('number' == typeof $$obj.length) {
                            for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
                                var tab = $$obj[key];
                                pug_debug_line = 56;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (key === 'firstNDays') {
                                    pug_debug_line = 57;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    tab = tab.replace('{{N}}', firstNDaysVal);
                                }
                                pug_debug_line = 59;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (tabsList[key] && tabsList[key].shown === true) {
                                    pug_debug_line = 60;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    if (!firstTabValue) {
                                        firstTabValue = tab;
                                    }
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var key in $$obj) {
                                $$l++;
                                var tab = $$obj[key];
                                pug_debug_line = 56;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (key === 'firstNDays') {
                                    pug_debug_line = 57;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    tab = tab.replace('{{N}}', firstNDaysVal);
                                }
                                pug_debug_line = 59;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (tabsList[key] && tabsList[key].shown === true) {
                                    pug_debug_line = 60;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    if (!firstTabValue) {
                                        firstTabValue = tab;
                                    }
                                }
                            }
                        }
                    }).call(this);
                };
                pug_debug_line = 65;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["list"] = _pug_interp = function pug_interp(isShortMonthName) {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 66;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = translations.periods[lang];
                        if ('number' == typeof $$obj.length) {
                            for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
                                var tab = $$obj[key];
                                pug_debug_line = 67;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var shortMonthName = tab.substring(tab.indexOf(' ') + 1);
                                pug_debug_line = 68;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var NDays = null;
                                pug_debug_line = 70;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (key === 'firstNDays') {
                                    pug_debug_line = 71;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    tab = tab.replace('{{N}}', firstNDaysVal);
                                    pug_debug_line = 72;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    NDays = firstNDaysVal;
                                }
                                pug_debug_line = 74;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (tabsList[key].shown === true) {
                                    pug_debug_line = 75;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<li" + (" class=\"metrics-tabs__item\"" + pug_attr("data-JS", "AY " + test, true, false)) + ">";
                                    pug_debug_line = 76;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-tabs__item-link", tabsList[key].isDefaultTab === true ? 'metrics-selected--js' : ''], [false, true]), false, false) + " role=\"button\" href=\"#\"" + pug_attr("data-title", key, true, false) + pug_attr("data-n-days", NDays, true, false)) + ">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"tab-text\">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = isShortMonthName && (key === 'last6' || key === 'last12') ? shortMonthName : tab) ? "" : _pug_interp) + "</span></a></li>";
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var key in $$obj) {
                                $$l++;
                                var tab = $$obj[key];
                                pug_debug_line = 67;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var _shortMonthName = tab.substring(tab.indexOf(' ') + 1);
                                pug_debug_line = 68;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var NDays = null;
                                pug_debug_line = 70;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (key === 'firstNDays') {
                                    pug_debug_line = 71;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    tab = tab.replace('{{N}}', firstNDaysVal);
                                    pug_debug_line = 72;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    NDays = firstNDaysVal;
                                }
                                pug_debug_line = 74;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (tabsList[key].shown === true) {
                                    pug_debug_line = 75;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<li" + (" class=\"metrics-tabs__item\"" + pug_attr("data-JS", "AY " + test, true, false)) + ">";
                                    pug_debug_line = 76;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-tabs__item-link", tabsList[key].isDefaultTab === true ? 'metrics-selected--js' : ''], [false, true]), false, false) + " role=\"button\" href=\"#\"" + pug_attr("data-title", key, true, false) + pug_attr("data-n-days", NDays, true, false)) + ">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"tab-text\">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = isShortMonthName && (key === 'last6' || key === 'last12') ? _shortMonthName : tab) ? "" : _pug_interp) + "</span></a></li>";
                                }
                            }
                        }
                    }).call(this);
                };
                pug_debug_line = 79;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getDefaultMetrics"]();
                pug_debug_line = 80;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getMonthsData"]();
                pug_debug_line = 82;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_debug_line = 83;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + "<div" + pug_attr("class", pug_classes([mainCLasses], [true]), false, false) + ">";
                pug_debug_line = 84;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_debug_line = 85;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + "<a" + (" class=\"metrics-tabs__link metrics-menu__link\"" + " href=\"#\" aria-haspopup=\"true\"" + pug_attr("data-metrics-target-for", dataDbTarget, true, false) + " aria-expanded=\"false\"") + ">";
                pug_debug_line = 86;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getFirstTabValue"]();
                pug_debug_line = 87;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + "<span class=\"link-text\">";
                pug_debug_line = 87;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = firstTabValue) ? "" : _pug_interp) + "</span></a>";
                pug_debug_line = 88;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_debug_line = 89;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + "<div" + (" class=\"metrics-tabs__list-container metrics-menu__dropdown-container\"" + pug_attr("data-metrics-target-of", dataDbTarget, true, false) + " aria-hidden=\"false\"") + ">";
                pug_debug_line = 90;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-rlist metrics-tabs__list metrics-menu__dropdown\">";
                pug_debug_line = 91;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["list"]();
                pug_html = pug_html + "</ul></div></div>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                var menuItems = {
                    controlTitle: translations.menu.downloadAs[lang],
                    title: 'download',
                    icon: downloadIcon,
                    list: {
                        'PNG': 'Download PNG',
                        'CSV': 'Download CSV'
                    }
                };
                dataDbTarget = "".concat(dataDbTarget, "-dm");
                pug_debug_line = 14;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_debug_line = 15;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + "<div" + pug_attr("class", pug_classes(["metrics-menu", "metrics-menu--".concat(menuItems.title)], [false, true]), false, false) + ">";
                pug_debug_line = 16;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_debug_line = 17;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + "<a" + (" class=\"metrics-menu__link\"" + " href=\"#\"" + pug_attr("title", menuItems.controlTitle, true, false) + " aria-haspopup=\"true\"" + pug_attr("data-metrics-target-for", dataDbTarget, true, false) + " aria-expanded=\"false\"") + ">";
                pug_debug_line = 18;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = menuItems.icon) ? "" : _pug_interp) + "</a>";
                pug_debug_line = 19;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_debug_line = 20;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + "<div" + (" class=\"metrics-menu__dropdown-container\"" + pug_attr("data-metrics-target-of", dataDbTarget, true, false) + " aria-hidden=\"true\"") + ">";
                pug_debug_line = 21;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-rlist metrics-menu__dropdown\">";
                pug_debug_line = 22;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                (function () {
                    var $$obj = menuItems.list;
                    if ('number' == typeof $$obj.length) {
                        for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
                            var item = $$obj[key];
                            pug_debug_line = 23;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                            pug_html = pug_html + "<li" + pug_attr("class", pug_classes(["metrics-menu__dropdown-item", "metrics-menu__dropdown-item--".concat(key)], [false, true]), false, false) + ">";
                            pug_debug_line = 24;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                            pug_html = pug_html + "<a" + (" class=\"metrics-menu__dropdown-link\"" + " href=\"#\"" + pug_attr("title", item, true, false)) + ">";
                            pug_debug_line = 24;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = key) ? "" : _pug_interp) + "</a></li>";
                        }
                    } else {
                        var $$l = 0;
                        for (var key in $$obj) {
                            $$l++;
                            var item = $$obj[key];
                            pug_debug_line = 23;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                            pug_html = pug_html + "<li" + pug_attr("class", pug_classes(["metrics-menu__dropdown-item", "metrics-menu__dropdown-item--".concat(key)], [false, true]), false, false) + ">";
                            pug_debug_line = 24;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                            pug_html = pug_html + "<a" + (" class=\"metrics-menu__dropdown-link\"" + " href=\"#\"" + pug_attr("title", item, true, false)) + ">";
                            pug_debug_line = 24;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = key) ? "" : _pug_interp) + "</a></li>";
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</ul></div></div>";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                menuItems = {
                    controlTitle: translations.menu.shareTo[lang],
                    title: 'share',
                    icon: shareIcon,
                    list: {
                        facebook: 'Facebook',
                        x: 'X',
                        linkedin: 'Linkedin'
                    }
                };
                dataDbTarget = "".concat(dataDbTarget, "-sm");
                pug_debug_line = 15;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + "<div" + pug_attr("class", pug_classes(["metrics-menu", "metrics-menu--".concat(menuItems.title)], [false, true]), false, false) + ">";
                pug_debug_line = 17;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + "<a" + (" class=\"metrics-menu__link\"" + " href=\"#\"" + pug_attr("title", menuItems.controlTitle, true, false) + " aria-haspopup=\"true\"" + pug_attr("data-metrics-target-for", dataDbTarget, true, false) + " aria-expanded=\"false\"") + ">";
                pug_debug_line = 18;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/menu/templates/menu-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = menuItems.icon) ? "" : _pug_interp) + "</a>";
                pug_debug_line = 21;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                pug_html = pug_html + "<div" + (" class=\"metrics-menu__dropdown-container\"" + pug_attr("data-metrics-target-of", dataDbTarget, true, false) + " aria-hidden=\"true\"") + ">";
                pug_debug_line = 22;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-rlist metrics-menu__dropdown social-media-links a2a a2a_kit\">";
                pug_debug_line = 23;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                (function () {
                    var $$obj = menuItems.list;
                    if ('number' == typeof $$obj.length) {
                        for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
                            var item = $$obj[key];
                            pug_debug_line = 24;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                            pug_html = pug_html + "<li class=\"metrics-menu__dropdown-item\">";
                            pug_debug_line = 25;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                            pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-menu__dropdown-link", "a2a_button_".concat(key)], [false, true]), false, false) + " href=\"#\"" + pug_attr("title", item, true, false) + pug_attr("data-service", key, true, false)) + ">";
                            pug_debug_line = 25;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = item) ? "" : _pug_interp) + "</a></li>";
                        }
                    } else {
                        var $$l = 0;
                        for (var key in $$obj) {
                            $$l++;
                            var item = $$obj[key];
                            pug_debug_line = 24;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                            pug_html = pug_html + "<li class=\"metrics-menu__dropdown-item\">";
                            pug_debug_line = 25;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                            pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-menu__dropdown-link", "a2a_button_".concat(key)], [false, true]), false, false) + " href=\"#\"" + pug_attr("title", item, true, false) + pug_attr("data-service", key, true, false)) + ">";
                            pug_debug_line = 25;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-share-menu-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = item) ? "" : _pug_interp) + "</a></li>";
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</ul></div></div></div></div>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-chart\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-chart__empty\">";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + "<span>";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = translations.noDataMsg[lang]) ? "" : _pug_interp) + "</span></div></div></div>";
                pug_debug_line = 27;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                var mapData = [];
                pug_debug_line = 29;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                (function () {
                    var $$obj = data.dataSections;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 30;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                            if (item.countries) {
                                pug_debug_line = 31;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                                if (Object.keys(item.countries).length > 0) {
                                    pug_debug_line = 32;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                                    mapData.push(data.dataSections[index]);
                                }
                            }
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 30;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                            if (item.countries) {
                                pug_debug_line = 31;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                                if (Object.keys(item.countries).length > 0) {
                                    pug_debug_line = 32;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                                    mapData.push(data.dataSections[index]);
                                }
                            }
                        }
                    }
                }).call(this);
                pug_debug_line = 34;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                if (mapData.length > 0) {
                    pug_debug_line = 35;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + "<div class=\"numeric-metrics__map\">";
                    pug_debug_line = 36;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + "<div class=\"metrics-header metrics-header--top-line\">";
                    pug_debug_line = 4;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    pug_html = pug_html + "<div class=\"metrics-title\">";
                    pug_debug_line = 5;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    (function () {
                        var $$obj = mapData;
                        if ('number' == typeof $$obj.length) {
                            for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                                var item = $$obj[index];
                                pug_debug_line = 6;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                                if (item) {
                                    pug_debug_line = 7;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                                    pug_html = pug_html + "<span" + pug_attr("class", pug_classes(["metric-icon-fill", "metric-icon-fill--".concat(item.id, " ").concat(defaultSelected(index), " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : "")], [false, true]), false, false) + ">";
                                    pug_debug_line = 7;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp) + "</span>";
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var index in $$obj) {
                                $$l++;
                                var item = $$obj[index];
                                pug_debug_line = 6;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                                if (item) {
                                    pug_debug_line = 7;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                                    pug_html = pug_html + "<span" + pug_attr("class", pug_classes(["metric-icon-fill", "metric-icon-fill--".concat(item.id, " ").concat(defaultSelected(index), " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : "")], [false, true]), false, false) + ">";
                                    pug_debug_line = 7;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp) + "</span>";
                                }
                            }
                        }
                    }).call(this);
                    pug_debug_line = 8;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    pug_html = pug_html + "<h2 class=\"metrics-title__text metrics-title__text--map\">";
                    pug_debug_line = 9;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    pug_html = pug_html + "<span>";
                    pug_debug_line = 9;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    pug_html = pug_html + (null == (_pug_interp = "Article " + mapData[0].title) ? "" : _pug_interp) + "</span>";
                    pug_debug_line = 10;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    pug_html = pug_html + "<span class=\"metric-title\">";
                    pug_debug_line = 10;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-map-title-tmpl.pug";
                    pug_html = pug_html + (null == (_pug_interp = mapData[0].title) ? "" : _pug_interp) + "</span></h2></div>";
                    pug_debug_line = 3;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                    var _navData = mapData;
                    pug_debug_line = 6;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                    pug_html = pug_html + "<ul class=\"metrics-nav metrics-rlist\">";
                    pug_debug_line = 7;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                    (function () {
                        var $$obj = _navData;
                        if ('number' == typeof $$obj.length) {
                            for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                                var item = $$obj[index];
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                if (item.countries || item.countries.length > 0) {
                                    pug_debug_line = 9;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                    pug_debug_line = 10;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "label__button", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color, " ").concat(defaultSelected(index)) : "")], [false, false, true]), false, false) + " href=\"#\"" + pug_attr("title", item.title, true, false) + pug_attr("data-title", item.id, true, false)) + ">";
                                    pug_debug_line = 11;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                    pug_debug_line = 12;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"nav-text\">";
                                    pug_debug_line = 12;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></a></li>";
                                } else {
                                    pug_debug_line = 14;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<li" + pug_attr("class", pug_classes(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                    pug_debug_line = 15;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<span" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(defaultSelected(index))], [false, false, true]), false, false) + pug_attr("data-title", item.id, true, false) + pug_attr("title", translations.noDataMsg[lang], true, false)) + ">";
                                    pug_debug_line = 16;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = icons[item.id]) ? "" : _pug_interp);
                                    pug_debug_line = 17;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"nav-text\">";
                                    pug_debug_line = 17;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></span></li>";
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var index in $$obj) {
                                $$l++;
                                var item = $$obj[index];
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                if (item.countries || item.countries.length > 0) {
                                    pug_debug_line = 9;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                    pug_debug_line = 10;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<a" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "label__button", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color, " ").concat(defaultSelected(index)) : "")], [false, false, true]), false, false) + " href=\"#\"" + pug_attr("title", item.title, true, false) + pug_attr("data-title", item.id, true, false)) + ">";
                                    pug_debug_line = 11;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                    pug_debug_line = 12;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"nav-text\">";
                                    pug_debug_line = 12;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></a></li>";
                                } else {
                                    pug_debug_line = 14;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<li" + pug_attr("class", pug_classes(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                    pug_debug_line = 15;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<span" + (pug_attr("class", pug_classes(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(defaultSelected(index))], [false, false, true]), false, false) + pug_attr("data-title", item.id, true, false) + pug_attr("title", translations.noDataMsg[lang], true, false)) + ">";
                                    pug_debug_line = 16;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = icons[item.id]) ? "" : _pug_interp);
                                    pug_debug_line = 17;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"nav-text\">";
                                    pug_debug_line = 17;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/extended/ext-nav-map-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></span></li>";
                                }
                            }
                        }
                    }).call(this);
                    pug_html = pug_html + "</ul></div>";
                    pug_debug_line = 40;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + "<div class=\"numeric-metrics__map-geo\"></div>";
                    pug_debug_line = 41;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + "<div class=\"numeric-metrics__map-footer\">";
                    pug_debug_line = 42;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + "<div" + pug_attr("class", pug_classes(["numeric-metrics__map-footer-title", "numeric-metrics__map-footer-title--".concat(mapData[0].id, " numeric-metrics__map-footer-title--").concat(mapData[0].color)], [false, true]), false, false) + ">";
                    pug_debug_line = 42;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + (null == (_pug_interp = translations.numericMap.footerTitle[lang]) ? "" : _pug_interp) + "</div>";
                    pug_debug_line = 43;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/numeric-metrics/templates/numeric-metrics.pug";
                    pug_html = pug_html + "<div class=\"numeric-metrics__map-footer-countries\"></div></div></div>";
                }
                pug_html = pug_html + "</div>";
            }).call(this, "Object" in locals_for_with ? locals_for_with.Object : typeof Object !== "undefined" ? Object : undefined, "convertedDefaultDisplayedGraph" in locals_for_with ? locals_for_with.convertedDefaultDisplayedGraph : typeof convertedDefaultDisplayedGraph !== "undefined" ? convertedDefaultDisplayedGraph : undefined, "data" in locals_for_with ? locals_for_with.data : typeof data !== "undefined" ? data : undefined, "document" in locals_for_with ? locals_for_with.document : typeof document !== "undefined" ? document : undefined, "firstTabValue" in locals_for_with ? locals_for_with.firstTabValue : typeof firstTabValue !== "undefined" ? firstTabValue : undefined, "navigator" in locals_for_with ? locals_for_with.navigator : typeof navigator !== "undefined" ? navigator : undefined, "tabsList" in locals_for_with ? locals_for_with.tabsList : typeof tabsList !== "undefined" ? tabsList : undefined, "test" in locals_for_with ? locals_for_with.test : typeof test !== "undefined" ? test : undefined);
        } catch (err) {
            pug_rethrow(err, pug_debug_filename, pug_debug_line);
        }
        return pug_html;
    }

    function pug_attr$1(t, e, n, r) {
        if (!1 === e || null == e || !e && ("class" === t || "style" === t)) return "";
        if (!0 === e) return " " + (r ? t : t + '="' + t + '"');
        var f = _typeof(e);
        return "object" !== f && "function" !== f || "function" != typeof e.toJSON || (e = e.toJSON()), "string" == typeof e || (e = JSON.stringify(e), n || -1 === e.indexOf('"')) ? (n && (e = pug_escape$1(e)), " " + t + '="' + e + '"') : " " + t + "='" + e.replace(/'/g, "&#39;") + "'";
    }
    function pug_classes$1(s, r) {
        return Array.isArray(s) ? pug_classes_array$1(s, r) : s && "object" == _typeof(s) ? pug_classes_object$1(s) : s || "";
    }
    function pug_classes_array$1(r, a) {
        for (var s, e = "", u = "", c = Array.isArray(a), g = 0; g < r.length; g++) (s = pug_classes$1(r[g])) && (c && a[g] && (s = pug_escape$1(s)), e = e + u + s, u = " ");
        return e;
    }
    function pug_classes_object$1(r) {
        var a = "",
            n = "";
        for (var o in r) o && r[o] && pug_has_own_property$1.call(r, o) && (a = a + n + o, n = " ");
        return a;
    }
    function pug_escape$1(e) {
        var a = "" + e,
            t = pug_match_html$1.exec(a);
        if (!t) return e;
        var r,
            c,
            n,
            s = "";
        for (r = t.index, c = 0; r < a.length; r++) {
            switch (a.charCodeAt(r)) {
                case 34:
                    n = "&quot;";
                    break;
                case 38:
                    n = "&amp;";
                    break;
                case 60:
                    n = "&lt;";
                    break;
                case 62:
                    n = "&gt;";
                    break;
                default:
                    continue;
            }
            c !== r && (s += a.substring(c, r)), c = r + 1, s += n;
        }
        return c !== r ? s + a.substring(c, r) : s;
    }
    var pug_has_own_property$1 = Object.prototype.hasOwnProperty;
    var pug_match_html$1 = /["&<>]/;
    function pug_rethrow$1(n, e, r, t) {
        if (!(n instanceof Error)) throw n;
        if (!("undefined" == typeof window && e || t)) throw n.message += " on line " + r, n;
        try {
            t = t || require("fs").readFileSync(e, "utf8");
        } catch (e) {
            pug_rethrow$1(n, null, r);
        }
        var i = 3,
            a = t.split("\n"),
            o = Math.max(r - i, 0),
            h = Math.min(a.length, r + i),
            i = a.slice(o, h).map(function (n, e) {
                var t = e + o + 1;
                return (t == r ? "  > " : "    ") + t + "| " + n;
            }).join("\n");
        throw n.path = e, n.message = (e || "Pug") + ":" + r + "\n" + i + "\n\n" + n.message, n;
    }
    function toolbarTemplate (locals, jade) {
        var pug_html = "",
            pug_interp;
        var pug_debug_filename, pug_debug_line;
        try {
            var locals_for_with = locals || {};
            (function (data, document, navigator, parseInt) {
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/variables/pug/icons.pug";
                var chartIcon = '<svg aria-hidden="true" viewBox="0 0 20 12" width="20" height="12" class="metrics-icon chart-icon"><path d="M14 0l2.3 2.3-4.9 4.9-4-4L0 10.6 1.4 12l6-6 4 4 6.3-6.3L20 6V0h-6z"/></svg>',
                    linkIcon = '<svg aria-hidden="true" viewBox="0 0 12 12" width="12" height="12" class="metrics-icon link-icon"><path d="M10.7 10.7H1.3V1.3H6V0H1.3C.6 0 0 .6 0 1.3v9.4c0 .7.6 1.3 1.3 1.3h9.4c.7 0 1.3-.6 1.3-1.3V6h-1.3v4.7zM7.3 0v1.3h2.4L3.2 8l1 1 6.5-6.6v2.4H12V0H7.3z"/></svg>',
                    icons = {
                        download: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--download"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                        downloads: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--downloads"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                        citation: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citation"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                        citations: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citations"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                        views: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--views"><path d="M7 2.27a7.56 7.56 0 00-7 4.76 7.56 7.56 0 0014 0 7.56 7.56 0 00-7-4.76zm0 7.93a3.17 3.17 0 110-6.35 3.17 3.17 0 010 6.35zm0-5.04A1.87 1.87 0 107 8.9a1.87 1.87 0 000-3.73z"/></svg>',
                        facebook: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--facebook"><path d="M.84 0a.8.8 0 00-.8.8v12.4c0 .44.36.8.8.8h6.78V8.61H5.68v-2.1h1.76v-1.6c0-1.75 1.14-2.89 2.82-2.89l1.58.1v1.93H10.7c-.88 0-.97.35-.97.96v1.41h2.1l-.43 2.11H9.64V14h3.52a.8.8 0 00.8-.8V.8a.8.8 0 00-.8-.8z"/></svg>',
                        twitter: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--twitter""><path d="M12.28 4.57v.35a10.3 10.3 0 01-2 5.67 6.2 6.2 0 01-2.45 2c-1.05.62-2.1.7-3.32.7A6.98 6.98 0 01.5 12.08h.7c1.22 0 2.35-.52 3.4-1.4a2.62 2.62 0 01-2.53-2h.52c.27 0 .53 0 .7-.17-.7 0-1.22-.35-1.66-.88a3.07 3.07 0 01-.6-1.83c.34.18.78.26 1.21.26A2.97 2.97 0 01.94 3.7c0-.61.08-1.05.35-1.49.7.88 1.48 1.66 2.53 2.19a6.1 6.1 0 003.14.87v-.7c0-.87.26-1.48.78-2.1.53-.52 1.05-.87 1.75-.87s1.4.35 1.92.88c.7-.1 1.13-.35 1.74-.7a2.62 2.62 0 01-1.22 1.74l1.57-.43a5.34 5.34 0 01-1.3 1.48z"/></svg>',
                        stackexchange: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--stackexchange"><path d="M1.8 9.4h10.4v.6c0 1-.7 1.7-1.6 1.7H10L7.9 14v-2.3H3.4c-.9 0-1.6-.7-1.6-1.7zm0-.6h10.4V6.7H1.8zm0-2.7h10.4V3.9H1.8zM10.6 1H3.4c-.9 0-1.6.8-1.6 1.7v.6h10.4v-.6c0-1-.7-1.7-1.6-1.7z"/></svg>',
                        blog: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--blog"><path d="M11.8 1.4H2.2c-.7 0-1.2.5-1.2 1.1v10.9L3.4 11h8.4c.7 0 1.2-.5 1.2-1.3V2.5c0-.6-.5-1.1-1.2-1.1zm-1.2 7.2H3.4V7.4h7.2zm0-1.8H3.4V5.5h7.2zm0-1.8H3.4V3.7h7.2z"/></svg>',
                        default: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--default"><path d="M2.3 3.5h10.5V2.3H2.3c-.6 0-1.1.6-1.1 1.2v6.4H0v1.8h8.2V9.9H2.3zm11.1 1.2H10c-.3 0-.6.2-.6.5v5.9c0 .3.3.6.6.6h3.5c.3 0 .6-.3.6-.6V5.3c0-.4-.3-.6-.6-.6zm-.6 5.2h-2.3V6h2.3z"/></svg>',
                        newsfeed: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--newsfeed"><path d="M9.8 0H2.2C1.5 0 1 .6 1 1.3v8.9h1.2v-9h7.6zm2 2.6h-7c-.8 0-1.3.5-1.3 1.2v9c0 .7.5 1.2 1.3 1.2h7c.7 0 1.2-.6 1.2-1.3V3.8c0-.7-.5-1.2-1.3-1.2zm0 10.1h-7V3.8h7z"/></svg>',
                        wikipedia: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wikipedia"><path d="M7 0a7 7 0 100 14A7 7 0 007 0zm4.9 4.2H9.8c-.3-.8-.5-1.7-1-2.5 1.3.4 2.4 1.3 3 2.5zM7 1.4c.6.9 1 1.7 1.3 2.8H5.7c.3-1 .7-2 1.3-2.8zm-5.5 7a5.7 5.7 0 010-2.8H4a11.6 11.6 0 000 2.8zm.6 1.4h2.1c.3.8.5 1.7 1 2.5a5.7 5.7 0 01-3-2.5zm2.1-5.6h-2a5.6 5.6 0 013-2.5c-.5.8-.7 1.7-1 2.5zM7 12.7c-.6-.9-1-1.9-1.3-3h2.6c-.3 1.1-.8 2-1.3 2.9zm1.7-4.3H5.3a9.8 9.8 0 010-2.8h3.4a9.8 9.8 0 010 2.8zm.2 4l.9-2.6h2a5.6 5.6 0 01-3 2.5zm1.1-4a11.6 11.6 0 000-2.8h2.4a5.7 5.7 0 010 2.8z"/></svg>',
                        wordpressdotcom: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wordpressdotcom"><path d="M1 7c0 2.4 1.3 4.5 3.4 5.5l-3-8A6 6 0 001 6.9zm6 6c.7 0 1.4 0 2-.3L7 7.5l-1.8 5.3c.5.2 1 .3 1.7.3zm.9-8.9l2.1 6.6.7-2 .4-2c0-.6-.2-1.2-.5-1.6-.3-.6-.6-1-.6-1.5s.4-1 1-1a6 6 0 00-9 1H3.8c.4 0 .4.4 0 .5h-.6l2.2 6.7 1.3-4-1-2.6h-.6c-.3 0-.2-.5 0-.5h3.3c.3 0 .4.4 0 .4l-.6.1zm2.1 8.1c1.9-1 3-3 3-5.2 0-1-.2-2-.7-3 .1 1 0 2-.4 2.9l-1.8 5.4zM7 14A7 7 0 117 0a7 7 0 010 14z"/></svg>',
                        reddit: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--reddit"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>',
                        redditlinks: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--redditlinks"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>'
                    };
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/locales/locales.pug";
                var lang = document.documentElement.lang || 'en';
                var translations = {
                    periods: {
                        en: {
                            'total': 'Total',
                            'firstNDays': 'First {{N}} Days',
                            'last6': 'Last 6 Months',
                            'last12': 'Last 12 Months'
                        },
                        no: {
                            'total': 'Totalt',
                            'firstNDays': 'Første {{N}} dagene',
                            'last6': 'Siste 6 måneder',
                            'last12': 'Siste 12 måneder'
                        }
                    },
                    viewAll: {
                        en: 'View all metrics',
                        no: 'Vis all statistikk'
                    },
                    noDataMsg: {
                        en: 'This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later',
                        no: 'Ingen tilgjengelig statistikk'
                    },
                    toolbar: {
                        title: {
                            en: 'Metrics',
                            no: 'Statistikk'
                        }
                    },
                    numericMap: {
                        mapTitle: {
                            en: 'geographical distribution',
                            no: 'geografisk fordeling'
                        },
                        footerTitle: {
                            en: 'Country %',
                            no: 'Land'
                        }
                    },
                    menu: {
                        downloadAs: {
                            en: 'Download as',
                            no: 'Last ned som'
                        },
                        shareTo: {
                            en: 'Share to',
                            no: 'Del til'
                        }
                    }
                };
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/toolbar-metric.pug";
                var menuSection = "toolbar-metric__menu-section",
                    menuList = "menu-list metrics-rlist",
                    dataDbTarget = "toolbar-metric--menu";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                var menuItems = {
                    title: 'toolbar-metric',
                    icon: chartIcon
                };
                pug_debug_line = 8;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_debug_line = 9;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_html = pug_html + "<div" + pug_attr$1("class", pug_classes$1(["metrics-menu", menuItems.title], [false, true]), false, false) + ">";
                pug_debug_line = 10;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_debug_line = 11;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                var hasContent = false;
                {
                    pug_debug_line = 12;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    (function () {
                        var $$obj = data.menuSections;
                        if ('number' == typeof $$obj.length) {
                            for (var pug_index0 = 0, $$l = $$obj.length; pug_index0 < $$l; pug_index0++) {
                                var item = $$obj[pug_index0];
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.id && item.total && item.total > 0) {
                                    pug_debug_line = 14;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    hasContent = true;
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var pug_index0 in $$obj) {
                                $$l++;
                                var item = $$obj[pug_index0];
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.id && item.total && item.total > 0) {
                                    pug_debug_line = 14;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    hasContent = true;
                                }
                            }
                        }
                    }).call(this);
                }
                pug_debug_line = 15;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_html = pug_html + "<a" + (pug_attr$1("class", pug_classes$1(["metrics-menu__link", "toolbar-metric__link", "".concat(!hasContent ? 'toolbar-metric__link--no-metrics' : '')], [false, false, true]), false, false) + " href=\"#\"" + pug_attr$1("data-metrics-target-for", dataDbTarget, true, false) + " aria-expanded=\"false\" aria-haspopup=\"true\" title=\"Metrics\"") + ">";
                pug_debug_line = 16;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_html = pug_html + (null == (pug_interp = menuItems.icon) ? "" : pug_interp);
                pug_debug_line = 17;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_html = pug_html + "<div class=\"toolbar-metric__link-metrics\"></div>";
                pug_debug_line = 18;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                if (hasContent) {
                    pug_debug_line = 19;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    (function () {
                        var $$obj = data.menuSections;
                        if ('number' == typeof $$obj.length) {
                            for (var pug_index1 = 0, $$l = $$obj.length; pug_index1 < $$l; pug_index1++) {
                                var item = $$obj[pug_index1];
                                pug_debug_line = 20;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.id && item.total && item.total > 0) {
                                    pug_debug_line = 21;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span" + pug_attr$1("class", pug_classes$1(["toolbar-metric__total", "toolbar-metric__total--".concat(item.id, " ").concat(item.color ? "toolbar-metric__total--".concat(item.color) : "")], [false, true]), false, false) + ">";
                                    pug_debug_line = 22;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                    pug_debug_line = 23;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span" + (" class=\"total-text\"" + pug_attr$1("data-count", item.total, true, false)) + ">";
                                    pug_debug_line = 23;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = item.total.toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></span>";
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var pug_index1 in $$obj) {
                                $$l++;
                                var item = $$obj[pug_index1];
                                pug_debug_line = 20;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.id && item.total && item.total > 0) {
                                    pug_debug_line = 21;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span" + pug_attr$1("class", pug_classes$1(["toolbar-metric__total", "toolbar-metric__total--".concat(item.id, " ").concat(item.color ? "toolbar-metric__total--".concat(item.color) : "")], [false, true]), false, false) + ">";
                                    pug_debug_line = 22;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                    pug_debug_line = 23;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span" + (" class=\"total-text\"" + pug_attr$1("data-count", item.total, true, false)) + ">";
                                    pug_debug_line = 23;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = item.total.toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></span>";
                                }
                            }
                        }
                    }).call(this);
                } else {
                    pug_debug_line = 25;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + "<span class=\"toolbar-metric__total toolbar-metric__total--empty\">";
                    pug_debug_line = 26;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + "No metrics to display.</span>";
                }
                pug_html = pug_html + "</a>";
                pug_debug_line = 27;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_debug_line = 28;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_html = pug_html + "<div" + (" class=\"metrics-menu__dropdown-container toolbar-metric__menu\"" + pug_attr$1("data-metrics-target-of", dataDbTarget, true, false) + " aria-hidden=\"true\"") + ">";
                pug_debug_line = 29;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-rlist metrics-menu__dropdown\">";
                pug_debug_line = 30;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                if (hasContent) {
                    pug_debug_line = 31;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + "<h3 class=\"toolbar-metric__menu-title\">";
                    pug_debug_line = 31;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + (null == (pug_interp = translations.toolbar.title[lang]) ? "" : pug_interp) + "</h3>";
                }
                pug_debug_line = 32;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                (function () {
                    var $$obj = data.menuSections;
                    if ('number' == typeof $$obj.length) {
                        for (var pug_index2 = 0, $$l = $$obj.length; pug_index2 < $$l; pug_index2++) {
                            var item = $$obj[pug_index2];
                            pug_debug_line = 33;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                            if (item.id && item.total && item.total > 0) {
                                pug_debug_line = 34;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<section" + pug_attr$1("class", pug_classes$1(["".concat(menuSection, " ").concat(item.color ? "toolbar-metric__menu-section--".concat(item.color) : "")], [true]), false, false) + ">";
                                pug_debug_line = 35;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                pug_debug_line = 36;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<div class=\"toolbar-metric__menu-section-counts\">";
                                pug_debug_line = 37;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<h3" + pug_attr$1("class", pug_classes$1(["menu-title", "menu-title--".concat(item.id, " ").concat(item.color ? "menu-title--".concat(item.color) : "")], [false, true]), false, false) + ">";
                                pug_debug_line = 38;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<span class=\"menu-title-text\">";
                                pug_debug_line = 38;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = item.title) ? "" : pug_interp) + "</span>";
                                pug_debug_line = 39;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<span class=\"menu-total-value\">";
                                pug_debug_line = 39;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = parseInt(item.total, 10).toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></h3>";
                                pug_debug_line = 40;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<ul" + pug_attr$1("class", pug_classes$1([menuList], [true]), false, false) + ">";
                                pug_debug_line = 41;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.last6) {
                                    pug_debug_line = 42;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<li>";
                                    pug_debug_line = 43;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-text\">";
                                    pug_debug_line = 43;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = translations.periods[lang].last6) ? "" : pug_interp) + "</span>";
                                    pug_debug_line = 44;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-value\">";
                                    pug_debug_line = 44;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = parseInt(item.last6, 10).toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></li>";
                                }
                                pug_debug_line = 45;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.last12) {
                                    pug_debug_line = 46;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<li>";
                                    pug_debug_line = 47;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-text\">";
                                    pug_debug_line = 47;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = translations.periods[lang].last12) ? "" : pug_interp) + "</span>";
                                    pug_debug_line = 48;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-value\">";
                                    pug_debug_line = 48;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = parseInt(item.last12, 10).toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></li>";
                                }
                                pug_html = pug_html + "</ul></div></section>";
                            }
                        }
                    } else {
                        var $$l = 0;
                        for (var pug_index2 in $$obj) {
                            $$l++;
                            var item = $$obj[pug_index2];
                            pug_debug_line = 33;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                            if (item.id && item.total && item.total > 0) {
                                pug_debug_line = 34;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<section" + pug_attr$1("class", pug_classes$1(["".concat(menuSection, " ").concat(item.color ? "toolbar-metric__menu-section--".concat(item.color) : "")], [true]), false, false) + ">";
                                pug_debug_line = 35;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                pug_debug_line = 36;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<div class=\"toolbar-metric__menu-section-counts\">";
                                pug_debug_line = 37;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<h3" + pug_attr$1("class", pug_classes$1(["menu-title", "menu-title--".concat(item.id, " ").concat(item.color ? "menu-title--".concat(item.color) : "")], [false, true]), false, false) + ">";
                                pug_debug_line = 38;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<span class=\"menu-title-text\">";
                                pug_debug_line = 38;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = item.title) ? "" : pug_interp) + "</span>";
                                pug_debug_line = 39;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<span class=\"menu-total-value\">";
                                pug_debug_line = 39;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = parseInt(item.total, 10).toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></h3>";
                                pug_debug_line = 40;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                pug_html = pug_html + "<ul" + pug_attr$1("class", pug_classes$1([menuList], [true]), false, false) + ">";
                                pug_debug_line = 41;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.last6) {
                                    pug_debug_line = 42;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<li>";
                                    pug_debug_line = 43;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-text\">";
                                    pug_debug_line = 43;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = translations.periods[lang].last6) ? "" : pug_interp) + "</span>";
                                    pug_debug_line = 44;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-value\">";
                                    pug_debug_line = 44;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = parseInt(item.last6, 10).toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></li>";
                                }
                                pug_debug_line = 45;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                if (item.last12) {
                                    pug_debug_line = 46;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<li>";
                                    pug_debug_line = 47;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-text\">";
                                    pug_debug_line = 47;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = translations.periods[lang].last12) ? "" : pug_interp) + "</span>";
                                    pug_debug_line = 48;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"menu-item-value\">";
                                    pug_debug_line = 48;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                                    pug_html = pug_html + (null == (pug_interp = parseInt(item.last12, 10).toLocaleString(navigator.language)) ? "" : pug_interp) + "</span></li>";
                                }
                                pug_html = pug_html + "</ul></div></section>";
                            }
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</div>";
                pug_debug_line = 49;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                if (data.linkToFullPageWithDoi) {
                    pug_debug_line = 50;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + "<a" + (" class=\"toolbar-metric__metrics-link\"" + pug_attr$1("href", data.linkToFullPageWithDoi, true, false) + " title=\"Go to metrics page\"") + ">";
                    pug_debug_line = 51;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + "<span>";
                    pug_debug_line = 51;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + (null == (pug_interp = translations.viewAll[lang]) ? "" : pug_interp) + "</span>";
                    pug_debug_line = 52;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/toolbar-metric/templates/extended/ext-toolbar-menu-tmpl.pug";
                    pug_html = pug_html + (null == (pug_interp = linkIcon) ? "" : pug_interp) + "</a>";
                }
                pug_html = pug_html + "</div></div>";
            }).call(this, "data" in locals_for_with ? locals_for_with.data : typeof data !== "undefined" ? data : undefined, "document" in locals_for_with ? locals_for_with.document : typeof document !== "undefined" ? document : undefined, "navigator" in locals_for_with ? locals_for_with.navigator : typeof navigator !== "undefined" ? navigator : undefined, "parseInt" in locals_for_with ? locals_for_with.parseInt : typeof parseInt !== "undefined" ? parseInt : undefined);
        } catch (err) {
            pug_rethrow$1(err, pug_debug_filename, pug_debug_line);
        }
        return pug_html;
    }

    function pug_attr$2(t, e, n, r) {
        if (!1 === e || null == e || !e && ("class" === t || "style" === t)) return "";
        if (!0 === e) return " " + (r ? t : t + '="' + t + '"');
        var f = _typeof(e);
        return "object" !== f && "function" !== f || "function" != typeof e.toJSON || (e = e.toJSON()), "string" == typeof e || (e = JSON.stringify(e), n || -1 === e.indexOf('"')) ? (n && (e = pug_escape$2(e)), " " + t + '="' + e + '"') : " " + t + "='" + e.replace(/'/g, "&#39;") + "'";
    }
    function pug_classes$2(s, r) {
        return Array.isArray(s) ? pug_classes_array$2(s, r) : s && "object" == _typeof(s) ? pug_classes_object$2(s) : s || "";
    }
    function pug_classes_array$2(r, a) {
        for (var s, e = "", u = "", c = Array.isArray(a), g = 0; g < r.length; g++) (s = pug_classes$2(r[g])) && (c && a[g] && (s = pug_escape$2(s)), e = e + u + s, u = " ");
        return e;
    }
    function pug_classes_object$2(r) {
        var a = "",
            n = "";
        for (var o in r) o && r[o] && pug_has_own_property$2.call(r, o) && (a = a + n + o, n = " ");
        return a;
    }
    function pug_escape$2(e) {
        var a = "" + e,
            t = pug_match_html$2.exec(a);
        if (!t) return e;
        var r,
            c,
            n,
            s = "";
        for (r = t.index, c = 0; r < a.length; r++) {
            switch (a.charCodeAt(r)) {
                case 34:
                    n = "&quot;";
                    break;
                case 38:
                    n = "&amp;";
                    break;
                case 60:
                    n = "&lt;";
                    break;
                case 62:
                    n = "&gt;";
                    break;
                default:
                    continue;
            }
            c !== r && (s += a.substring(c, r)), c = r + 1, s += n;
        }
        return c !== r ? s + a.substring(c, r) : s;
    }
    var pug_has_own_property$2 = Object.prototype.hasOwnProperty;
    var pug_match_html$2 = /["&<>]/;
    function pug_rethrow$2(n, e, r, t) {
        if (!(n instanceof Error)) throw n;
        if (!("undefined" == typeof window && e || t)) throw n.message += " on line " + r, n;
        try {
            t = t || require("fs").readFileSync(e, "utf8");
        } catch (e) {
            pug_rethrow$2(n, null, r);
        }
        var i = 3,
            a = t.split("\n"),
            o = Math.max(r - i, 0),
            h = Math.min(a.length, r + i),
            i = a.slice(o, h).map(function (n, e) {
                var t = e + o + 1;
                return (t == r ? "  > " : "    ") + t + "| " + n;
            }).join("\n");
        throw n.path = e, n.message = (e || "Pug") + ":" + r + "\n" + i + "\n\n" + n.message, n;
    }
    function sidebarTemplate (locals, jade) {
        var pug_html = "",
            pug_mixins = {},
            _pug_interp;
        var pug_debug_filename, pug_debug_line;
        try {
            var locals_for_with = locals || {};
            (function (convertedDefaultDisplayedGraph, data, document, firstTabValue, navigator, tabsList, test) {
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/variables/pug/icons.pug";
                var chartIcon = '<svg aria-hidden="true" viewBox="0 0 20 12" width="20" height="12" class="metrics-icon chart-icon"><path d="M14 0l2.3 2.3-4.9 4.9-4-4L0 10.6 1.4 12l6-6 4 4 6.3-6.3L20 6V0h-6z"/></svg>',
                    linkIcon = '<svg aria-hidden="true" viewBox="0 0 12 12" width="12" height="12" class="metrics-icon link-icon"><path d="M10.7 10.7H1.3V1.3H6V0H1.3C.6 0 0 .6 0 1.3v9.4c0 .7.6 1.3 1.3 1.3h9.4c.7 0 1.3-.6 1.3-1.3V6h-1.3v4.7zM7.3 0v1.3h2.4L3.2 8l1 1 6.5-6.6v2.4H12V0H7.3z"/></svg>',
                    icons = {
                        download: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--download"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                        downloads: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--downloads"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                        citation: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citation"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                        citations: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citations"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                        views: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--views"><path d="M7 2.27a7.56 7.56 0 00-7 4.76 7.56 7.56 0 0014 0 7.56 7.56 0 00-7-4.76zm0 7.93a3.17 3.17 0 110-6.35 3.17 3.17 0 010 6.35zm0-5.04A1.87 1.87 0 107 8.9a1.87 1.87 0 000-3.73z"/></svg>',
                        facebook: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--facebook"><path d="M.84 0a.8.8 0 00-.8.8v12.4c0 .44.36.8.8.8h6.78V8.61H5.68v-2.1h1.76v-1.6c0-1.75 1.14-2.89 2.82-2.89l1.58.1v1.93H10.7c-.88 0-.97.35-.97.96v1.41h2.1l-.43 2.11H9.64V14h3.52a.8.8 0 00.8-.8V.8a.8.8 0 00-.8-.8z"/></svg>',
                        twitter: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--twitter""><path d="M12.28 4.57v.35a10.3 10.3 0 01-2 5.67 6.2 6.2 0 01-2.45 2c-1.05.62-2.1.7-3.32.7A6.98 6.98 0 01.5 12.08h.7c1.22 0 2.35-.52 3.4-1.4a2.62 2.62 0 01-2.53-2h.52c.27 0 .53 0 .7-.17-.7 0-1.22-.35-1.66-.88a3.07 3.07 0 01-.6-1.83c.34.18.78.26 1.21.26A2.97 2.97 0 01.94 3.7c0-.61.08-1.05.35-1.49.7.88 1.48 1.66 2.53 2.19a6.1 6.1 0 003.14.87v-.7c0-.87.26-1.48.78-2.1.53-.52 1.05-.87 1.75-.87s1.4.35 1.92.88c.7-.1 1.13-.35 1.74-.7a2.62 2.62 0 01-1.22 1.74l1.57-.43a5.34 5.34 0 01-1.3 1.48z"/></svg>',
                        stackexchange: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--stackexchange"><path d="M1.8 9.4h10.4v.6c0 1-.7 1.7-1.6 1.7H10L7.9 14v-2.3H3.4c-.9 0-1.6-.7-1.6-1.7zm0-.6h10.4V6.7H1.8zm0-2.7h10.4V3.9H1.8zM10.6 1H3.4c-.9 0-1.6.8-1.6 1.7v.6h10.4v-.6c0-1-.7-1.7-1.6-1.7z"/></svg>',
                        blog: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--blog"><path d="M11.8 1.4H2.2c-.7 0-1.2.5-1.2 1.1v10.9L3.4 11h8.4c.7 0 1.2-.5 1.2-1.3V2.5c0-.6-.5-1.1-1.2-1.1zm-1.2 7.2H3.4V7.4h7.2zm0-1.8H3.4V5.5h7.2zm0-1.8H3.4V3.7h7.2z"/></svg>',
                        default: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--default"><path d="M2.3 3.5h10.5V2.3H2.3c-.6 0-1.1.6-1.1 1.2v6.4H0v1.8h8.2V9.9H2.3zm11.1 1.2H10c-.3 0-.6.2-.6.5v5.9c0 .3.3.6.6.6h3.5c.3 0 .6-.3.6-.6V5.3c0-.4-.3-.6-.6-.6zm-.6 5.2h-2.3V6h2.3z"/></svg>',
                        newsfeed: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--newsfeed"><path d="M9.8 0H2.2C1.5 0 1 .6 1 1.3v8.9h1.2v-9h7.6zm2 2.6h-7c-.8 0-1.3.5-1.3 1.2v9c0 .7.5 1.2 1.3 1.2h7c.7 0 1.2-.6 1.2-1.3V3.8c0-.7-.5-1.2-1.3-1.2zm0 10.1h-7V3.8h7z"/></svg>',
                        wikipedia: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wikipedia"><path d="M7 0a7 7 0 100 14A7 7 0 007 0zm4.9 4.2H9.8c-.3-.8-.5-1.7-1-2.5 1.3.4 2.4 1.3 3 2.5zM7 1.4c.6.9 1 1.7 1.3 2.8H5.7c.3-1 .7-2 1.3-2.8zm-5.5 7a5.7 5.7 0 010-2.8H4a11.6 11.6 0 000 2.8zm.6 1.4h2.1c.3.8.5 1.7 1 2.5a5.7 5.7 0 01-3-2.5zm2.1-5.6h-2a5.6 5.6 0 013-2.5c-.5.8-.7 1.7-1 2.5zM7 12.7c-.6-.9-1-1.9-1.3-3h2.6c-.3 1.1-.8 2-1.3 2.9zm1.7-4.3H5.3a9.8 9.8 0 010-2.8h3.4a9.8 9.8 0 010 2.8zm.2 4l.9-2.6h2a5.6 5.6 0 01-3 2.5zm1.1-4a11.6 11.6 0 000-2.8h2.4a5.7 5.7 0 010 2.8z"/></svg>',
                        wordpressdotcom: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wordpressdotcom"><path d="M1 7c0 2.4 1.3 4.5 3.4 5.5l-3-8A6 6 0 001 6.9zm6 6c.7 0 1.4 0 2-.3L7 7.5l-1.8 5.3c.5.2 1 .3 1.7.3zm.9-8.9l2.1 6.6.7-2 .4-2c0-.6-.2-1.2-.5-1.6-.3-.6-.6-1-.6-1.5s.4-1 1-1a6 6 0 00-9 1H3.8c.4 0 .4.4 0 .5h-.6l2.2 6.7 1.3-4-1-2.6h-.6c-.3 0-.2-.5 0-.5h3.3c.3 0 .4.4 0 .4l-.6.1zm2.1 8.1c1.9-1 3-3 3-5.2 0-1-.2-2-.7-3 .1 1 0 2-.4 2.9l-1.8 5.4zM7 14A7 7 0 117 0a7 7 0 010 14z"/></svg>',
                        reddit: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--reddit"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>',
                        redditlinks: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--redditlinks"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>'
                    };
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/locales/locales.pug";
                var lang = document.documentElement.lang || 'en';
                var translations = {
                    periods: {
                        en: {
                            'total': 'Total',
                            'firstNDays': 'First {{N}} Days',
                            'last6': 'Last 6 Months',
                            'last12': 'Last 12 Months'
                        },
                        no: {
                            'total': 'Totalt',
                            'firstNDays': 'Første {{N}} dagene',
                            'last6': 'Siste 6 måneder',
                            'last12': 'Siste 12 måneder'
                        }
                    },
                    viewAll: {
                        en: 'View all metrics',
                        no: 'Vis all statistikk'
                    },
                    noDataMsg: {
                        en: 'This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later',
                        no: 'Ingen tilgjengelig statistikk'
                    },
                    toolbar: {
                        title: {
                            en: 'Metrics',
                            no: 'Statistikk'
                        }
                    },
                    numericMap: {
                        mapTitle: {
                            en: 'geographical distribution',
                            no: 'geografisk fordeling'
                        },
                        footerTitle: {
                            en: 'Country %',
                            no: 'Land'
                        }
                    },
                    menu: {
                        downloadAs: {
                            en: 'Download as',
                            no: 'Last ned som'
                        },
                        shareTo: {
                            en: 'Share to',
                            no: 'Del til'
                        }
                    }
                };
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/sidebar-metric.pug";
                var defaultSelected = function defaultSelected(i) {
                    return i === 0 ? "metrics-selected--js" : '';
                };
                pug_debug_line = 10;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/sidebar-metric.pug";
                pug_html = pug_html + "<div class=\"sidebar-metric sidebar-metrics\">";
                pug_debug_line = 11;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/sidebar-metric.pug";
                pug_html = pug_html + "<div class=\"metrics-header\">";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-title-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-title\">";
                pug_debug_line = 5;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-title-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = chartIcon) ? "" : _pug_interp);
                pug_debug_line = 6;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-title-tmpl.pug";
                pug_html = pug_html + "<span class=\"metrics-title__text\">";
                pug_debug_line = 8;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-title-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = data.widgetTitle || 'Metrics') ? "" : _pug_interp) + "</span></div>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                var linkText = translations.viewAll[lang];
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                if (data.linkToFullPageWithDoi) {
                    pug_debug_line = 5;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                    pug_html = pug_html + "<a" + (" class=\"metrics-link\"" + pug_attr$2("href", data.linkToFullPageWithDoi, true, false) + " title=\"Go to metrics page\"") + ">";
                    pug_debug_line = 6;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                    pug_html = pug_html + "<span class=\"metrics-link__text\">";
                    pug_debug_line = 7;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                    pug_html = pug_html + (null == (_pug_interp = linkText) ? "" : _pug_interp) + "</span>";
                    pug_debug_line = 8;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/link/templates/link-tmpl.pug";
                    pug_html = pug_html + (null == (_pug_interp = linkIcon) ? "" : _pug_interp) + "</a>";
                }
                pug_html = pug_html + "</div>";
                pug_debug_line = 15;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/sidebar-metric.pug";
                pug_debug_line = 16;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/sidebar-metric.pug";
                pug_html = pug_html + "<div class=\"sidebar-metric__content-section\">";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                var navData = data.dataSections;
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                pug_debug_line = 5;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-nav metrics-rlist\">";
                pug_debug_line = 6;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                (function () {
                    var $$obj = navData;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                            if (item.months.length > 0 || item.firstNDays && item.firstNDays.length > 0) {
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<a" + (pug_attr$2("class", pug_classes$2(["metrics-nav__item-link", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color) : '', " ").concat(item.displayDefault ? 'metrics-selected--js' : '')], [false, true]), false, false) + " href=\"#\" role=\"button\"" + pug_attr$2("title", item.title, true, false) + pug_attr$2("data-title", item.id, true, false)) + ">";
                                pug_debug_line = 10;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></a></li>";
                            } else {
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li" + pug_attr$2("class", pug_classes$2(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span" + (pug_attr$2("class", pug_classes$2(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(icons[item.id] ? '' : "metrics-nav__item-link--default-".concat(index))], [false, false, true]), false, false) + pug_attr$2("data-title", item.id, true, false) + " title=\"This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later\"") + ">";
                                pug_debug_line = 15;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></span></li>";
                            }
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                            if (item.months.length > 0 || item.firstNDays && item.firstNDays.length > 0) {
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<a" + (pug_attr$2("class", pug_classes$2(["metrics-nav__item-link", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color) : '', " ").concat(item.displayDefault ? 'metrics-selected--js' : '')], [false, true]), false, false) + " href=\"#\" role=\"button\"" + pug_attr$2("title", item.title, true, false) + pug_attr$2("data-title", item.id, true, false)) + ">";
                                pug_debug_line = 10;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></a></li>";
                            } else {
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<li" + pug_attr$2("class", pug_classes$2(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span" + (pug_attr$2("class", pug_classes$2(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(icons[item.id] ? '' : "metrics-nav__item-link--default-".concat(index))], [false, false, true]), false, false) + pug_attr$2("data-title", item.id, true, false) + " title=\"This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later\"") + ">";
                                pug_debug_line = 15;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp);
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 16;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                                pug_html = pug_html + (null == (_pug_interp = item.title) ? "" : _pug_interp) + "</span></span></li>";
                            }
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</ul>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-chart\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-chart__empty\">";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + "<span>";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/chart/templates/chart-tmpl.pug";
                pug_html = pug_html + (null == (_pug_interp = translations.noDataMsg[lang]) ? "" : _pug_interp) + "</span></div></div>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-total\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                (function () {
                    var $$obj = data.dataSections;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 4;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<div" + (pug_attr$2("class", pug_classes$2(["metrics-total__item", "metrics-total__item--".concat(item.id, " ").concat(item.months && item.months.length > 0 ? defaultSelected(index) : '')], [false, true]), false, false) + pug_attr$2("title", "Total ".concat(item.title), true, false)) + ">";
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + pug_attr$2("class", pug_classes$2(["metric-icon-fill", "".concat(defaultSelected(index), " metric-icon-fill--").concat(item.id, " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : '')], [false, true]), false, false) + ">";
                            pug_debug_line = 6;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp) + "</span>";
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + (" class=\"metrics-total__item-text\"" + pug_attr$2("data-count", item.total ? item.total.toLocaleString(navigator.language) : '0', true, false)) + ">";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = item.total ? item.total.toLocaleString(navigator.language) : '0') ? "" : _pug_interp) + "</span></div>";
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 4;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<div" + (pug_attr$2("class", pug_classes$2(["metrics-total__item", "metrics-total__item--".concat(item.id, " ").concat(item.months && item.months.length > 0 ? defaultSelected(index) : '')], [false, true]), false, false) + pug_attr$2("title", "Total ".concat(item.title), true, false)) + ">";
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + pug_attr$2("class", pug_classes$2(["metric-icon-fill", "".concat(defaultSelected(index), " metric-icon-fill--").concat(item.id, " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : '')], [false, true]), false, false) + ">";
                            pug_debug_line = 6;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : _pug_interp) + "</span>";
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + (" class=\"metrics-total__item-text\"" + pug_attr$2("data-count", item.total ? item.total.toLocaleString(navigator.language) : '0', true, false)) + ">";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (_pug_interp = item.total ? item.total.toLocaleString(navigator.language) : '0') ? "" : _pug_interp) + "</span></div>";
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</div>";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                var isfirstNDaysData,
                    isSixMonthData = false,
                    isTwelveMonthData = false,
                    defaultMetrics = [],
                    firstNDaysVal = data['First-N-Days'];
                test = 'none', convertedDefaultDisplayedGraph = data.defaultDisplayedGraph === 'last12Months' ? 'last12' : data.defaultDisplayedGraph === 'last6Months' ? 'last6' : data.defaultDisplayedGraph === 'firstNDays' ? 'firstNDays' : 'total', tabsList = {
                    'total': {
                        'shown': true,
                        'isDefaultTab': false
                    },
                    'last12': {
                        'shown': false,
                        'isDefaultTab': false
                    },
                    'last6': {
                        'shown': false,
                        'isDefaultTab': false
                    },
                    'firstNDays': {
                        'shown': false,
                        'isDefaultTab': false
                    }
                };
                firstTabValue = "";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-tabs-tmpl.pug";
                var mainCLasses = 'metrics-tabs';
                pug_debug_line = 21;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getDefaultMetrics"] = _pug_interp = function pug_interp() {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 22;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = data.dataSections;
                        if ('number' == typeof $$obj.length) {
                            for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                                var item = $$obj[index];
                                pug_debug_line = 23;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                item.displayDefault && defaultMetrics.push(item.id);
                            }
                        } else {
                            var $$l = 0;
                            for (var index in $$obj) {
                                $$l++;
                                var item = $$obj[index];
                                pug_debug_line = 23;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                item.displayDefault && defaultMetrics.push(item.id);
                            }
                        }
                    }).call(this);
                };
                pug_debug_line = 25;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getMonthsData"] = _pug_interp = function pug_interp() {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 26;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = data.dataSections;
                        if ('number' == typeof $$obj.length) {
                            for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                                var item = $$obj[index];
                                pug_debug_line = 27;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isSixMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 28;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isSixMonthData = item && item.months && item.months.length >= 6;
                                    if (isSixMonthData) tabsList.last6.shown = true;
                                }
                                pug_debug_line = 32;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (isSixMonthData && !isTwelveMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 33;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isTwelveMonthData = item && item.months && item.months.length >= 12;
                                    if (isTwelveMonthData) tabsList.last12.shown = true;
                                }
                                pug_debug_line = 37;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isfirstNDaysData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 38;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isfirstNDaysData = item && item.firstNDays && item.firstNDays.length > 1;
                                    if (isfirstNDaysData) tabsList.firstNDays.shown = true;
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var index in $$obj) {
                                $$l++;
                                var item = $$obj[index];
                                pug_debug_line = 27;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isSixMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 28;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isSixMonthData = item && item.months && item.months.length >= 6;
                                    if (isSixMonthData) tabsList.last6.shown = true;
                                }
                                pug_debug_line = 32;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (isSixMonthData && !isTwelveMonthData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 33;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isTwelveMonthData = item && item.months && item.months.length >= 12;
                                    if (isTwelveMonthData) tabsList.last12.shown = true;
                                }
                                pug_debug_line = 37;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (!isfirstNDaysData && (!defaultMetrics.length || defaultMetrics.includes(item.id))) {
                                    pug_debug_line = 38;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    isfirstNDaysData = item && item.firstNDays && item.firstNDays.length > 1;
                                    if (isfirstNDaysData) tabsList.firstNDays.shown = true;
                                }
                            }
                        }
                    }).call(this);
                    pug_debug_line = 41;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    test = tabsList[convertedDefaultDisplayedGraph] && tabsList[convertedDefaultDisplayedGraph].shown === true;
                    if (tabsList[convertedDefaultDisplayedGraph] && tabsList[convertedDefaultDisplayedGraph].shown === true) {
                        tabsList[convertedDefaultDisplayedGraph].isDefaultTab = true;
                    } else if (tabsList.last6.shown === true) {
                        tabsList.last6.isDefaultTab = true;
                    } else if (tabsList.firstNDays.shown === true) {
                        tabsList.firstNDays.isDefaultTab = true;
                    } else {
                        // total is always shown
                        tabsList.total.isDefaultTab = true;
                    }
                };
                pug_debug_line = 54;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_debug_line = 65;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["list"] = _pug_interp = function pug_interp(isShortMonthName) {
                    var block = this && this.block,
                        attributes = this && this.attributes || {};
                    pug_debug_line = 66;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                    (function () {
                        var $$obj = translations.periods[lang];
                        if ('number' == typeof $$obj.length) {
                            for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
                                var tab = $$obj[key];
                                pug_debug_line = 67;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var shortMonthName = tab.substring(tab.indexOf(' ') + 1);
                                pug_debug_line = 68;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var NDays = null;
                                pug_debug_line = 70;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (key === 'firstNDays') {
                                    pug_debug_line = 71;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    tab = tab.replace('{{N}}', firstNDaysVal);
                                    pug_debug_line = 72;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    NDays = firstNDaysVal;
                                }
                                pug_debug_line = 74;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (tabsList[key].shown === true) {
                                    pug_debug_line = 75;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<li" + (" class=\"metrics-tabs__item\"" + pug_attr$2("data-JS", "AY " + test, true, false)) + ">";
                                    pug_debug_line = 76;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<a" + (pug_attr$2("class", pug_classes$2(["metrics-tabs__item-link", tabsList[key].isDefaultTab === true ? 'metrics-selected--js' : ''], [false, true]), false, false) + " role=\"button\" href=\"#\"" + pug_attr$2("data-title", key, true, false) + pug_attr$2("data-n-days", NDays, true, false)) + ">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"tab-text\">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = isShortMonthName && (key === 'last6' || key === 'last12') ? shortMonthName : tab) ? "" : _pug_interp) + "</span></a></li>";
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var key in $$obj) {
                                $$l++;
                                var tab = $$obj[key];
                                pug_debug_line = 67;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var _shortMonthName = tab.substring(tab.indexOf(' ') + 1);
                                pug_debug_line = 68;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                var NDays = null;
                                pug_debug_line = 70;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (key === 'firstNDays') {
                                    pug_debug_line = 71;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    tab = tab.replace('{{N}}', firstNDaysVal);
                                    pug_debug_line = 72;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    NDays = firstNDaysVal;
                                }
                                pug_debug_line = 74;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                if (tabsList[key].shown === true) {
                                    pug_debug_line = 75;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<li" + (" class=\"metrics-tabs__item\"" + pug_attr$2("data-JS", "AY " + test, true, false)) + ">";
                                    pug_debug_line = 76;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<a" + (pug_attr$2("class", pug_classes$2(["metrics-tabs__item-link", tabsList[key].isDefaultTab === true ? 'metrics-selected--js' : ''], [false, true]), false, false) + " role=\"button\" href=\"#\"" + pug_attr$2("data-title", key, true, false) + pug_attr$2("data-n-days", NDays, true, false)) + ">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + "<span class=\"tab-text\">";
                                    pug_debug_line = 77;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                                    pug_html = pug_html + (null == (_pug_interp = isShortMonthName && (key === 'last6' || key === 'last12') ? _shortMonthName : tab) ? "" : _pug_interp) + "</span></a></li>";
                                }
                            }
                        }
                    }).call(this);
                };
                pug_debug_line = 79;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getDefaultMetrics"]();
                pug_debug_line = 80;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_mixins["getMonthsData"]();
                pug_debug_line = 83;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/tabs/templates/tabs-tmpl.pug";
                pug_html = pug_html + "<div" + pug_attr$2("class", pug_classes$2([mainCLasses], [true]), false, false) + ">";
                pug_debug_line = 6;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-tabs-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-tabs__list-container\">";
                pug_debug_line = 7;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-tabs-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-rlist metrics-tabs__list\">";
                pug_debug_line = 8;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/sidebar-metric/templates/extended/ext-tabs-tmpl.pug";
                pug_mixins["list"](true);
                pug_html = pug_html + "</ul></div></div></div></div>";
            }).call(this, "convertedDefaultDisplayedGraph" in locals_for_with ? locals_for_with.convertedDefaultDisplayedGraph : typeof convertedDefaultDisplayedGraph !== "undefined" ? convertedDefaultDisplayedGraph : undefined, "data" in locals_for_with ? locals_for_with.data : typeof data !== "undefined" ? data : undefined, "document" in locals_for_with ? locals_for_with.document : typeof document !== "undefined" ? document : undefined, "firstTabValue" in locals_for_with ? locals_for_with.firstTabValue : typeof firstTabValue !== "undefined" ? firstTabValue : undefined, "navigator" in locals_for_with ? locals_for_with.navigator : typeof navigator !== "undefined" ? navigator : undefined, "tabsList" in locals_for_with ? locals_for_with.tabsList : typeof tabsList !== "undefined" ? tabsList : undefined, "test" in locals_for_with ? locals_for_with.test : typeof test !== "undefined" ? test : undefined);
        } catch (err) {
            pug_rethrow$2(err, pug_debug_filename, pug_debug_line);
        }
        return pug_html;
    }

    function pug_attr$3(t, e, n, r) {
        if (!1 === e || null == e || !e && ("class" === t || "style" === t)) return "";
        if (!0 === e) return " " + (r ? t : t + '="' + t + '"');
        var f = _typeof(e);
        return "object" !== f && "function" !== f || "function" != typeof e.toJSON || (e = e.toJSON()), "string" == typeof e || (e = JSON.stringify(e), n || -1 === e.indexOf('"')) ? (n && (e = pug_escape$3(e)), " " + t + '="' + e + '"') : " " + t + "='" + e.replace(/'/g, "&#39;") + "'";
    }
    function pug_classes$3(s, r) {
        return Array.isArray(s) ? pug_classes_array$3(s, r) : s && "object" == _typeof(s) ? pug_classes_object$3(s) : s || "";
    }
    function pug_classes_array$3(r, a) {
        for (var s, e = "", u = "", c = Array.isArray(a), g = 0; g < r.length; g++) (s = pug_classes$3(r[g])) && (c && a[g] && (s = pug_escape$3(s)), e = e + u + s, u = " ");
        return e;
    }
    function pug_classes_object$3(r) {
        var a = "",
            n = "";
        for (var o in r) o && r[o] && pug_has_own_property$3.call(r, o) && (a = a + n + o, n = " ");
        return a;
    }
    function pug_escape$3(e) {
        var a = "" + e,
            t = pug_match_html$3.exec(a);
        if (!t) return e;
        var r,
            c,
            n,
            s = "";
        for (r = t.index, c = 0; r < a.length; r++) {
            switch (a.charCodeAt(r)) {
                case 34:
                    n = "&quot;";
                    break;
                case 38:
                    n = "&amp;";
                    break;
                case 60:
                    n = "&lt;";
                    break;
                case 62:
                    n = "&gt;";
                    break;
                default:
                    continue;
            }
            c !== r && (s += a.substring(c, r)), c = r + 1, s += n;
        }
        return c !== r ? s + a.substring(c, r) : s;
    }
    var pug_has_own_property$3 = Object.prototype.hasOwnProperty;
    var pug_match_html$3 = /["&<>]/;
    function pug_rethrow$3(n, e, r, t) {
        if (!(n instanceof Error)) throw n;
        if (!("undefined" == typeof window && e || t)) throw n.message += " on line " + r, n;
        try {
            t = t || require("fs").readFileSync(e, "utf8");
        } catch (e) {
            pug_rethrow$3(n, null, r);
        }
        var i = 3,
            a = t.split("\n"),
            o = Math.max(r - i, 0),
            h = Math.min(a.length, r + i),
            i = a.slice(o, h).map(function (n, e) {
                var t = e + o + 1;
                return (t == r ? "  > " : "    ") + t + "| " + n;
            }).join("\n");
        throw n.path = e, n.message = (e || "Pug") + ":" + r + "\n" + i + "\n\n" + n.message, n;
    }
    function mentionListTemplate (locals, jade) {
        var pug_html = "",
            pug_interp;
        var pug_debug_filename, pug_debug_line;
        try {
            var locals_for_with = locals || {};
            (function (Math, data, navigator, tableHead) {
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/variables/pug/icons.pug";
                var icons = {
                    download: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--download"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                    downloads: '<svg aria-hidden="true" viewBox="-2 0 14 14" class="metrics-icon metrics-icon--downloads"><path d="M10 5.5H7v-4H3v4H0l5 5zm-10 6v1h10v-1z"/></svg>',
                    citation: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citation"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                    citations: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--citations"><path d="M2.3 11h2l2-3V3h-5v5h3zm6.4 0h2l2-3V3h-5v5h3z"/></svg>',
                    views: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--views"><path d="M7 2.27a7.56 7.56 0 00-7 4.76 7.56 7.56 0 0014 0 7.56 7.56 0 00-7-4.76zm0 7.93a3.17 3.17 0 110-6.35 3.17 3.17 0 010 6.35zm0-5.04A1.87 1.87 0 107 8.9a1.87 1.87 0 000-3.73z"/></svg>',
                    facebook: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--facebook"><path d="M.84 0a.8.8 0 00-.8.8v12.4c0 .44.36.8.8.8h6.78V8.61H5.68v-2.1h1.76v-1.6c0-1.75 1.14-2.89 2.82-2.89l1.58.1v1.93H10.7c-.88 0-.97.35-.97.96v1.41h2.1l-.43 2.11H9.64V14h3.52a.8.8 0 00.8-.8V.8a.8.8 0 00-.8-.8z"/></svg>',
                    twitter: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--twitter""><path d="M12.28 4.57v.35a10.3 10.3 0 01-2 5.67 6.2 6.2 0 01-2.45 2c-1.05.62-2.1.7-3.32.7A6.98 6.98 0 01.5 12.08h.7c1.22 0 2.35-.52 3.4-1.4a2.62 2.62 0 01-2.53-2h.52c.27 0 .53 0 .7-.17-.7 0-1.22-.35-1.66-.88a3.07 3.07 0 01-.6-1.83c.34.18.78.26 1.21.26A2.97 2.97 0 01.94 3.7c0-.61.08-1.05.35-1.49.7.88 1.48 1.66 2.53 2.19a6.1 6.1 0 003.14.87v-.7c0-.87.26-1.48.78-2.1.53-.52 1.05-.87 1.75-.87s1.4.35 1.92.88c.7-.1 1.13-.35 1.74-.7a2.62 2.62 0 01-1.22 1.74l1.57-.43a5.34 5.34 0 01-1.3 1.48z"/></svg>',
                    stackexchange: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--stackexchange"><path d="M1.8 9.4h10.4v.6c0 1-.7 1.7-1.6 1.7H10L7.9 14v-2.3H3.4c-.9 0-1.6-.7-1.6-1.7zm0-.6h10.4V6.7H1.8zm0-2.7h10.4V3.9H1.8zM10.6 1H3.4c-.9 0-1.6.8-1.6 1.7v.6h10.4v-.6c0-1-.7-1.7-1.6-1.7z"/></svg>',
                    blog: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--blog"><path d="M11.8 1.4H2.2c-.7 0-1.2.5-1.2 1.1v10.9L3.4 11h8.4c.7 0 1.2-.5 1.2-1.3V2.5c0-.6-.5-1.1-1.2-1.1zm-1.2 7.2H3.4V7.4h7.2zm0-1.8H3.4V5.5h7.2zm0-1.8H3.4V3.7h7.2z"/></svg>',
                    default: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--default"><path d="M2.3 3.5h10.5V2.3H2.3c-.6 0-1.1.6-1.1 1.2v6.4H0v1.8h8.2V9.9H2.3zm11.1 1.2H10c-.3 0-.6.2-.6.5v5.9c0 .3.3.6.6.6h3.5c.3 0 .6-.3.6-.6V5.3c0-.4-.3-.6-.6-.6zm-.6 5.2h-2.3V6h2.3z"/></svg>',
                    newsfeed: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--newsfeed"><path d="M9.8 0H2.2C1.5 0 1 .6 1 1.3v8.9h1.2v-9h7.6zm2 2.6h-7c-.8 0-1.3.5-1.3 1.2v9c0 .7.5 1.2 1.3 1.2h7c.7 0 1.2-.6 1.2-1.3V3.8c0-.7-.5-1.2-1.3-1.2zm0 10.1h-7V3.8h7z"/></svg>',
                    wikipedia: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wikipedia"><path d="M7 0a7 7 0 100 14A7 7 0 007 0zm4.9 4.2H9.8c-.3-.8-.5-1.7-1-2.5 1.3.4 2.4 1.3 3 2.5zM7 1.4c.6.9 1 1.7 1.3 2.8H5.7c.3-1 .7-2 1.3-2.8zm-5.5 7a5.7 5.7 0 010-2.8H4a11.6 11.6 0 000 2.8zm.6 1.4h2.1c.3.8.5 1.7 1 2.5a5.7 5.7 0 01-3-2.5zm2.1-5.6h-2a5.6 5.6 0 013-2.5c-.5.8-.7 1.7-1 2.5zM7 12.7c-.6-.9-1-1.9-1.3-3h2.6c-.3 1.1-.8 2-1.3 2.9zm1.7-4.3H5.3a9.8 9.8 0 010-2.8h3.4a9.8 9.8 0 010 2.8zm.2 4l.9-2.6h2a5.6 5.6 0 01-3 2.5zm1.1-4a11.6 11.6 0 000-2.8h2.4a5.7 5.7 0 010 2.8z"/></svg>',
                    wordpressdotcom: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--wordpressdotcom"><path d="M1 7c0 2.4 1.3 4.5 3.4 5.5l-3-8A6 6 0 001 6.9zm6 6c.7 0 1.4 0 2-.3L7 7.5l-1.8 5.3c.5.2 1 .3 1.7.3zm.9-8.9l2.1 6.6.7-2 .4-2c0-.6-.2-1.2-.5-1.6-.3-.6-.6-1-.6-1.5s.4-1 1-1a6 6 0 00-9 1H3.8c.4 0 .4.4 0 .5h-.6l2.2 6.7 1.3-4-1-2.6h-.6c-.3 0-.2-.5 0-.5h3.3c.3 0 .4.4 0 .4l-.6.1zm2.1 8.1c1.9-1 3-3 3-5.2 0-1-.2-2-.7-3 .1 1 0 2-.4 2.9l-1.8 5.4zM7 14A7 7 0 117 0a7 7 0 010 14z"/></svg>',
                    reddit: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--reddit"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>',
                    redditlinks: '<svg aria-hidden="true" viewBox="0 0 14 14" class="metrics-icon metrics-icon--redditlinks"><path d="M13.8 6c0-.8-.7-1.4-1.6-1.4-.3 0-.7.2-1 .4-1-.8-2.5-1.2-3.8-1.2L8 .7l2.1.4c0 .6.5 1 1.1 1 .5 0 1-.7.9-1.2 0-.6-.5-.9-1.1-.8a1 1 0 00-.8.4L8 0l-.4.3L7 3.7c-1.5 0-2.9.5-4 1.2-.6-.5-1.6-.5-2.1 0a1.4 1.4 0 00.4 2.5v.5c0 2.2 2.7 4 5.8 4 3.3 0 6-1.8 6-4v-.7c.4-.2.8-.7.8-1.3zM3.7 7c0-.5.4-1 1-1s1 .5 1 1-.4 1-1 1a1 1 0 01-1-1zm5.9 2.7c-.8.5-1.7.9-2.6.9-.8 0-1.7-.4-2.5-.9a.3.3 0 010-.4H5a3.4 3.4 0 002 .7 3.4 3.4 0 002.1-.6c.1-.2.4-.2.5 0v.3zM9.4 8a1 1 0 01-1-1c0-.5.4-1 1-1 .5 0 1 .5 1 1s-.4 1-1 1z"/></svg>'
                };
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/mention-list.pug";
                var defaultSelected = function defaultSelected(i) {
                    return i === 0 ? "metrics-selected--js" : '';
                };
                pug_debug_line = 8;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/mention-list.pug";
                pug_html = pug_html + "<div class=\"mention-list full-metrics\">";
                pug_debug_line = 9;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/mention-list.pug";
                pug_html = pug_html + "<div class=\"mention-list__loading\"></div>";
                pug_debug_line = 10;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/mention-list.pug";
                pug_html = pug_html + "<div class=\"metrics-header\">";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-title\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_html = pug_html + "<span class=\"metrics-title__text\">";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_debug_line = 5;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/title/templates/title-tmpl.pug";
                pug_html = pug_html + (null == (pug_interp = data.widgetTitle ? data.widgetTitle : 'Metrics') ? "" : pug_interp) + "</span></div>";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/nav/templates/nav-tmpl.pug";
                var navData = data.dataSections;
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                pug_html = pug_html + "<ul class=\"metrics-nav metrics-rlist\">";
                pug_debug_line = 4;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                (function () {
                    var $$obj = navData;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                            if (item.total >= 1) {
                                pug_debug_line = 6;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                pug_debug_line = 7;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<a" + (pug_attr$3("class", pug_classes$3(["metrics-nav__item-link", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color) : "", " ").concat(item.displayDefault ? 'metrics-selected--js' : '')], [false, true]), false, false) + " href=\"#\"" + pug_attr$3("title", item.title, true, false) + pug_attr$3("data-title", item.id, true, false)) + ">";
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = item.title) ? "" : pug_interp) + "</span></a></li>";
                            } else {
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<li" + pug_attr$3("class", pug_classes$3(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                pug_debug_line = 12;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<span" + (pug_attr$3("class", pug_classes$3(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(icons[item.id] ? '' : "metrics-nav__item-link--default-".concat(index))], [false, false, true]), false, false) + pug_attr$3("data-title", item.id, true, false) + " title=\"This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later\"") + ">";
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = item.title) ? "" : pug_interp) + "</span></span></li>";
                            }
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                            if (item.total >= 1) {
                                pug_debug_line = 6;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<li class=\"metrics-nav__item\">";
                                pug_debug_line = 7;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<a" + (pug_attr$3("class", pug_classes$3(["metrics-nav__item-link", "metrics-nav__item-link--".concat(item.id, " ").concat(item.color ? "metrics-nav__item-link--".concat(item.color) : "", " ").concat(item.displayDefault ? 'metrics-selected--js' : '')], [false, true]), false, false) + " href=\"#\"" + pug_attr$3("title", item.title, true, false) + pug_attr$3("data-title", item.id, true, false)) + ">";
                                pug_debug_line = 8;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 9;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = item.title) ? "" : pug_interp) + "</span></a></li>";
                            } else {
                                pug_debug_line = 11;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<li" + pug_attr$3("class", pug_classes$3(["metrics-nav__item", "metrics-nav__item--" + item.id], [false, true]), false, false) + ">";
                                pug_debug_line = 12;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<span" + (pug_attr$3("class", pug_classes$3(["metrics-nav__item-link", "metrics-nav__item-link--disabled", "metrics-nav__item-link--".concat(item.id, " ").concat(icons[item.id] ? '' : "metrics-nav__item-link--default-".concat(index))], [false, false, true]), false, false) + pug_attr$3("data-title", item.id, true, false) + " title=\"This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later\"") + ">";
                                pug_debug_line = 13;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp);
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + "<span class=\"nav-text\">";
                                pug_debug_line = 14;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-nav-tmpl.pug";
                                pug_html = pug_html + (null == (pug_interp = item.title) ? "" : pug_interp) + "</span></span></li>";
                            }
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</ul></div>";
                pug_debug_line = 14;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/mention-list.pug";
                pug_html = pug_html + "<div class=\"mention-list__content-section\">";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                pug_debug_line = 2;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-total\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                (function () {
                    var $$obj = data.dataSections;
                    if ('number' == typeof $$obj.length) {
                        for (var index = 0, $$l = $$obj.length; index < $$l; index++) {
                            var item = $$obj[index];
                            pug_debug_line = 4;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<div" + (pug_attr$3("class", pug_classes$3(["metrics-total__item", "metrics-total__item--".concat(item.id, " ").concat(item.months && item.months.length > 0 ? defaultSelected(index) : '')], [false, true]), false, false) + pug_attr$3("title", "Total ".concat(item.title), true, false)) + ">";
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + pug_attr$3("class", pug_classes$3(["metric-icon-fill", "".concat(defaultSelected(index), " metric-icon-fill--").concat(item.id, " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : '')], [false, true]), false, false) + ">";
                            pug_debug_line = 6;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp) + "</span>";
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + (" class=\"metrics-total__item-text\"" + pug_attr$3("data-count", item.total ? item.total.toLocaleString(navigator.language) : '0', true, false)) + ">";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (pug_interp = item.total ? item.total.toLocaleString(navigator.language) : '0') ? "" : pug_interp) + "</span></div>";
                        }
                    } else {
                        var $$l = 0;
                        for (var index in $$obj) {
                            $$l++;
                            var item = $$obj[index];
                            pug_debug_line = 4;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<div" + (pug_attr$3("class", pug_classes$3(["metrics-total__item", "metrics-total__item--".concat(item.id, " ").concat(item.months && item.months.length > 0 ? defaultSelected(index) : '')], [false, true]), false, false) + pug_attr$3("title", "Total ".concat(item.title), true, false)) + ">";
                            pug_debug_line = 5;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + pug_attr$3("class", pug_classes$3(["metric-icon-fill", "".concat(defaultSelected(index), " metric-icon-fill--").concat(item.id, " ").concat(item.color ? "metric-icon-fill--".concat(item.color) : '')], [false, true]), false, false) + ">";
                            pug_debug_line = 6;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (pug_interp = icons[item.id] ? icons[item.id] : icons.default) ? "" : pug_interp) + "</span>";
                            pug_debug_line = 7;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + "<span" + (" class=\"metrics-total__item-text\"" + pug_attr$3("data-count", item.total ? item.total.toLocaleString(navigator.language) : '0', true, false)) + ">";
                            pug_debug_line = 8;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/total/templates/total-tmpl.pug";
                            pug_html = pug_html + (null == (pug_interp = item.total ? item.total.toLocaleString(navigator.language) : '0') ? "" : pug_interp) + "</span></div>";
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</div>";
                pug_debug_line = 16;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/mention-list.pug";
                pug_html = pug_html + "<div class=\"mention-list__references\">";
                pug_debug_line = 3;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/widgets/mention-list/templates/extended/ext-table-tmpl.pug";
                tableHead = [{
                    content: "Source"
                }, {
                    content: "Post"
                }, {
                    content: "Author"
                }, {
                    content: "Date",
                    "sort": true
                } /*, { content: "Performance"}*/];
                pug_debug_line = 5;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                pug_html = pug_html + "<table class=\"metrics-table\">";
                pug_debug_line = 7;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                pug_html = pug_html + "<thead>";
                pug_debug_line = 8;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                pug_html = pug_html + "<tr>";
                pug_debug_line = 9;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                (function () {
                    var $$obj = tableHead;
                    if ('number' == typeof $$obj.length) {
                        for (var key = 0, $$l = $$obj.length; key < $$l; key++) {
                            var th = $$obj[key];
                            pug_debug_line = 10;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                            pug_html = pug_html + "<th" + pug_attr$3("data-id", key, true, false) + ">";
                            pug_debug_line = 11;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                            pug_html = pug_html + "<span" + (pug_attr$3("class", pug_classes$3([th.sort ? 'metrics-table__sort' : ''], [true]), false, false) + pug_attr$3("data-sort", th.sort ? 'desc' : '', true, false)) + ">";
                            pug_debug_line = 11;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                            pug_html = pug_html + (null == (pug_interp = th.content) ? "" : pug_interp) + "</span></th>";
                        }
                    } else {
                        var $$l = 0;
                        for (var key in $$obj) {
                            $$l++;
                            var th = $$obj[key];
                            pug_debug_line = 10;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                            pug_html = pug_html + "<th" + pug_attr$3("data-id", key, true, false) + ">";
                            pug_debug_line = 11;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                            pug_html = pug_html + "<span" + (pug_attr$3("class", pug_classes$3([th.sort ? 'metrics-table__sort' : ''], [true]), false, false) + pug_attr$3("data-sort", th.sort ? 'desc' : '', true, false)) + ">";
                            pug_debug_line = 11;
                            pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                            pug_html = pug_html + (null == (pug_interp = th.content) ? "" : pug_interp) + "</span></th>";
                        }
                    }
                }).call(this);
                pug_html = pug_html + "</tr></thead>";
                pug_debug_line = 13;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/table/templates/table-tmpl.pug";
                pug_html = pug_html + "<tbody></tbody></table>";
                pug_debug_line = 1;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                var totalCount = 0,
                    totalPages = 0,
                    displayDefault = false;
                {
                    pug_debug_line = 2;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                    (function () {
                        var $$obj = data.dataSections;
                        if ('number' == typeof $$obj.length) {
                            for (var pug_index3 = 0, $$l = $$obj.length; pug_index3 < $$l; pug_index3++) {
                                var section = $$obj[pug_index3];
                                pug_debug_line = 3;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                if (section.displayDefault) {
                                    pug_debug_line = 4;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                    totalCount += section.total;
                                    pug_debug_line = 5;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                    totalPages = Math.ceil(totalCount / data.pageSize);
                                    pug_debug_line = 6;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                    displayDefault = true;
                                }
                            }
                        } else {
                            var $$l = 0;
                            for (var pug_index3 in $$obj) {
                                $$l++;
                                var section = $$obj[pug_index3];
                                pug_debug_line = 3;
                                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                if (section.displayDefault) {
                                    pug_debug_line = 4;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                    totalCount += section.total;
                                    pug_debug_line = 5;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                    totalPages = Math.ceil(totalCount / data.pageSize);
                                    pug_debug_line = 6;
                                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                                    displayDefault = true;
                                }
                            }
                        }
                    }).call(this);
                }
                pug_debug_line = 7;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                if (!displayDefault) {
                    pug_debug_line = 8;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                    data.dataSections[0].displayDefault = true;
                    pug_debug_line = 9;
                    pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                    totalPages = Math.ceil(data.dataSections[0].total / data.pageSize);
                }
                pug_debug_line = 11;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_debug_line = 12;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-pagination\">";
                pug_debug_line = 13;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_html = pug_html + "<span class=\"metrics-pagination__btn--prev metrics-hide--js\">";
                pug_debug_line = 14;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_html = pug_html + "<a title=\"Previous\" href=\"#prev\"></a></span>";
                pug_debug_line = 15;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_html = pug_html + "<div class=\"metrics-pagination__list\"></div>";
                pug_debug_line = 16;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_html = pug_html + "<span" + pug_attr$3("class", pug_classes$3(["metrics-pagination__btn--next", "".concat(totalPages <= 1 ? 'metrics-hide--js' : '')], [false, true]), false, false) + ">";
                pug_debug_line = 17;
                pug_debug_filename = "/home/rzzayed/source/github/article-metrics/src/components/pagination/templates/pagination-tmpl.pug";
                pug_html = pug_html + "<a title=\"Next\" href=\"#next\"></a></span></div></div></div></div>";
            }).call(this, "Math" in locals_for_with ? locals_for_with.Math : typeof Math !== "undefined" ? Math : undefined, "data" in locals_for_with ? locals_for_with.data : typeof data !== "undefined" ? data : undefined, "navigator" in locals_for_with ? locals_for_with.navigator : typeof navigator !== "undefined" ? navigator : undefined, "tableHead" in locals_for_with ? locals_for_with.tableHead : typeof tableHead !== "undefined" ? tableHead : undefined);
        } catch (err) {
            pug_rethrow$3(err, pug_debug_filename, pug_debug_line);
        }
        return pug_html;
    }

    function ascending (a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function bisector (compare) {
        if (compare.length === 1) compare = ascendingComparator(compare);
        return {
            left: function (a, x, lo, hi) {
                if (lo == null) lo = 0;
                if (hi == null) hi = a.length;
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) < 0) lo = mid + 1;else hi = mid;
                }
                return lo;
            },
            right: function (a, x, lo, hi) {
                if (lo == null) lo = 0;
                if (hi == null) hi = a.length;
                while (lo < hi) {
                    var mid = lo + hi >>> 1;
                    if (compare(a[mid], x) > 0) hi = mid;else lo = mid + 1;
                }
                return lo;
            }
        };
    }
    function ascendingComparator(f) {
        return function (d, x) {
            return ascending(f(d), x);
        };
    }

    var ascendingBisect = bisector(ascending);
    var bisectRight = ascendingBisect.right;
    var bisectLeft = ascendingBisect.left;

    function pairs (array, f) {
        if (f == null) f = pair;
        var i = 0,
            n = array.length - 1,
            p = array[0],
            pairs = new Array(n < 0 ? 0 : n);
        while (i < n) pairs[i] = f(p, p = array[++i]);
        return pairs;
    }
    function pair(a, b) {
        return [a, b];
    }

    function cross (values0, values1, reduce) {
        var n0 = values0.length,
            n1 = values1.length,
            values = new Array(n0 * n1),
            i0,
            i1,
            i,
            value0;
        if (reduce == null) reduce = pair;
        for (i0 = i = 0; i0 < n0; ++i0) {
            for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
                values[i] = reduce(value0, values1[i1]);
            }
        }
        return values;
    }

    function descending (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function number (x) {
        return x === null ? NaN : +x;
    }

    function variance (values, valueof) {
        var n = values.length,
            m = 0,
            i = -1,
            mean = 0,
            value,
            delta,
            sum = 0;
        if (valueof == null) {
            while (++i < n) {
                if (!isNaN(value = number(values[i]))) {
                    delta = value - mean;
                    mean += delta / ++m;
                    sum += delta * (value - mean);
                }
            }
        } else {
            while (++i < n) {
                if (!isNaN(value = number(valueof(values[i], i, values)))) {
                    delta = value - mean;
                    mean += delta / ++m;
                    sum += delta * (value - mean);
                }
            }
        }
        if (m > 1) return sum / (m - 1);
    }

    function deviation (array, f) {
        var v = variance(array, f);
        return v ? Math.sqrt(v) : v;
    }

    function extent (values, valueof) {
        var n = values.length,
            i = -1,
            value,
            min,
            max;
        if (valueof == null) {
            while (++i < n) {
                // Find the first comparable value.
                if ((value = values[i]) != null && value >= value) {
                    min = max = value;
                    while (++i < n) {
                        // Compare the remaining values.
                        if ((value = values[i]) != null) {
                            if (min > value) min = value;
                            if (max < value) max = value;
                        }
                    }
                }
            }
        } else {
            while (++i < n) {
                // Find the first comparable value.
                if ((value = valueof(values[i], i, values)) != null && value >= value) {
                    min = max = value;
                    while (++i < n) {
                        // Compare the remaining values.
                        if ((value = valueof(values[i], i, values)) != null) {
                            if (min > value) min = value;
                            if (max < value) max = value;
                        }
                    }
                }
            }
        }
        return [min, max];
    }

    var array = Array.prototype;
    var slice = array.slice;
    var map = array.map;

    function constant (x) {
        return function () {
            return x;
        };
    }

    function identity (x) {
        return x;
    }

    function sequence (start, stop, step) {
        start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
        var i = -1,
            n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
            range = new Array(n);
        while (++i < n) {
            range[i] = start + i * step;
        }
        return range;
    }

    var e10 = Math.sqrt(50),
        e5 = Math.sqrt(10),
        e2 = Math.sqrt(2);
    function ticks (start, stop, count) {
        var reverse,
            i = -1,
            n,
            ticks,
            step;
        stop = +stop, start = +start, count = +count;
        if (start === stop && count > 0) return [start];
        if (reverse = stop < start) n = start, start = stop, stop = n;
        if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];
        if (step > 0) {
            start = Math.ceil(start / step);
            stop = Math.floor(stop / step);
            ticks = new Array(n = Math.ceil(stop - start + 1));
            while (++i < n) ticks[i] = (start + i) * step;
        } else {
            start = Math.floor(start * step);
            stop = Math.ceil(stop * step);
            ticks = new Array(n = Math.ceil(start - stop + 1));
            while (++i < n) ticks[i] = (start - i) / step;
        }
        if (reverse) ticks.reverse();
        return ticks;
    }
    function tickIncrement(start, stop, count) {
        var step = (stop - start) / Math.max(0, count),
            power = Math.floor(Math.log(step) / Math.LN10),
            error = step / Math.pow(10, power);
        return power >= 0 ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power) : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
    }
    function tickStep(start, stop, count) {
        var step0 = Math.abs(stop - start) / Math.max(0, count),
            step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
            error = step0 / step1;
        if (error >= e10) step1 *= 10;else if (error >= e5) step1 *= 5;else if (error >= e2) step1 *= 2;
        return stop < start ? -step1 : step1;
    }

    function sturges (values) {
        return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
    }

    function histogram () {
        var value = identity,
            domain = extent,
            threshold = sturges;
        function histogram(data) {
            var i,
                n = data.length,
                x,
                values = new Array(n);
            for (i = 0; i < n; ++i) {
                values[i] = value(data[i], i, data);
            }
            var xz = domain(values),
                x0 = xz[0],
                x1 = xz[1],
                tz = threshold(values, x0, x1);

            // Convert number of thresholds into uniform thresholds.
            if (!Array.isArray(tz)) {
                tz = tickStep(x0, x1, tz);
                tz = sequence(Math.ceil(x0 / tz) * tz, x1, tz); // exclusive
            }

            // Remove any thresholds outside the domain.
            var m = tz.length;
            while (tz[0] <= x0) tz.shift(), --m;
            while (tz[m - 1] > x1) tz.pop(), --m;
            var bins = new Array(m + 1),
                bin;

            // Initialize bins.
            for (i = 0; i <= m; ++i) {
                bin = bins[i] = [];
                bin.x0 = i > 0 ? tz[i - 1] : x0;
                bin.x1 = i < m ? tz[i] : x1;
            }

            // Assign data to bins by value, ignoring any outside the domain.
            for (i = 0; i < n; ++i) {
                x = values[i];
                if (x0 <= x && x <= x1) {
                    bins[bisectRight(tz, x, 0, m)].push(data[i]);
                }
            }
            return bins;
        }
        histogram.value = function (_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
        };
        histogram.domain = function (_) {
            return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
        };
        histogram.thresholds = function (_) {
            return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
        };
        return histogram;
    }

    function threshold (values, p, valueof) {
        if (valueof == null) valueof = number;
        if (!(n = values.length)) return;
        if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
        if (p >= 1) return +valueof(values[n - 1], n - 1, values);
        var n,
            i = (n - 1) * p,
            i0 = Math.floor(i),
            value0 = +valueof(values[i0], i0, values),
            value1 = +valueof(values[i0 + 1], i0 + 1, values);
        return value0 + (value1 - value0) * (i - i0);
    }

    function freedmanDiaconis (values, min, max) {
        values = map.call(values, number).sort(ascending);
        return Math.ceil((max - min) / (2 * (threshold(values, 0.75) - threshold(values, 0.25)) * Math.pow(values.length, -1 / 3)));
    }

    function scott (values, min, max) {
        return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
    }

    function max (values, valueof) {
        var n = values.length,
            i = -1,
            value,
            max;
        if (valueof == null) {
            while (++i < n) {
                // Find the first comparable value.
                if ((value = values[i]) != null && value >= value) {
                    max = value;
                    while (++i < n) {
                        // Compare the remaining values.
                        if ((value = values[i]) != null && value > max) {
                            max = value;
                        }
                    }
                }
            }
        } else {
            while (++i < n) {
                // Find the first comparable value.
                if ((value = valueof(values[i], i, values)) != null && value >= value) {
                    max = value;
                    while (++i < n) {
                        // Compare the remaining values.
                        if ((value = valueof(values[i], i, values)) != null && value > max) {
                            max = value;
                        }
                    }
                }
            }
        }
        return max;
    }

    function mean (values, valueof) {
        var n = values.length,
            m = n,
            i = -1,
            value,
            sum = 0;
        if (valueof == null) {
            while (++i < n) {
                if (!isNaN(value = number(values[i]))) sum += value;else --m;
            }
        } else {
            while (++i < n) {
                if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;else --m;
            }
        }
        if (m) return sum / m;
    }

    function median (values, valueof) {
        var n = values.length,
            i = -1,
            value,
            numbers = [];
        if (valueof == null) {
            while (++i < n) {
                if (!isNaN(value = number(values[i]))) {
                    numbers.push(value);
                }
            }
        } else {
            while (++i < n) {
                if (!isNaN(value = number(valueof(values[i], i, values)))) {
                    numbers.push(value);
                }
            }
        }
        return threshold(numbers.sort(ascending), 0.5);
    }

    function merge (arrays) {
        var n = arrays.length,
            m,
            i = -1,
            j = 0,
            merged,
            array;
        while (++i < n) j += arrays[i].length;
        merged = new Array(j);
        while (--n >= 0) {
            array = arrays[n];
            m = array.length;
            while (--m >= 0) {
                merged[--j] = array[m];
            }
        }
        return merged;
    }

    function min (values, valueof) {
        var n = values.length,
            i = -1,
            value,
            min;
        if (valueof == null) {
            while (++i < n) {
                // Find the first comparable value.
                if ((value = values[i]) != null && value >= value) {
                    min = value;
                    while (++i < n) {
                        // Compare the remaining values.
                        if ((value = values[i]) != null && min > value) {
                            min = value;
                        }
                    }
                }
            }
        } else {
            while (++i < n) {
                // Find the first comparable value.
                if ((value = valueof(values[i], i, values)) != null && value >= value) {
                    min = value;
                    while (++i < n) {
                        // Compare the remaining values.
                        if ((value = valueof(values[i], i, values)) != null && min > value) {
                            min = value;
                        }
                    }
                }
            }
        }
        return min;
    }

    function permute (array, indexes) {
        var i = indexes.length,
            permutes = new Array(i);
        while (i--) permutes[i] = array[indexes[i]];
        return permutes;
    }

    function scan (values, compare) {
        if (!(n = values.length)) return;
        var n,
            i = 0,
            j = 0,
            xi,
            xj = values[j];
        if (compare == null) compare = ascending;
        while (++i < n) {
            if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
                xj = xi, j = i;
            }
        }
        if (compare(xj, xj) === 0) return j;
    }

    function shuffle (array, i0, i1) {
        var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
            t,
            i;
        while (m) {
            i = Math.random() * m-- | 0;
            t = array[m + i0];
            array[m + i0] = array[i + i0];
            array[i + i0] = t;
        }
        return array;
    }

    function sum (values, valueof) {
        var n = values.length,
            i = -1,
            value,
            sum = 0;
        if (valueof == null) {
            while (++i < n) {
                if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
            }
        } else {
            while (++i < n) {
                if (value = +valueof(values[i], i, values)) sum += value;
            }
        }
        return sum;
    }

    function transpose (matrix) {
        if (!(n = matrix.length)) return [];
        for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
            for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
                row[j] = matrix[j][i];
            }
        }
        return transpose;
    }
    function length(d) {
        return d.length;
    }

    function zip () {
        return transpose(arguments);
    }

    var slice$1 = Array.prototype.slice;

    function identity$1 (x) {
        return x;
    }

    var top = 1,
        right = 2,
        bottom = 3,
        left = 4,
        epsilon = 1e-6;
    function translateX(x) {
        return "translate(" + (x + 0.5) + ",0)";
    }
    function translateY(y) {
        return "translate(0," + (y + 0.5) + ")";
    }
    function number$1(scale) {
        return function (d) {
            return +scale(d);
        };
    }
    function center(scale) {
        var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
        if (scale.round()) offset = Math.round(offset);
        return function (d) {
            return +scale(d) + offset;
        };
    }
    function entering() {
        return !this.__axis;
    }
    function axis(orient, scale) {
        var tickArguments = [],
            tickValues = null,
            tickFormat = null,
            tickSizeInner = 6,
            tickSizeOuter = 6,
            tickPadding = 3,
            k = orient === top || orient === left ? -1 : 1,
            x = orient === left || orient === right ? "x" : "y",
            transform = orient === top || orient === bottom ? translateX : translateY;
        function axis(context) {
            var values = tickValues == null ? scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain() : tickValues,
                format = tickFormat == null ? scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity$1 : tickFormat,
                spacing = Math.max(tickSizeInner, 0) + tickPadding,
                range = scale.range(),
                range0 = +range[0] + 0.5,
                range1 = +range[range.length - 1] + 0.5,
                position = (scale.bandwidth ? center : number$1)(scale.copy()),
                selection = context.selection ? context.selection() : context,
                path = selection.selectAll(".domain").data([null]),
                tick = selection.selectAll(".tick").data(values, scale).order(),
                tickExit = tick.exit(),
                tickEnter = tick.enter().append("g").attr("class", "tick"),
                line = tick.select("line"),
                text = tick.select("text");
            path = path.merge(path.enter().insert("path", ".tick").attr("class", "domain").attr("stroke", "currentColor"));
            tick = tick.merge(tickEnter);
            line = line.merge(tickEnter.append("line").attr("stroke", "currentColor").attr(x + "2", k * tickSizeInner));
            text = text.merge(tickEnter.append("text").attr("fill", "currentColor").attr(x, k * spacing).attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));
            if (context !== selection) {
                path = path.transition(context);
                tick = tick.transition(context);
                line = line.transition(context);
                text = text.transition(context);
                tickExit = tickExit.transition(context).attr("opacity", epsilon).attr("transform", function (d) {
                    return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform");
                });
                tickEnter.attr("opacity", epsilon).attr("transform", function (d) {
                    var p = this.parentNode.__axis;
                    return transform(p && isFinite(p = p(d)) ? p : position(d));
                });
            }
            tickExit.remove();
            path.attr("d", orient === left || orient == right ? tickSizeOuter ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter : "M0.5," + range0 + "V" + range1 : tickSizeOuter ? "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter : "M" + range0 + ",0.5H" + range1);
            tick.attr("opacity", 1).attr("transform", function (d) {
                return transform(position(d));
            });
            line.attr(x + "2", k * tickSizeInner);
            text.attr(x, k * spacing).text(format);
            selection.filter(entering).attr("fill", "none").attr("font-size", 10).attr("font-family", "sans-serif").attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");
            selection.each(function () {
                this.__axis = position;
            });
        }
        axis.scale = function (_) {
            return arguments.length ? (scale = _, axis) : scale;
        };
        axis.ticks = function () {
            return tickArguments = slice$1.call(arguments), axis;
        };
        axis.tickArguments = function (_) {
            return arguments.length ? (tickArguments = _ == null ? [] : slice$1.call(_), axis) : tickArguments.slice();
        };
        axis.tickValues = function (_) {
            return arguments.length ? (tickValues = _ == null ? null : slice$1.call(_), axis) : tickValues && tickValues.slice();
        };
        axis.tickFormat = function (_) {
            return arguments.length ? (tickFormat = _, axis) : tickFormat;
        };
        axis.tickSize = function (_) {
            return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
        };
        axis.tickSizeInner = function (_) {
            return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
        };
        axis.tickSizeOuter = function (_) {
            return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
        };
        axis.tickPadding = function (_) {
            return arguments.length ? (tickPadding = +_, axis) : tickPadding;
        };
        return axis;
    }
    function axisTop(scale) {
        return axis(top, scale);
    }
    function axisRight(scale) {
        return axis(right, scale);
    }
    function axisBottom(scale) {
        return axis(bottom, scale);
    }
    function axisLeft(scale) {
        return axis(left, scale);
    }

    function linear(t) {
        return +t;
    }

    function quadIn(t) {
        return t * t;
    }
    function quadOut(t) {
        return t * (2 - t);
    }
    function quadInOut(t) {
        return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
    }

    function cubicIn(t) {
        return t * t * t;
    }
    function cubicOut(t) {
        return --t * t * t + 1;
    }
    function cubicInOut(t) {
        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
    }

    var exponent = 3;
    var polyIn = function custom(e) {
        e = +e;
        function polyIn(t) {
            return Math.pow(t, e);
        }
        polyIn.exponent = custom;
        return polyIn;
    }(exponent);
    var polyOut = function custom(e) {
        e = +e;
        function polyOut(t) {
            return 1 - Math.pow(1 - t, e);
        }
        polyOut.exponent = custom;
        return polyOut;
    }(exponent);
    var polyInOut = function custom(e) {
        e = +e;
        function polyInOut(t) {
            return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
        }
        polyInOut.exponent = custom;
        return polyInOut;
    }(exponent);

    var pi = Math.PI,
        halfPi = pi / 2;
    function sinIn(t) {
        return +t === 1 ? 1 : 1 - Math.cos(t * halfPi);
    }
    function sinOut(t) {
        return Math.sin(t * halfPi);
    }
    function sinInOut(t) {
        return (1 - Math.cos(pi * t)) / 2;
    }

    // tpmt is two power minus ten times t scaled to [0,1]
    function tpmt(x) {
        return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494;
    }

    function expIn(t) {
        return tpmt(1 - +t);
    }
    function expOut(t) {
        return 1 - tpmt(t);
    }
    function expInOut(t) {
        return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2;
    }

    function circleIn(t) {
        return 1 - Math.sqrt(1 - t * t);
    }
    function circleOut(t) {
        return Math.sqrt(1 - --t * t);
    }
    function circleInOut(t) {
        return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
    }

    var b1 = 4 / 11,
        b2 = 6 / 11,
        b3 = 8 / 11,
        b4 = 3 / 4,
        b5 = 9 / 11,
        b6 = 10 / 11,
        b7 = 15 / 16,
        b8 = 21 / 22,
        b9 = 63 / 64,
        b0 = 1 / b1 / b1;
    function bounceIn(t) {
        return 1 - bounceOut(1 - t);
    }
    function bounceOut(t) {
        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
    }
    function bounceInOut(t) {
        return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
    }

    var overshoot = 1.70158;
    var backIn = function custom(s) {
        s = +s;
        function backIn(t) {
            return (t = +t) * t * (s * (t - 1) + t);
        }
        backIn.overshoot = custom;
        return backIn;
    }(overshoot);
    var backOut = function custom(s) {
        s = +s;
        function backOut(t) {
            return --t * t * ((t + 1) * s + t) + 1;
        }
        backOut.overshoot = custom;
        return backOut;
    }(overshoot);
    var backInOut = function custom(s) {
        s = +s;
        function backInOut(t) {
            return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
        }
        backInOut.overshoot = custom;
        return backInOut;
    }(overshoot);

    var tau = 2 * Math.PI,
        amplitude = 1,
        period = 0.3;
    var elasticIn = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticIn(t) {
            return a * tpmt(- --t) * Math.sin((s - t) / p);
        }
        elasticIn.amplitude = function (a) {
            return custom(a, p * tau);
        };
        elasticIn.period = function (p) {
            return custom(a, p);
        };
        return elasticIn;
    }(amplitude, period);
    var elasticOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticOut(t) {
            return 1 - a * tpmt(t = +t) * Math.sin((t + s) / p);
        }
        elasticOut.amplitude = function (a) {
            return custom(a, p * tau);
        };
        elasticOut.period = function (p) {
            return custom(a, p);
        };
        return elasticOut;
    }(amplitude, period);
    var elasticInOut = function custom(a, p) {
        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);
        function elasticInOut(t) {
            return ((t = t * 2 - 1) < 0 ? a * tpmt(-t) * Math.sin((s - t) / p) : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2;
        }
        elasticInOut.amplitude = function (a) {
            return custom(a, p * tau);
        };
        elasticInOut.period = function (p) {
            return custom(a, p);
        };
        return elasticInOut;
    }(amplitude, period);

    function formatDecimal (x) {
        return Math.abs(x = Math.round(x)) >= 1e21 ? x.toLocaleString("en").replace(/,/g, "") : x.toString(10);
    }

    // Computes the decimal coefficient and exponent of the specified number x with
    // significant digits p, where x is positive and p is in [1, 21] or undefined.
    // For example, formatDecimalParts(1.23) returns ["123", 0].
    function formatDecimalParts(x, p) {
        if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
        var i,
            coefficient = x.slice(0, i);

        // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
        // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
        return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];
    }

    function exponent$1 (x) {
        return x = formatDecimalParts(Math.abs(x)), x ? x[1] : NaN;
    }

    function formatGroup (grouping, thousands) {
        return function (value, width) {
            var i = value.length,
                t = [],
                j = 0,
                g = grouping[0],
                length = 0;
            while (i > 0 && g > 0) {
                if (length + g + 1 > width) g = Math.max(1, width - length);
                t.push(value.substring(i -= g, i + g));
                if ((length += g + 1) > width) break;
                g = grouping[j = (j + 1) % grouping.length];
            }
            return t.reverse().join(thousands);
        };
    }

    function formatNumerals (numerals) {
        return function (value) {
            return value.replace(/[0-9]/g, function (i) {
                return numerals[+i];
            });
        };
    }

    // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
    var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
    function formatSpecifier(specifier) {
        if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
        var match;
        return new FormatSpecifier({
            fill: match[1],
            align: match[2],
            sign: match[3],
            symbol: match[4],
            zero: match[5],
            width: match[6],
            comma: match[7],
            precision: match[8] && match[8].slice(1),
            trim: match[9],
            type: match[10]
        });
    }
    formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

    function FormatSpecifier(specifier) {
        this.fill = specifier.fill === undefined ? " " : specifier.fill + "";
        this.align = specifier.align === undefined ? ">" : specifier.align + "";
        this.sign = specifier.sign === undefined ? "-" : specifier.sign + "";
        this.symbol = specifier.symbol === undefined ? "" : specifier.symbol + "";
        this.zero = !!specifier.zero;
        this.width = specifier.width === undefined ? undefined : +specifier.width;
        this.comma = !!specifier.comma;
        this.precision = specifier.precision === undefined ? undefined : +specifier.precision;
        this.trim = !!specifier.trim;
        this.type = specifier.type === undefined ? "" : specifier.type + "";
    }
    FormatSpecifier.prototype.toString = function () {
        return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === undefined ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === undefined ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
    };

    // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
    function formatTrim (s) {
        out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
            switch (s[i]) {
                case ".":
                    i0 = i1 = i;
                    break;
                case "0":
                    if (i0 === 0) i0 = i;
                    i1 = i;
                    break;
                default:
                    if (!+s[i]) break out;
                    if (i0 > 0) i0 = 0;
                    break;
            }
        }
        return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
    }

    var prefixExponent;
    function formatPrefixAuto (x, p) {
        var d = formatDecimalParts(x, p);
        if (!d) return x + "";
        var coefficient = d[0],
            exponent = d[1],
            i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
            n = coefficient.length;
        return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x, Math.max(0, p + i - 1))[0]; // less than 1y!
    }

    function formatRounded (x, p) {
        var d = formatDecimalParts(x, p);
        if (!d) return x + "";
        var coefficient = d[0],
            exponent = d[1];
        return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
    }

    var formatTypes = {
        "%": function (x, p) {
            return (x * 100).toFixed(p);
        },
        "b": function (x) {
            return Math.round(x).toString(2);
        },
        "c": function (x) {
            return x + "";
        },
        "d": formatDecimal,
        "e": function (x, p) {
            return x.toExponential(p);
        },
        "f": function (x, p) {
            return x.toFixed(p);
        },
        "g": function (x, p) {
            return x.toPrecision(p);
        },
        "o": function (x) {
            return Math.round(x).toString(8);
        },
        "p": function (x, p) {
            return formatRounded(x * 100, p);
        },
        "r": formatRounded,
        "s": formatPrefixAuto,
        "X": function (x) {
            return Math.round(x).toString(16).toUpperCase();
        },
        "x": function (x) {
            return Math.round(x).toString(16);
        }
    };

    function identity$2 (x) {
        return x;
    }

    var map$1 = Array.prototype.map,
        prefixes = ["y", "z", "a", "f", "p", "n", "µ", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
    function formatLocale (locale) {
        var group = locale.grouping === undefined || locale.thousands === undefined ? identity$2 : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ""),
            currencyPrefix = locale.currency === undefined ? "" : locale.currency[0] + "",
            currencySuffix = locale.currency === undefined ? "" : locale.currency[1] + "",
            decimal = locale.decimal === undefined ? "." : locale.decimal + "",
            numerals = locale.numerals === undefined ? identity$2 : formatNumerals(map$1.call(locale.numerals, String)),
            percent = locale.percent === undefined ? "%" : locale.percent + "",
            minus = locale.minus === undefined ? "-" : locale.minus + "",
            nan = locale.nan === undefined ? "NaN" : locale.nan + "";
        function newFormat(specifier) {
            specifier = formatSpecifier(specifier);
            var fill = specifier.fill,
                align = specifier.align,
                sign = specifier.sign,
                symbol = specifier.symbol,
                zero = specifier.zero,
                width = specifier.width,
                comma = specifier.comma,
                precision = specifier.precision,
                trim = specifier.trim,
                type = specifier.type;

            // The "n" type is an alias for ",g".
            if (type === "n") comma = true, type = "g";

            // The "" type, and any invalid type, is an alias for ".12~g".
            else if (!formatTypes[type]) precision === undefined && (precision = 12), trim = true, type = "g";

            // If zero fill is specified, padding goes after sign and before digits.
            if (zero || fill === "0" && align === "=") zero = true, fill = "0", align = "=";

            // Compute the prefix and suffix.
            // For SI-prefix, the suffix is lazily computed.
            var prefix = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
                suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";

            // What format function should we use?
            // Is this an integer type?
            // Can this type generate exponential notation?
            var formatType = formatTypes[type],
                maybeSuffix = /[defgprs%]/.test(type);

            // Set the default precision if not specified,
            // or clamp the specified precision to the supported range.
            // For significant precision, it must be in [1, 21].
            // For fixed precision, it must be in [0, 20].
            precision = precision === undefined ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
            function format(value) {
                var valuePrefix = prefix,
                    valueSuffix = suffix,
                    i,
                    n,
                    c;
                if (type === "c") {
                    valueSuffix = formatType(value) + valueSuffix;
                    value = "";
                } else {
                    value = +value;

                    // Determine the sign. -0 is not less than 0, but 1 / -0 is!
                    var valueNegative = value < 0 || 1 / value < 0;

                    // Perform the initial formatting.
                    value = isNaN(value) ? nan : formatType(Math.abs(value), precision);

                    // Trim insignificant zeros.
                    if (trim) value = formatTrim(value);

                    // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
                    if (valueNegative && +value === 0 && sign !== "+") valueNegative = false;

                    // Compute the prefix and suffix.
                    valuePrefix = (valueNegative ? sign === "(" ? sign : minus : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
                    valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

                    // Break the formatted value into the integer “value” part that can be
                    // grouped, and fractional or exponential “suffix” part that is not.
                    if (maybeSuffix) {
                        i = -1, n = value.length;
                        while (++i < n) {
                            if (c = value.charCodeAt(i), 48 > c || c > 57) {
                                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                                value = value.slice(0, i);
                                break;
                            }
                        }
                    }
                }

                // If the fill character is not "0", grouping is applied before padding.
                if (comma && !zero) value = group(value, Infinity);

                // Compute the padding.
                var length = valuePrefix.length + value.length + valueSuffix.length,
                    padding = length < width ? new Array(width - length + 1).join(fill) : "";

                // If the fill character is "0", grouping is applied after padding.
                if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

                // Reconstruct the final output based on the desired alignment.
                switch (align) {
                    case "<":
                        value = valuePrefix + value + valueSuffix + padding;
                        break;
                    case "=":
                        value = valuePrefix + padding + value + valueSuffix;
                        break;
                    case "^":
                        value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
                        break;
                    default:
                        value = padding + valuePrefix + value + valueSuffix;
                        break;
                }
                return numerals(value);
            }
            format.toString = function () {
                return specifier + "";
            };
            return format;
        }
        function formatPrefix(specifier, value) {
            var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
                e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
                k = Math.pow(10, -e),
                prefix = prefixes[8 + e / 3];
            return function (value) {
                return f(k * value) + prefix;
            };
        }
        return {
            format: newFormat,
            formatPrefix: formatPrefix
        };
    }

    var locale;
    var format;
    var formatPrefix;
    defaultLocale({
        decimal: ".",
        thousands: ",",
        grouping: [3],
        currency: ["$", ""],
        minus: "-"
    });
    function defaultLocale(definition) {
        locale = formatLocale(definition);
        format = locale.format;
        formatPrefix = locale.formatPrefix;
        return locale;
    }

    function precisionFixed (step) {
        return Math.max(0, -exponent$1(Math.abs(step)));
    }

    function precisionPrefix (step, value) {
        return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)));
    }

    function precisionRound (step, max) {
        step = Math.abs(step), max = Math.abs(max) - step;
        return Math.max(0, exponent$1(max) - exponent$1(step)) + 1;
    }

    // Adds floating point numbers with twice the normal precision.
    // Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
    // Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
    // 305–363 (1997).
    // Code adapted from GeographicLib by Charles F. F. Karney,
    // http://geographiclib.sourceforge.net/

    function adder () {
        return new Adder();
    }
    function Adder() {
        this.reset();
    }
    Adder.prototype = {
        constructor: Adder,
        reset: function () {
            this.s =
                // rounded value
                this.t = 0; // exact error
        },
        add: function (y) {
            add(temp, y, this.t);
            add(this, temp.s, this.s);
            if (this.s) this.t += temp.t;else this.s = temp.t;
        },
        valueOf: function () {
            return this.s;
        }
    };
    var temp = new Adder();
    function add(adder, a, b) {
        var x = adder.s = a + b,
            bv = x - a,
            av = x - bv;
        adder.t = a - av + (b - bv);
    }

    var epsilon$1 = 1e-6;
    var epsilon2 = 1e-12;
    var pi$1 = Math.PI;
    var halfPi$1 = pi$1 / 2;
    var quarterPi = pi$1 / 4;
    var tau$1 = pi$1 * 2;
    var degrees = 180 / pi$1;
    var radians = pi$1 / 180;
    var abs = Math.abs;
    var atan = Math.atan;
    var atan2 = Math.atan2;
    var cos = Math.cos;
    var ceil = Math.ceil;
    var exp = Math.exp;
    var log = Math.log;
    var pow = Math.pow;
    var sin = Math.sin;
    var sign = Math.sign || function (x) {
        return x > 0 ? 1 : x < 0 ? -1 : 0;
    };
    var sqrt = Math.sqrt;
    var tan = Math.tan;
    function acos(x) {
        return x > 1 ? 0 : x < -1 ? pi$1 : Math.acos(x);
    }
    function asin(x) {
        return x > 1 ? halfPi$1 : x < -1 ? -halfPi$1 : Math.asin(x);
    }
    function haversin(x) {
        return (x = sin(x / 2)) * x;
    }

    function noop() {}

    function streamGeometry(geometry, stream) {
        if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
            streamGeometryType[geometry.type](geometry, stream);
        }
    }
    var streamObjectType = {
        Feature: function (object, stream) {
            streamGeometry(object.geometry, stream);
        },
        FeatureCollection: function (object, stream) {
            var features = object.features,
                i = -1,
                n = features.length;
            while (++i < n) streamGeometry(features[i].geometry, stream);
        }
    };
    var streamGeometryType = {
        Sphere: function (object, stream) {
            stream.sphere();
        },
        Point: function (object, stream) {
            object = object.coordinates;
            stream.point(object[0], object[1], object[2]);
        },
        MultiPoint: function (object, stream) {
            var coordinates = object.coordinates,
                i = -1,
                n = coordinates.length;
            while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
        },
        LineString: function (object, stream) {
            streamLine(object.coordinates, stream, 0);
        },
        MultiLineString: function (object, stream) {
            var coordinates = object.coordinates,
                i = -1,
                n = coordinates.length;
            while (++i < n) streamLine(coordinates[i], stream, 0);
        },
        Polygon: function (object, stream) {
            streamPolygon(object.coordinates, stream);
        },
        MultiPolygon: function (object, stream) {
            var coordinates = object.coordinates,
                i = -1,
                n = coordinates.length;
            while (++i < n) streamPolygon(coordinates[i], stream);
        },
        GeometryCollection: function (object, stream) {
            var geometries = object.geometries,
                i = -1,
                n = geometries.length;
            while (++i < n) streamGeometry(geometries[i], stream);
        }
    };
    function streamLine(coordinates, stream, closed) {
        var i = -1,
            n = coordinates.length - closed,
            coordinate;
        stream.lineStart();
        while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
        stream.lineEnd();
    }
    function streamPolygon(coordinates, stream) {
        var i = -1,
            n = coordinates.length;
        stream.polygonStart();
        while (++i < n) streamLine(coordinates[i], stream, 1);
        stream.polygonEnd();
    }
    function geoStream (object, stream) {
        if (object && streamObjectType.hasOwnProperty(object.type)) {
            streamObjectType[object.type](object, stream);
        } else {
            streamGeometry(object, stream);
        }
    }

    var areaRingSum = adder();
    var areaSum = adder(),
        lambda00,
        phi00,
        lambda0,
        cosPhi0,
        sinPhi0;
    var areaStream = {
        point: noop,
        lineStart: noop,
        lineEnd: noop,
        polygonStart: function () {
            areaRingSum.reset();
            areaStream.lineStart = areaRingStart;
            areaStream.lineEnd = areaRingEnd;
        },
        polygonEnd: function () {
            var areaRing = +areaRingSum;
            areaSum.add(areaRing < 0 ? tau$1 + areaRing : areaRing);
            this.lineStart = this.lineEnd = this.point = noop;
        },
        sphere: function () {
            areaSum.add(tau$1);
        }
    };
    function areaRingStart() {
        areaStream.point = areaPointFirst;
    }
    function areaRingEnd() {
        areaPoint(lambda00, phi00);
    }
    function areaPointFirst(lambda, phi) {
        areaStream.point = areaPoint;
        lambda00 = lambda, phi00 = phi;
        lambda *= radians, phi *= radians;
        lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
    }
    function areaPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        phi = phi / 2 + quarterPi; // half the angular distance from south pole

        // Spherical excess E for a spherical triangle with vertices: south pole,
        // previous point, current point.  Uses a formula derived from Cagnoli’s
        // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
        var dLambda = lambda - lambda0,
            sdLambda = dLambda >= 0 ? 1 : -1,
            adLambda = sdLambda * dLambda,
            cosPhi = cos(phi),
            sinPhi = sin(phi),
            k = sinPhi0 * sinPhi,
            u = cosPhi0 * cosPhi + k * cos(adLambda),
            v = k * sdLambda * sin(adLambda);
        areaRingSum.add(atan2(v, u));

        // Advance the previous points.
        lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
    }
    function area (object) {
        areaSum.reset();
        geoStream(object, areaStream);
        return areaSum * 2;
    }

    function spherical(cartesian) {
        return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
    }
    function cartesian(spherical) {
        var lambda = spherical[0],
            phi = spherical[1],
            cosPhi = cos(phi);
        return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
    }
    function cartesianDot(a, b) {
        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
    }
    function cartesianCross(a, b) {
        return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
    }

    // TODO return a
    function cartesianAddInPlace(a, b) {
        a[0] += b[0], a[1] += b[1], a[2] += b[2];
    }
    function cartesianScale(vector, k) {
        return [vector[0] * k, vector[1] * k, vector[2] * k];
    }

    // TODO return d
    function cartesianNormalizeInPlace(d) {
        var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
        d[0] /= l, d[1] /= l, d[2] /= l;
    }

    var lambda0$1,
        phi0,
        lambda1,
        phi1,
        // bounds
        lambda2,
        // previous lambda-coordinate
        lambda00$1,
        phi00$1,
        // first point
        p0,
        // previous 3D point
        deltaSum = adder(),
        ranges,
        range;
    var boundsStream = {
        point: boundsPoint,
        lineStart: boundsLineStart,
        lineEnd: boundsLineEnd,
        polygonStart: function () {
            boundsStream.point = boundsRingPoint;
            boundsStream.lineStart = boundsRingStart;
            boundsStream.lineEnd = boundsRingEnd;
            deltaSum.reset();
            areaStream.polygonStart();
        },
        polygonEnd: function () {
            areaStream.polygonEnd();
            boundsStream.point = boundsPoint;
            boundsStream.lineStart = boundsLineStart;
            boundsStream.lineEnd = boundsLineEnd;
            if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);else if (deltaSum > epsilon$1) phi1 = 90;else if (deltaSum < -epsilon$1) phi0 = -90;
            range[0] = lambda0$1, range[1] = lambda1;
        },
        sphere: function () {
            lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
        }
    };
    function boundsPoint(lambda, phi) {
        ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
        if (phi < phi0) phi0 = phi;
        if (phi > phi1) phi1 = phi;
    }
    function linePoint(lambda, phi) {
        var p = cartesian([lambda * radians, phi * radians]);
        if (p0) {
            var normal = cartesianCross(p0, p),
                equatorial = [normal[1], -normal[0], 0],
                inflection = cartesianCross(equatorial, normal);
            cartesianNormalizeInPlace(inflection);
            inflection = spherical(inflection);
            var delta = lambda - lambda2,
                sign = delta > 0 ? 1 : -1,
                lambdai = inflection[0] * degrees * sign,
                phii,
                antimeridian = abs(delta) > 180;
            if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
                phii = inflection[1] * degrees;
                if (phii > phi1) phi1 = phii;
            } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
                phii = -inflection[1] * degrees;
                if (phii < phi0) phi0 = phii;
            } else {
                if (phi < phi0) phi0 = phi;
                if (phi > phi1) phi1 = phi;
            }
            if (antimeridian) {
                if (lambda < lambda2) {
                    if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
                } else {
                    if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
                }
            } else {
                if (lambda1 >= lambda0$1) {
                    if (lambda < lambda0$1) lambda0$1 = lambda;
                    if (lambda > lambda1) lambda1 = lambda;
                } else {
                    if (lambda > lambda2) {
                        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
                    } else {
                        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
                    }
                }
            }
        } else {
            ranges.push(range = [lambda0$1 = lambda, lambda1 = lambda]);
        }
        if (phi < phi0) phi0 = phi;
        if (phi > phi1) phi1 = phi;
        p0 = p, lambda2 = lambda;
    }
    function boundsLineStart() {
        boundsStream.point = linePoint;
    }
    function boundsLineEnd() {
        range[0] = lambda0$1, range[1] = lambda1;
        boundsStream.point = boundsPoint;
        p0 = null;
    }
    function boundsRingPoint(lambda, phi) {
        if (p0) {
            var delta = lambda - lambda2;
            deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
        } else {
            lambda00$1 = lambda, phi00$1 = phi;
        }
        areaStream.point(lambda, phi);
        linePoint(lambda, phi);
    }
    function boundsRingStart() {
        areaStream.lineStart();
    }
    function boundsRingEnd() {
        boundsRingPoint(lambda00$1, phi00$1);
        areaStream.lineEnd();
        if (abs(deltaSum) > epsilon$1) lambda0$1 = -(lambda1 = 180);
        range[0] = lambda0$1, range[1] = lambda1;
        p0 = null;
    }

    // Finds the left-right distance between two longitudes.
    // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
    // the distance between ±180° to be 360°.
    function angle(lambda0, lambda1) {
        return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
    }
    function rangeCompare(a, b) {
        return a[0] - b[0];
    }
    function rangeContains(range, x) {
        return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x;
    }
    function bounds (feature) {
        var i, n, a, b, merged, deltaMax, delta;
        phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
        ranges = [];
        geoStream(feature, boundsStream);

        // First, sort ranges by their minimum longitudes.
        if (n = ranges.length) {
            ranges.sort(rangeCompare);

            // Then, merge any ranges that overlap.
            for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
                b = ranges[i];
                if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
                    if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
                    if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
                } else {
                    merged.push(a = b);
                }
            }

            // Finally, find the largest gap between the merged ranges.
            // The final bounding box will be the inverse of this gap.
            for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
                b = merged[i];
                if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
            }
        }
        ranges = range = null;
        return lambda0$1 === Infinity || phi0 === Infinity ? [[NaN, NaN], [NaN, NaN]] : [[lambda0$1, phi0], [lambda1, phi1]];
    }

    var W0, W1, X0, Y0, Z0, X1, Y1, Z1, X2, Y2, Z2, lambda00$2, phi00$2,
        // first point
        x0, y0, z0; // previous point

    var centroidStream = {
        sphere: noop,
        point: centroidPoint,
        lineStart: centroidLineStart,
        lineEnd: centroidLineEnd,
        polygonStart: function () {
            centroidStream.lineStart = centroidRingStart;
            centroidStream.lineEnd = centroidRingEnd;
        },
        polygonEnd: function () {
            centroidStream.lineStart = centroidLineStart;
            centroidStream.lineEnd = centroidLineEnd;
        }
    };

    // Arithmetic mean of Cartesian vectors.
    function centroidPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos(phi);
        centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
    }
    function centroidPointCartesian(x, y, z) {
        ++W0;
        X0 += (x - X0) / W0;
        Y0 += (y - Y0) / W0;
        Z0 += (z - Z0) / W0;
    }
    function centroidLineStart() {
        centroidStream.point = centroidLinePointFirst;
    }
    function centroidLinePointFirst(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos(phi);
        x0 = cosPhi * cos(lambda);
        y0 = cosPhi * sin(lambda);
        z0 = sin(phi);
        centroidStream.point = centroidLinePoint;
        centroidPointCartesian(x0, y0, z0);
    }
    function centroidLinePoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos(phi),
            x = cosPhi * cos(lambda),
            y = cosPhi * sin(lambda),
            z = sin(phi),
            w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
        W1 += w;
        X1 += w * (x0 + (x0 = x));
        Y1 += w * (y0 + (y0 = y));
        Z1 += w * (z0 + (z0 = z));
        centroidPointCartesian(x0, y0, z0);
    }
    function centroidLineEnd() {
        centroidStream.point = centroidPoint;
    }

    // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
    // J. Applied Mechanics 42, 239 (1975).
    function centroidRingStart() {
        centroidStream.point = centroidRingPointFirst;
    }
    function centroidRingEnd() {
        centroidRingPoint(lambda00$2, phi00$2);
        centroidStream.point = centroidPoint;
    }
    function centroidRingPointFirst(lambda, phi) {
        lambda00$2 = lambda, phi00$2 = phi;
        lambda *= radians, phi *= radians;
        centroidStream.point = centroidRingPoint;
        var cosPhi = cos(phi);
        x0 = cosPhi * cos(lambda);
        y0 = cosPhi * sin(lambda);
        z0 = sin(phi);
        centroidPointCartesian(x0, y0, z0);
    }
    function centroidRingPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var cosPhi = cos(phi),
            x = cosPhi * cos(lambda),
            y = cosPhi * sin(lambda),
            z = sin(phi),
            cx = y0 * z - z0 * y,
            cy = z0 * x - x0 * z,
            cz = x0 * y - y0 * x,
            m = sqrt(cx * cx + cy * cy + cz * cz),
            w = asin(m),
            // line weight = angle
            v = m && -w / m; // area weight multiplier
        X2 += v * cx;
        Y2 += v * cy;
        Z2 += v * cz;
        W1 += w;
        X1 += w * (x0 + (x0 = x));
        Y1 += w * (y0 + (y0 = y));
        Z1 += w * (z0 + (z0 = z));
        centroidPointCartesian(x0, y0, z0);
    }
    function centroid (object) {
        W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = X2 = Y2 = Z2 = 0;
        geoStream(object, centroidStream);
        var x = X2,
            y = Y2,
            z = Z2,
            m = x * x + y * y + z * z;

        // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
        if (m < epsilon2) {
            x = X1, y = Y1, z = Z1;
            // If the feature has zero length, fall back to arithmetic mean of point vectors.
            if (W1 < epsilon$1) x = X0, y = Y0, z = Z0;
            m = x * x + y * y + z * z;
            // If the feature still has an undefined ccentroid, then return.
            if (m < epsilon2) return [NaN, NaN];
        }
        return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
    }

    function constant$1 (x) {
        return function () {
            return x;
        };
    }

    function compose (a, b) {
        function compose(x, y) {
            return x = a(x, y), b(x[0], x[1]);
        }
        if (a.invert && b.invert) compose.invert = function (x, y) {
            return x = b.invert(x, y), x && a.invert(x[0], x[1]);
        };
        return compose;
    }

    function rotationIdentity(lambda, phi) {
        return [abs(lambda) > pi$1 ? lambda + Math.round(-lambda / tau$1) * tau$1 : lambda, phi];
    }
    rotationIdentity.invert = rotationIdentity;
    function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
        return (deltaLambda %= tau$1) ? deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma)) : rotationLambda(deltaLambda) : deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma) : rotationIdentity;
    }
    function forwardRotationLambda(deltaLambda) {
        return function (lambda, phi) {
            return lambda += deltaLambda, [lambda > pi$1 ? lambda - tau$1 : lambda < -pi$1 ? lambda + tau$1 : lambda, phi];
        };
    }
    function rotationLambda(deltaLambda) {
        var rotation = forwardRotationLambda(deltaLambda);
        rotation.invert = forwardRotationLambda(-deltaLambda);
        return rotation;
    }
    function rotationPhiGamma(deltaPhi, deltaGamma) {
        var cosDeltaPhi = cos(deltaPhi),
            sinDeltaPhi = sin(deltaPhi),
            cosDeltaGamma = cos(deltaGamma),
            sinDeltaGamma = sin(deltaGamma);
        function rotation(lambda, phi) {
            var cosPhi = cos(phi),
                x = cos(lambda) * cosPhi,
                y = sin(lambda) * cosPhi,
                z = sin(phi),
                k = z * cosDeltaPhi + x * sinDeltaPhi;
            return [atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi), asin(k * cosDeltaGamma + y * sinDeltaGamma)];
        }
        rotation.invert = function (lambda, phi) {
            var cosPhi = cos(phi),
                x = cos(lambda) * cosPhi,
                y = sin(lambda) * cosPhi,
                z = sin(phi),
                k = z * cosDeltaGamma - y * sinDeltaGamma;
            return [atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi), asin(k * cosDeltaPhi - x * sinDeltaPhi)];
        };
        return rotation;
    }
    function rotation (rotate) {
        rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);
        function forward(coordinates) {
            coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
            return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
        }
        forward.invert = function (coordinates) {
            coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
            return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
        };
        return forward;
    }

    // Generates a circle centered at [0°, 0°], with a given radius and precision.
    function circleStream(stream, radius, delta, direction, t0, t1) {
        if (!delta) return;
        var cosRadius = cos(radius),
            sinRadius = sin(radius),
            step = direction * delta;
        if (t0 == null) {
            t0 = radius + direction * tau$1;
            t1 = radius - step / 2;
        } else {
            t0 = circleRadius(cosRadius, t0);
            t1 = circleRadius(cosRadius, t1);
            if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$1;
        }
        for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
            point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
            stream.point(point[0], point[1]);
        }
    }

    // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
    function circleRadius(cosRadius, point) {
        point = cartesian(point), point[0] -= cosRadius;
        cartesianNormalizeInPlace(point);
        var radius = acos(-point[1]);
        return ((-point[2] < 0 ? -radius : radius) + tau$1 - epsilon$1) % tau$1;
    }
    function circle () {
        var center = constant$1([0, 0]),
            radius = constant$1(90),
            precision = constant$1(6),
            ring,
            rotate,
            stream = {
                point: point
            };
        function point(x, y) {
            ring.push(x = rotate(x, y));
            x[0] *= degrees, x[1] *= degrees;
        }
        function circle() {
            var c = center.apply(this, arguments),
                r = radius.apply(this, arguments) * radians,
                p = precision.apply(this, arguments) * radians;
            ring = [];
            rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
            circleStream(stream, r, p, 1);
            c = {
                type: "Polygon",
                coordinates: [ring]
            };
            ring = rotate = null;
            return c;
        }
        circle.center = function (_) {
            return arguments.length ? (center = typeof _ === "function" ? _ : constant$1([+_[0], +_[1]]), circle) : center;
        };
        circle.radius = function (_) {
            return arguments.length ? (radius = typeof _ === "function" ? _ : constant$1(+_), circle) : radius;
        };
        circle.precision = function (_) {
            return arguments.length ? (precision = typeof _ === "function" ? _ : constant$1(+_), circle) : precision;
        };
        return circle;
    }

    function clipBuffer () {
        var lines = [],
            line;
        return {
            point: function (x, y, m) {
                line.push([x, y, m]);
            },
            lineStart: function () {
                lines.push(line = []);
            },
            lineEnd: noop,
            rejoin: function () {
                if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
            },
            result: function () {
                var result = lines;
                lines = [];
                line = null;
                return result;
            }
        };
    }

    function pointEqual (a, b) {
        return abs(a[0] - b[0]) < epsilon$1 && abs(a[1] - b[1]) < epsilon$1;
    }

    function Intersection(point, points, other, entry) {
        this.x = point;
        this.z = points;
        this.o = other; // another intersection
        this.e = entry; // is an entry?
        this.v = false; // visited
        this.n = this.p = null; // next & previous
    }

    // A generalized polygon clipping algorithm: given a polygon that has been cut
    // into its visible line segments, and rejoins the segments by interpolating
    // along the clip edge.
    function clipRejoin (segments, compareIntersection, startInside, interpolate, stream) {
        var subject = [],
            clip = [],
            i,
            n;
        segments.forEach(function (segment) {
            if ((n = segment.length - 1) <= 0) return;
            var n,
                p0 = segment[0],
                p1 = segment[n],
                x;
            if (pointEqual(p0, p1)) {
                if (!p0[2] && !p1[2]) {
                    stream.lineStart();
                    for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
                    stream.lineEnd();
                    return;
                }
                // handle degenerate cases by moving the point
                p1[0] += 2 * epsilon$1;
            }
            subject.push(x = new Intersection(p0, segment, null, true));
            clip.push(x.o = new Intersection(p0, null, x, false));
            subject.push(x = new Intersection(p1, segment, null, false));
            clip.push(x.o = new Intersection(p1, null, x, true));
        });
        if (!subject.length) return;
        clip.sort(compareIntersection);
        link(subject);
        link(clip);
        for (i = 0, n = clip.length; i < n; ++i) {
            clip[i].e = startInside = !startInside;
        }
        var start = subject[0],
            points,
            point;
        while (1) {
            // Find first unvisited intersection.
            var current = start,
                isSubject = true;
            while (current.v) if ((current = current.n) === start) return;
            points = current.z;
            stream.lineStart();
            do {
                current.v = current.o.v = true;
                if (current.e) {
                    if (isSubject) {
                        for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.n.x, 1, stream);
                    }
                    current = current.n;
                } else {
                    if (isSubject) {
                        points = current.p.z;
                        for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
                    } else {
                        interpolate(current.x, current.p.x, -1, stream);
                    }
                    current = current.p;
                }
                current = current.o;
                points = current.z;
                isSubject = !isSubject;
            } while (!current.v);
            stream.lineEnd();
        }
    }
    function link(array) {
        if (!(n = array.length)) return;
        var n,
            i = 0,
            a = array[0],
            b;
        while (++i < n) {
            a.n = b = array[i];
            b.p = a;
            a = b;
        }
        a.n = b = array[0];
        b.p = a;
    }

    var sum$1 = adder();
    function longitude(point) {
        if (abs(point[0]) <= pi$1) return point[0];else return sign(point[0]) * ((abs(point[0]) + pi$1) % tau$1 - pi$1);
    }
    function polygonContains (polygon, point) {
        var lambda = longitude(point),
            phi = point[1],
            sinPhi = sin(phi),
            normal = [sin(lambda), -cos(lambda), 0],
            angle = 0,
            winding = 0;
        sum$1.reset();
        if (sinPhi === 1) phi = halfPi$1 + epsilon$1;else if (sinPhi === -1) phi = -halfPi$1 - epsilon$1;
        for (var i = 0, n = polygon.length; i < n; ++i) {
            if (!(m = (ring = polygon[i]).length)) continue;
            var ring,
                m,
                point0 = ring[m - 1],
                lambda0 = longitude(point0),
                phi0 = point0[1] / 2 + quarterPi,
                sinPhi0 = sin(phi0),
                cosPhi0 = cos(phi0);
            for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
                var point1 = ring[j],
                    lambda1 = longitude(point1),
                    phi1 = point1[1] / 2 + quarterPi,
                    sinPhi1 = sin(phi1),
                    cosPhi1 = cos(phi1),
                    delta = lambda1 - lambda0,
                    sign = delta >= 0 ? 1 : -1,
                    absDelta = sign * delta,
                    antimeridian = absDelta > pi$1,
                    k = sinPhi0 * sinPhi1;
                sum$1.add(atan2(k * sign * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
                angle += antimeridian ? delta + sign * tau$1 : delta;

                // Are the longitudes either side of the point’s meridian (lambda),
                // and are the latitudes smaller than the parallel (phi)?
                if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
                    var arc = cartesianCross(cartesian(point0), cartesian(point1));
                    cartesianNormalizeInPlace(arc);
                    var intersection = cartesianCross(normal, arc);
                    cartesianNormalizeInPlace(intersection);
                    var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
                    if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
                        winding += antimeridian ^ delta >= 0 ? 1 : -1;
                    }
                }
            }
        }

        // First, determine whether the South pole is inside or outside:
        //
        // It is inside if:
        // * the polygon winds around it in a clockwise direction.
        // * the polygon does not (cumulatively) wind around it, but has a negative
        //   (counter-clockwise) area.
        //
        // Second, count the (signed) number of times a segment crosses a lambda
        // from the point to the South pole.  If it is zero, then the point is the
        // same side as the South pole.

        return (angle < -epsilon$1 || angle < epsilon$1 && sum$1 < -epsilon$1) ^ winding & 1;
    }

    function clip (pointVisible, clipLine, interpolate, start) {
        return function (sink) {
            var line = clipLine(sink),
                ringBuffer = clipBuffer(),
                ringSink = clipLine(ringBuffer),
                polygonStarted = false,
                polygon,
                segments,
                ring;
            var clip = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function () {
                    clip.point = pointRing;
                    clip.lineStart = ringStart;
                    clip.lineEnd = ringEnd;
                    segments = [];
                    polygon = [];
                },
                polygonEnd: function () {
                    clip.point = point;
                    clip.lineStart = lineStart;
                    clip.lineEnd = lineEnd;
                    segments = merge(segments);
                    var startInside = polygonContains(polygon, start);
                    if (segments.length) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
                    } else if (startInside) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        sink.lineStart();
                        interpolate(null, null, 1, sink);
                        sink.lineEnd();
                    }
                    if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
                    segments = polygon = null;
                },
                sphere: function () {
                    sink.polygonStart();
                    sink.lineStart();
                    interpolate(null, null, 1, sink);
                    sink.lineEnd();
                    sink.polygonEnd();
                }
            };
            function point(lambda, phi) {
                if (pointVisible(lambda, phi)) sink.point(lambda, phi);
            }
            function pointLine(lambda, phi) {
                line.point(lambda, phi);
            }
            function lineStart() {
                clip.point = pointLine;
                line.lineStart();
            }
            function lineEnd() {
                clip.point = point;
                line.lineEnd();
            }
            function pointRing(lambda, phi) {
                ring.push([lambda, phi]);
                ringSink.point(lambda, phi);
            }
            function ringStart() {
                ringSink.lineStart();
                ring = [];
            }
            function ringEnd() {
                pointRing(ring[0][0], ring[0][1]);
                ringSink.lineEnd();
                var clean = ringSink.clean(),
                    ringSegments = ringBuffer.result(),
                    i,
                    n = ringSegments.length,
                    m,
                    segment,
                    point;
                ring.pop();
                polygon.push(ring);
                ring = null;
                if (!n) return;

                // No intersections.
                if (clean & 1) {
                    segment = ringSegments[0];
                    if ((m = segment.length - 1) > 0) {
                        if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
                        sink.lineStart();
                        for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
                        sink.lineEnd();
                    }
                    return;
                }

                // Rejoin connected segments.
                // TODO reuse ringBuffer.rejoin()?
                if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));
                segments.push(ringSegments.filter(validSegment));
            }
            return clip;
        };
    }
    function validSegment(segment) {
        return segment.length > 1;
    }

    // Intersections are sorted along the clip edge. For both antimeridian cutting
    // and circle clipping, the same comparison is used.
    function compareIntersection(a, b) {
        return ((a = a.x)[0] < 0 ? a[1] - halfPi$1 - epsilon$1 : halfPi$1 - a[1]) - ((b = b.x)[0] < 0 ? b[1] - halfPi$1 - epsilon$1 : halfPi$1 - b[1]);
    }

    var clipAntimeridian = clip(function () {
        return true;
    }, clipAntimeridianLine, clipAntimeridianInterpolate, [-pi$1, -halfPi$1]);

    // Takes a line and cuts into visible segments. Return values: 0 - there were
    // intersections or the line was empty; 1 - no intersections; 2 - there were
    // intersections, and the first and last segments should be rejoined.
    function clipAntimeridianLine(stream) {
        var lambda0 = NaN,
            phi0 = NaN,
            sign0 = NaN,
            clean; // no intersections

        return {
            lineStart: function () {
                stream.lineStart();
                clean = 1;
            },
            point: function (lambda1, phi1) {
                var sign1 = lambda1 > 0 ? pi$1 : -pi$1,
                    delta = abs(lambda1 - lambda0);
                if (abs(delta - pi$1) < epsilon$1) {
                    // line crosses a pole
                    stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$1 : -halfPi$1);
                    stream.point(sign0, phi0);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(sign1, phi0);
                    stream.point(lambda1, phi0);
                    clean = 0;
                } else if (sign0 !== sign1 && delta >= pi$1) {
                    // line crosses antimeridian
                    if (abs(lambda0 - sign0) < epsilon$1) lambda0 -= sign0 * epsilon$1; // handle degeneracies
                    if (abs(lambda1 - sign1) < epsilon$1) lambda1 -= sign1 * epsilon$1;
                    phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
                    stream.point(sign0, phi0);
                    stream.lineEnd();
                    stream.lineStart();
                    stream.point(sign1, phi0);
                    clean = 0;
                }
                stream.point(lambda0 = lambda1, phi0 = phi1);
                sign0 = sign1;
            },
            lineEnd: function () {
                stream.lineEnd();
                lambda0 = phi0 = NaN;
            },
            clean: function () {
                return 2 - clean; // if intersections, rejoin first and last segments
            }
        };
    }
    function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
        var cosPhi0,
            cosPhi1,
            sinLambda0Lambda1 = sin(lambda0 - lambda1);
        return abs(sinLambda0Lambda1) > epsilon$1 ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1) - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0)) / (cosPhi0 * cosPhi1 * sinLambda0Lambda1)) : (phi0 + phi1) / 2;
    }
    function clipAntimeridianInterpolate(from, to, direction, stream) {
        var phi;
        if (from == null) {
            phi = direction * halfPi$1;
            stream.point(-pi$1, phi);
            stream.point(0, phi);
            stream.point(pi$1, phi);
            stream.point(pi$1, 0);
            stream.point(pi$1, -phi);
            stream.point(0, -phi);
            stream.point(-pi$1, -phi);
            stream.point(-pi$1, 0);
            stream.point(-pi$1, phi);
        } else if (abs(from[0] - to[0]) > epsilon$1) {
            var lambda = from[0] < to[0] ? pi$1 : -pi$1;
            phi = direction * lambda / 2;
            stream.point(-lambda, phi);
            stream.point(0, phi);
            stream.point(lambda, phi);
        } else {
            stream.point(to[0], to[1]);
        }
    }

    function clipCircle (radius) {
        var cr = cos(radius),
            delta = 6 * radians,
            smallRadius = cr > 0,
            notHemisphere = abs(cr) > epsilon$1; // TODO optimise for this common case

        function interpolate(from, to, direction, stream) {
            circleStream(stream, radius, delta, direction, from, to);
        }
        function visible(lambda, phi) {
            return cos(lambda) * cos(phi) > cr;
        }

        // Takes a line and cuts into visible segments. Return values used for polygon
        // clipping: 0 - there were intersections or the line was empty; 1 - no
        // intersections 2 - there were intersections, and the first and last segments
        // should be rejoined.
        function clipLine(stream) {
            var point0,
                // previous point
                c0,
                // code for previous point
                v0,
                // visibility of previous point
                v00,
                // visibility of first point
                clean; // no intersections
            return {
                lineStart: function () {
                    v00 = v0 = false;
                    clean = 1;
                },
                point: function (lambda, phi) {
                    var point1 = [lambda, phi],
                        point2,
                        v = visible(lambda, phi),
                        c = smallRadius ? v ? 0 : code(lambda, phi) : v ? code(lambda + (lambda < 0 ? pi$1 : -pi$1), phi) : 0;
                    if (!point0 && (v00 = v0 = v)) stream.lineStart();
                    if (v !== v0) {
                        point2 = intersect(point0, point1);
                        if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1;
                    }
                    if (v !== v0) {
                        clean = 0;
                        if (v) {
                            // outside going in
                            stream.lineStart();
                            point2 = intersect(point1, point0);
                            stream.point(point2[0], point2[1]);
                        } else {
                            // inside going out
                            point2 = intersect(point0, point1);
                            stream.point(point2[0], point2[1], 2);
                            stream.lineEnd();
                        }
                        point0 = point2;
                    } else if (notHemisphere && point0 && smallRadius ^ v) {
                        var t;
                        // If the codes for two points are different, or are both zero,
                        // and there this segment intersects with the small circle.
                        if (!(c & c0) && (t = intersect(point1, point0, true))) {
                            clean = 0;
                            if (smallRadius) {
                                stream.lineStart();
                                stream.point(t[0][0], t[0][1]);
                                stream.point(t[1][0], t[1][1]);
                                stream.lineEnd();
                            } else {
                                stream.point(t[1][0], t[1][1]);
                                stream.lineEnd();
                                stream.lineStart();
                                stream.point(t[0][0], t[0][1], 3);
                            }
                        }
                    }
                    if (v && (!point0 || !pointEqual(point0, point1))) {
                        stream.point(point1[0], point1[1]);
                    }
                    point0 = point1, v0 = v, c0 = c;
                },
                lineEnd: function () {
                    if (v0) stream.lineEnd();
                    point0 = null;
                },
                // Rejoin first and last segments if there were intersections and the first
                // and last points were visible.
                clean: function () {
                    return clean | (v00 && v0) << 1;
                }
            };
        }

        // Intersects the great circle between a and b with the clip circle.
        function intersect(a, b, two) {
            var pa = cartesian(a),
                pb = cartesian(b);

            // We have two planes, n1.p = d1 and n2.p = d2.
            // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
            var n1 = [1, 0, 0],
                // normal
                n2 = cartesianCross(pa, pb),
                n2n2 = cartesianDot(n2, n2),
                n1n2 = n2[0],
                // cartesianDot(n1, n2),
                determinant = n2n2 - n1n2 * n1n2;

            // Two polar points.
            if (!determinant) return !two && a;
            var c1 = cr * n2n2 / determinant,
                c2 = -cr * n1n2 / determinant,
                n1xn2 = cartesianCross(n1, n2),
                A = cartesianScale(n1, c1),
                B = cartesianScale(n2, c2);
            cartesianAddInPlace(A, B);

            // Solve |p(t)|^2 = 1.
            var u = n1xn2,
                w = cartesianDot(A, u),
                uu = cartesianDot(u, u),
                t2 = w * w - uu * (cartesianDot(A, A) - 1);
            if (t2 < 0) return;
            var t = sqrt(t2),
                q = cartesianScale(u, (-w - t) / uu);
            cartesianAddInPlace(q, A);
            q = spherical(q);
            if (!two) return q;

            // Two intersection points.
            var lambda0 = a[0],
                lambda1 = b[0],
                phi0 = a[1],
                phi1 = b[1],
                z;
            if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;
            var delta = lambda1 - lambda0,
                polar = abs(delta - pi$1) < epsilon$1,
                meridian = polar || delta < epsilon$1;
            if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

            // Check that the first point is between a and b.
            if (meridian ? polar ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon$1 ? phi0 : phi1) : phi0 <= q[1] && q[1] <= phi1 : delta > pi$1 ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
                var q1 = cartesianScale(u, (-w + t) / uu);
                cartesianAddInPlace(q1, A);
                return [q, spherical(q1)];
            }
        }

        // Generates a 4-bit vector representing the location of a point relative to
        // the small circle's bounding box.
        function code(lambda, phi) {
            var r = smallRadius ? radius : pi$1 - radius,
                code = 0;
            if (lambda < -r) code |= 1; // left
            else if (lambda > r) code |= 2; // right
            if (phi < -r) code |= 4; // below
            else if (phi > r) code |= 8; // above
            return code;
        }
        return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$1, radius - pi$1]);
    }

    function clipLine (a, b, x0, y0, x1, y1) {
        var ax = a[0],
            ay = a[1],
            bx = b[0],
            by = b[1],
            t0 = 0,
            t1 = 1,
            dx = bx - ax,
            dy = by - ay,
            r;
        r = x0 - ax;
        if (!dx && r > 0) return;
        r /= dx;
        if (dx < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dx > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = x1 - ax;
        if (!dx && r < 0) return;
        r /= dx;
        if (dx < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dx > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        r = y0 - ay;
        if (!dy && r > 0) return;
        r /= dy;
        if (dy < 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        } else if (dy > 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        }
        r = y1 - ay;
        if (!dy && r < 0) return;
        r /= dy;
        if (dy < 0) {
            if (r > t1) return;
            if (r > t0) t0 = r;
        } else if (dy > 0) {
            if (r < t0) return;
            if (r < t1) t1 = r;
        }
        if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
        if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
        return true;
    }

    var clipMax = 1e9,
        clipMin = -clipMax;

    // TODO Use d3-polygon’s polygonContains here for the ring check?
    // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

    function clipRectangle(x0, y0, x1, y1) {
        function visible(x, y) {
            return x0 <= x && x <= x1 && y0 <= y && y <= y1;
        }
        function interpolate(from, to, direction, stream) {
            var a = 0,
                a1 = 0;
            if (from == null || (a = corner(from, direction)) !== (a1 = corner(to, direction)) || comparePoint(from, to) < 0 ^ direction > 0) {
                do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0); while ((a = (a + direction + 4) % 4) !== a1);
            } else {
                stream.point(to[0], to[1]);
            }
        }
        function corner(p, direction) {
            return abs(p[0] - x0) < epsilon$1 ? direction > 0 ? 0 : 3 : abs(p[0] - x1) < epsilon$1 ? direction > 0 ? 2 : 1 : abs(p[1] - y0) < epsilon$1 ? direction > 0 ? 1 : 0 : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
        }
        function compareIntersection(a, b) {
            return comparePoint(a.x, b.x);
        }
        function comparePoint(a, b) {
            var ca = corner(a, 1),
                cb = corner(b, 1);
            return ca !== cb ? ca - cb : ca === 0 ? b[1] - a[1] : ca === 1 ? a[0] - b[0] : ca === 2 ? a[1] - b[1] : b[0] - a[0];
        }
        return function (stream) {
            var activeStream = stream,
                bufferStream = clipBuffer(),
                segments,
                polygon,
                ring,
                x__,
                y__,
                v__,
                // first point
                x_,
                y_,
                v_,
                // previous point
                first,
                clean;
            var clipStream = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: polygonStart,
                polygonEnd: polygonEnd
            };
            function point(x, y) {
                if (visible(x, y)) activeStream.point(x, y);
            }
            function polygonInside() {
                var winding = 0;
                for (var i = 0, n = polygon.length; i < n; ++i) {
                    for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
                        a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
                        if (a1 <= y1) {
                            if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding;
                        } else {
                            if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding;
                        }
                    }
                }
                return winding;
            }

            // Buffer geometry within a polygon and then clip it en masse.
            function polygonStart() {
                activeStream = bufferStream, segments = [], polygon = [], clean = true;
            }
            function polygonEnd() {
                var startInside = polygonInside(),
                    cleanInside = clean && startInside,
                    visible = (segments = merge(segments)).length;
                if (cleanInside || visible) {
                    stream.polygonStart();
                    if (cleanInside) {
                        stream.lineStart();
                        interpolate(null, null, 1, stream);
                        stream.lineEnd();
                    }
                    if (visible) {
                        clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
                    }
                    stream.polygonEnd();
                }
                activeStream = stream, segments = polygon = ring = null;
            }
            function lineStart() {
                clipStream.point = linePoint;
                if (polygon) polygon.push(ring = []);
                first = true;
                v_ = false;
                x_ = y_ = NaN;
            }

            // TODO rather than special-case polygons, simply handle them separately.
            // Ideally, coincident intersection points should be jittered to avoid
            // clipping issues.
            function lineEnd() {
                if (segments) {
                    linePoint(x__, y__);
                    if (v__ && v_) bufferStream.rejoin();
                    segments.push(bufferStream.result());
                }
                clipStream.point = point;
                if (v_) activeStream.lineEnd();
            }
            function linePoint(x, y) {
                var v = visible(x, y);
                if (polygon) ring.push([x, y]);
                if (first) {
                    x__ = x, y__ = y, v__ = v;
                    first = false;
                    if (v) {
                        activeStream.lineStart();
                        activeStream.point(x, y);
                    }
                } else {
                    if (v && v_) activeStream.point(x, y);else {
                        var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
                            b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
                        if (clipLine(a, b, x0, y0, x1, y1)) {
                            if (!v_) {
                                activeStream.lineStart();
                                activeStream.point(a[0], a[1]);
                            }
                            activeStream.point(b[0], b[1]);
                            if (!v) activeStream.lineEnd();
                            clean = false;
                        } else if (v) {
                            activeStream.lineStart();
                            activeStream.point(x, y);
                            clean = false;
                        }
                    }
                }
                x_ = x, y_ = y, v_ = v;
            }
            return clipStream;
        };
    }

    function extent$1 () {
        var x0 = 0,
            y0 = 0,
            x1 = 960,
            y1 = 500,
            cache,
            cacheStream,
            clip;
        return clip = {
            stream: function (stream) {
                return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
            },
            extent: function (_) {
                return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
            }
        };
    }

    var lengthSum = adder(),
        lambda0$2,
        sinPhi0$1,
        cosPhi0$1;
    var lengthStream = {
        sphere: noop,
        point: noop,
        lineStart: lengthLineStart,
        lineEnd: noop,
        polygonStart: noop,
        polygonEnd: noop
    };
    function lengthLineStart() {
        lengthStream.point = lengthPointFirst;
        lengthStream.lineEnd = lengthLineEnd;
    }
    function lengthLineEnd() {
        lengthStream.point = lengthStream.lineEnd = noop;
    }
    function lengthPointFirst(lambda, phi) {
        lambda *= radians, phi *= radians;
        lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
        lengthStream.point = lengthPoint;
    }
    function lengthPoint(lambda, phi) {
        lambda *= radians, phi *= radians;
        var sinPhi = sin(phi),
            cosPhi = cos(phi),
            delta = abs(lambda - lambda0$2),
            cosDelta = cos(delta),
            sinDelta = sin(delta),
            x = cosPhi * sinDelta,
            y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
            z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
        lengthSum.add(atan2(sqrt(x * x + y * y), z));
        lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
    }
    function length$1 (object) {
        lengthSum.reset();
        geoStream(object, lengthStream);
        return +lengthSum;
    }

    var coordinates = [null, null],
        object = {
            type: "LineString",
            coordinates: coordinates
        };
    function distance (a, b) {
        coordinates[0] = a;
        coordinates[1] = b;
        return length$1(object);
    }

    var containsObjectType = {
        Feature: function (object, point) {
            return containsGeometry(object.geometry, point);
        },
        FeatureCollection: function (object, point) {
            var features = object.features,
                i = -1,
                n = features.length;
            while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
            return false;
        }
    };
    var containsGeometryType = {
        Sphere: function () {
            return true;
        },
        Point: function (object, point) {
            return containsPoint(object.coordinates, point);
        },
        MultiPoint: function (object, point) {
            var coordinates = object.coordinates,
                i = -1,
                n = coordinates.length;
            while (++i < n) if (containsPoint(coordinates[i], point)) return true;
            return false;
        },
        LineString: function (object, point) {
            return containsLine(object.coordinates, point);
        },
        MultiLineString: function (object, point) {
            var coordinates = object.coordinates,
                i = -1,
                n = coordinates.length;
            while (++i < n) if (containsLine(coordinates[i], point)) return true;
            return false;
        },
        Polygon: function (object, point) {
            return containsPolygon(object.coordinates, point);
        },
        MultiPolygon: function (object, point) {
            var coordinates = object.coordinates,
                i = -1,
                n = coordinates.length;
            while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
            return false;
        },
        GeometryCollection: function (object, point) {
            var geometries = object.geometries,
                i = -1,
                n = geometries.length;
            while (++i < n) if (containsGeometry(geometries[i], point)) return true;
            return false;
        }
    };
    function containsGeometry(geometry, point) {
        return geometry && containsGeometryType.hasOwnProperty(geometry.type) ? containsGeometryType[geometry.type](geometry, point) : false;
    }
    function containsPoint(coordinates, point) {
        return distance(coordinates, point) === 0;
    }
    function containsLine(coordinates, point) {
        var ao, bo, ab;
        for (var i = 0, n = coordinates.length; i < n; i++) {
            bo = distance(coordinates[i], point);
            if (bo === 0) return true;
            if (i > 0) {
                ab = distance(coordinates[i], coordinates[i - 1]);
                if (ab > 0 && ao <= ab && bo <= ab && (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2 * ab) return true;
            }
            ao = bo;
        }
        return false;
    }
    function containsPolygon(coordinates, point) {
        return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
    }
    function ringRadians(ring) {
        return ring = ring.map(pointRadians), ring.pop(), ring;
    }
    function pointRadians(point) {
        return [point[0] * radians, point[1] * radians];
    }
    function contains (object, point) {
        return (object && containsObjectType.hasOwnProperty(object.type) ? containsObjectType[object.type] : containsGeometry)(object, point);
    }

    function graticuleX(y0, y1, dy) {
        var y = sequence(y0, y1 - epsilon$1, dy).concat(y1);
        return function (x) {
            return y.map(function (y) {
                return [x, y];
            });
        };
    }
    function graticuleY(x0, x1, dx) {
        var x = sequence(x0, x1 - epsilon$1, dx).concat(x1);
        return function (y) {
            return x.map(function (x) {
                return [x, y];
            });
        };
    }
    function graticule() {
        var x1,
            x0,
            X1,
            X0,
            y1,
            y0,
            Y1,
            Y0,
            dx = 10,
            dy = dx,
            DX = 90,
            DY = 360,
            x,
            y,
            X,
            Y,
            precision = 2.5;
        function graticule() {
            return {
                type: "MultiLineString",
                coordinates: lines()
            };
        }
        function lines() {
            return sequence(ceil(X0 / DX) * DX, X1, DX).map(X).concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y)).concat(sequence(ceil(x0 / dx) * dx, x1, dx).filter(function (x) {
                return abs(x % DX) > epsilon$1;
            }).map(x)).concat(sequence(ceil(y0 / dy) * dy, y1, dy).filter(function (y) {
                return abs(y % DY) > epsilon$1;
            }).map(y));
        }
        graticule.lines = function () {
            return lines().map(function (coordinates) {
                return {
                    type: "LineString",
                    coordinates: coordinates
                };
            });
        };
        graticule.outline = function () {
            return {
                type: "Polygon",
                coordinates: [X(X0).concat(Y(Y1).slice(1), X(X1).reverse().slice(1), Y(Y0).reverse().slice(1))]
            };
        };
        graticule.extent = function (_) {
            if (!arguments.length) return graticule.extentMinor();
            return graticule.extentMajor(_).extentMinor(_);
        };
        graticule.extentMajor = function (_) {
            if (!arguments.length) return [[X0, Y0], [X1, Y1]];
            X0 = +_[0][0], X1 = +_[1][0];
            Y0 = +_[0][1], Y1 = +_[1][1];
            if (X0 > X1) _ = X0, X0 = X1, X1 = _;
            if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
            return graticule.precision(precision);
        };
        graticule.extentMinor = function (_) {
            if (!arguments.length) return [[x0, y0], [x1, y1]];
            x0 = +_[0][0], x1 = +_[1][0];
            y0 = +_[0][1], y1 = +_[1][1];
            if (x0 > x1) _ = x0, x0 = x1, x1 = _;
            if (y0 > y1) _ = y0, y0 = y1, y1 = _;
            return graticule.precision(precision);
        };
        graticule.step = function (_) {
            if (!arguments.length) return graticule.stepMinor();
            return graticule.stepMajor(_).stepMinor(_);
        };
        graticule.stepMajor = function (_) {
            if (!arguments.length) return [DX, DY];
            DX = +_[0], DY = +_[1];
            return graticule;
        };
        graticule.stepMinor = function (_) {
            if (!arguments.length) return [dx, dy];
            dx = +_[0], dy = +_[1];
            return graticule;
        };
        graticule.precision = function (_) {
            if (!arguments.length) return precision;
            precision = +_;
            x = graticuleX(y0, y1, 90);
            y = graticuleY(x0, x1, precision);
            X = graticuleX(Y0, Y1, 90);
            Y = graticuleY(X0, X1, precision);
            return graticule;
        };
        return graticule.extentMajor([[-180, -90 + epsilon$1], [180, 90 - epsilon$1]]).extentMinor([[-180, -80 - epsilon$1], [180, 80 + epsilon$1]]);
    }
    function graticule10() {
        return graticule()();
    }

    function interpolate (a, b) {
        var x0 = a[0] * radians,
            y0 = a[1] * radians,
            x1 = b[0] * radians,
            y1 = b[1] * radians,
            cy0 = cos(y0),
            sy0 = sin(y0),
            cy1 = cos(y1),
            sy1 = sin(y1),
            kx0 = cy0 * cos(x0),
            ky0 = cy0 * sin(x0),
            kx1 = cy1 * cos(x1),
            ky1 = cy1 * sin(x1),
            d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
            k = sin(d);
        var interpolate = d ? function (t) {
            var B = sin(t *= d) / k,
                A = sin(d - t) / k,
                x = A * kx0 + B * kx1,
                y = A * ky0 + B * ky1,
                z = A * sy0 + B * sy1;
            return [atan2(y, x) * degrees, atan2(z, sqrt(x * x + y * y)) * degrees];
        } : function () {
            return [x0 * degrees, y0 * degrees];
        };
        interpolate.distance = d;
        return interpolate;
    }

    function identity$3 (x) {
        return x;
    }

    var areaSum$1 = adder(),
        areaRingSum$1 = adder(),
        x00,
        y00,
        x0$1,
        y0$1;
    var areaStream$1 = {
        point: noop,
        lineStart: noop,
        lineEnd: noop,
        polygonStart: function () {
            areaStream$1.lineStart = areaRingStart$1;
            areaStream$1.lineEnd = areaRingEnd$1;
        },
        polygonEnd: function () {
            areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
            areaSum$1.add(abs(areaRingSum$1));
            areaRingSum$1.reset();
        },
        result: function () {
            var area = areaSum$1 / 2;
            areaSum$1.reset();
            return area;
        }
    };
    function areaRingStart$1() {
        areaStream$1.point = areaPointFirst$1;
    }
    function areaPointFirst$1(x, y) {
        areaStream$1.point = areaPoint$1;
        x00 = x0$1 = x, y00 = y0$1 = y;
    }
    function areaPoint$1(x, y) {
        areaRingSum$1.add(y0$1 * x - x0$1 * y);
        x0$1 = x, y0$1 = y;
    }
    function areaRingEnd$1() {
        areaPoint$1(x00, y00);
    }

    var x0$2 = Infinity,
        y0$2 = x0$2,
        x1 = -x0$2,
        y1 = x1;
    var boundsStream$1 = {
        point: boundsPoint$1,
        lineStart: noop,
        lineEnd: noop,
        polygonStart: noop,
        polygonEnd: noop,
        result: function () {
            var bounds = [[x0$2, y0$2], [x1, y1]];
            x1 = y1 = -(y0$2 = x0$2 = Infinity);
            return bounds;
        }
    };
    function boundsPoint$1(x, y) {
        if (x < x0$2) x0$2 = x;
        if (x > x1) x1 = x;
        if (y < y0$2) y0$2 = y;
        if (y > y1) y1 = y;
    }

    // TODO Enforce positive area for exterior, negative area for interior?

    var X0$1 = 0,
        Y0$1 = 0,
        Z0$1 = 0,
        X1$1 = 0,
        Y1$1 = 0,
        Z1$1 = 0,
        X2$1 = 0,
        Y2$1 = 0,
        Z2$1 = 0,
        x00$1,
        y00$1,
        x0$3,
        y0$3;
    var centroidStream$1 = {
        point: centroidPoint$1,
        lineStart: centroidLineStart$1,
        lineEnd: centroidLineEnd$1,
        polygonStart: function () {
            centroidStream$1.lineStart = centroidRingStart$1;
            centroidStream$1.lineEnd = centroidRingEnd$1;
        },
        polygonEnd: function () {
            centroidStream$1.point = centroidPoint$1;
            centroidStream$1.lineStart = centroidLineStart$1;
            centroidStream$1.lineEnd = centroidLineEnd$1;
        },
        result: function () {
            var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1] : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1] : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1] : [NaN, NaN];
            X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0;
            return centroid;
        }
    };
    function centroidPoint$1(x, y) {
        X0$1 += x;
        Y0$1 += y;
        ++Z0$1;
    }
    function centroidLineStart$1() {
        centroidStream$1.point = centroidPointFirstLine;
    }
    function centroidPointFirstLine(x, y) {
        centroidStream$1.point = centroidPointLine;
        centroidPoint$1(x0$3 = x, y0$3 = y);
    }
    function centroidPointLine(x, y) {
        var dx = x - x0$3,
            dy = y - y0$3,
            z = sqrt(dx * dx + dy * dy);
        X1$1 += z * (x0$3 + x) / 2;
        Y1$1 += z * (y0$3 + y) / 2;
        Z1$1 += z;
        centroidPoint$1(x0$3 = x, y0$3 = y);
    }
    function centroidLineEnd$1() {
        centroidStream$1.point = centroidPoint$1;
    }
    function centroidRingStart$1() {
        centroidStream$1.point = centroidPointFirstRing;
    }
    function centroidRingEnd$1() {
        centroidPointRing(x00$1, y00$1);
    }
    function centroidPointFirstRing(x, y) {
        centroidStream$1.point = centroidPointRing;
        centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
    }
    function centroidPointRing(x, y) {
        var dx = x - x0$3,
            dy = y - y0$3,
            z = sqrt(dx * dx + dy * dy);
        X1$1 += z * (x0$3 + x) / 2;
        Y1$1 += z * (y0$3 + y) / 2;
        Z1$1 += z;
        z = y0$3 * x - x0$3 * y;
        X2$1 += z * (x0$3 + x);
        Y2$1 += z * (y0$3 + y);
        Z2$1 += z * 3;
        centroidPoint$1(x0$3 = x, y0$3 = y);
    }

    function PathContext(context) {
        this._context = context;
    }
    PathContext.prototype = {
        _radius: 4.5,
        pointRadius: function (_) {
            return this._radius = _, this;
        },
        polygonStart: function () {
            this._line = 0;
        },
        polygonEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            if (this._line === 0) this._context.closePath();
            this._point = NaN;
        },
        point: function (x, y) {
            switch (this._point) {
                case 0:
                {
                    this._context.moveTo(x, y);
                    this._point = 1;
                    break;
                }
                case 1:
                {
                    this._context.lineTo(x, y);
                    break;
                }
                default:
                {
                    this._context.moveTo(x + this._radius, y);
                    this._context.arc(x, y, this._radius, 0, tau$1);
                    break;
                }
            }
        },
        result: noop
    };

    var lengthSum$1 = adder(),
        lengthRing,
        x00$2,
        y00$2,
        x0$4,
        y0$4;
    var lengthStream$1 = {
        point: noop,
        lineStart: function () {
            lengthStream$1.point = lengthPointFirst$1;
        },
        lineEnd: function () {
            if (lengthRing) lengthPoint$1(x00$2, y00$2);
            lengthStream$1.point = noop;
        },
        polygonStart: function () {
            lengthRing = true;
        },
        polygonEnd: function () {
            lengthRing = null;
        },
        result: function () {
            var length = +lengthSum$1;
            lengthSum$1.reset();
            return length;
        }
    };
    function lengthPointFirst$1(x, y) {
        lengthStream$1.point = lengthPoint$1;
        x00$2 = x0$4 = x, y00$2 = y0$4 = y;
    }
    function lengthPoint$1(x, y) {
        x0$4 -= x, y0$4 -= y;
        lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
        x0$4 = x, y0$4 = y;
    }

    function PathString() {
        this._string = [];
    }
    PathString.prototype = {
        _radius: 4.5,
        _circle: circle$1(4.5),
        pointRadius: function (_) {
            if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
            return this;
        },
        polygonStart: function () {
            this._line = 0;
        },
        polygonEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            if (this._line === 0) this._string.push("Z");
            this._point = NaN;
        },
        point: function (x, y) {
            switch (this._point) {
                case 0:
                {
                    this._string.push("M", x, ",", y);
                    this._point = 1;
                    break;
                }
                case 1:
                {
                    this._string.push("L", x, ",", y);
                    break;
                }
                default:
                {
                    if (this._circle == null) this._circle = circle$1(this._radius);
                    this._string.push("M", x, ",", y, this._circle);
                    break;
                }
            }
        },
        result: function () {
            if (this._string.length) {
                var result = this._string.join("");
                this._string = [];
                return result;
            } else {
                return null;
            }
        }
    };
    function circle$1(radius) {
        return "m0," + radius + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius + "z";
    }

    function index (projection, context) {
        var pointRadius = 4.5,
            projectionStream,
            contextStream;
        function path(object) {
            if (object) {
                if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
                geoStream(object, projectionStream(contextStream));
            }
            return contextStream.result();
        }
        path.area = function (object) {
            geoStream(object, projectionStream(areaStream$1));
            return areaStream$1.result();
        };
        path.measure = function (object) {
            geoStream(object, projectionStream(lengthStream$1));
            return lengthStream$1.result();
        };
        path.bounds = function (object) {
            geoStream(object, projectionStream(boundsStream$1));
            return boundsStream$1.result();
        };
        path.centroid = function (object) {
            geoStream(object, projectionStream(centroidStream$1));
            return centroidStream$1.result();
        };
        path.projection = function (_) {
            return arguments.length ? (projectionStream = _ == null ? (projection = null, identity$3) : (projection = _).stream, path) : projection;
        };
        path.context = function (_) {
            if (!arguments.length) return context;
            contextStream = _ == null ? (context = null, new PathString()) : new PathContext(context = _);
            if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
            return path;
        };
        path.pointRadius = function (_) {
            if (!arguments.length) return pointRadius;
            pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
            return path;
        };
        return path.projection(projection).context(context);
    }

    function transform (methods) {
        return {
            stream: transformer(methods)
        };
    }
    function transformer(methods) {
        return function (stream) {
            var s = new TransformStream();
            for (var key in methods) s[key] = methods[key];
            s.stream = stream;
            return s;
        };
    }
    function TransformStream() {}
    TransformStream.prototype = {
        constructor: TransformStream,
        point: function (x, y) {
            this.stream.point(x, y);
        },
        sphere: function () {
            this.stream.sphere();
        },
        lineStart: function () {
            this.stream.lineStart();
        },
        lineEnd: function () {
            this.stream.lineEnd();
        },
        polygonStart: function () {
            this.stream.polygonStart();
        },
        polygonEnd: function () {
            this.stream.polygonEnd();
        }
    };

    function fit(projection, fitBounds, object) {
        var clip = projection.clipExtent && projection.clipExtent();
        projection.scale(150).translate([0, 0]);
        if (clip != null) projection.clipExtent(null);
        geoStream(object, projection.stream(boundsStream$1));
        fitBounds(boundsStream$1.result());
        if (clip != null) projection.clipExtent(clip);
        return projection;
    }
    function fitExtent(projection, extent, object) {
        return fit(projection, function (b) {
            var w = extent[1][0] - extent[0][0],
                h = extent[1][1] - extent[0][1],
                k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
                x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
                y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
            projection.scale(150 * k).translate([x, y]);
        }, object);
    }
    function fitSize(projection, size, object) {
        return fitExtent(projection, [[0, 0], size], object);
    }
    function fitWidth(projection, width, object) {
        return fit(projection, function (b) {
            var w = +width,
                k = w / (b[1][0] - b[0][0]),
                x = (w - k * (b[1][0] + b[0][0])) / 2,
                y = -k * b[0][1];
            projection.scale(150 * k).translate([x, y]);
        }, object);
    }
    function fitHeight(projection, height, object) {
        return fit(projection, function (b) {
            var h = +height,
                k = h / (b[1][1] - b[0][1]),
                x = -k * b[0][0],
                y = (h - k * (b[1][1] + b[0][1])) / 2;
            projection.scale(150 * k).translate([x, y]);
        }, object);
    }

    var maxDepth = 16,
        // maximum depth of subdivision
        cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

    function resample (project, delta2) {
        return +delta2 ? resample$1(project, delta2) : resampleNone(project);
    }
    function resampleNone(project) {
        return transformer({
            point: function (x, y) {
                x = project(x, y);
                this.stream.point(x[0], x[1]);
            }
        });
    }
    function resample$1(project, delta2) {
        function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
            var dx = x1 - x0,
                dy = y1 - y0,
                d2 = dx * dx + dy * dy;
            if (d2 > 4 * delta2 && depth--) {
                var a = a0 + a1,
                    b = b0 + b1,
                    c = c0 + c1,
                    m = sqrt(a * a + b * b + c * c),
                    phi2 = asin(c /= m),
                    lambda2 = abs(abs(c) - 1) < epsilon$1 || abs(lambda0 - lambda1) < epsilon$1 ? (lambda0 + lambda1) / 2 : atan2(b, a),
                    p = project(lambda2, phi2),
                    x2 = p[0],
                    y2 = p[1],
                    dx2 = x2 - x0,
                    dy2 = y2 - y0,
                    dz = dy * dx2 - dx * dy2;
                if (dz * dz / d2 > delta2 // perpendicular projected distance
                    || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
                    || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) {
                    // angular distance
                    resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
                    stream.point(x2, y2);
                    resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
                }
            }
        }
        return function (stream) {
            var lambda00, x00, y00, a00, b00, c00,
                // first point
                lambda0, x0, y0, a0, b0, c0; // previous point

            var resampleStream = {
                point: point,
                lineStart: lineStart,
                lineEnd: lineEnd,
                polygonStart: function () {
                    stream.polygonStart();
                    resampleStream.lineStart = ringStart;
                },
                polygonEnd: function () {
                    stream.polygonEnd();
                    resampleStream.lineStart = lineStart;
                }
            };
            function point(x, y) {
                x = project(x, y);
                stream.point(x[0], x[1]);
            }
            function lineStart() {
                x0 = NaN;
                resampleStream.point = linePoint;
                stream.lineStart();
            }
            function linePoint(lambda, phi) {
                var c = cartesian([lambda, phi]),
                    p = project(lambda, phi);
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
                stream.point(x0, y0);
            }
            function lineEnd() {
                resampleStream.point = point;
                stream.lineEnd();
            }
            function ringStart() {
                lineStart();
                resampleStream.point = ringPoint;
                resampleStream.lineEnd = ringEnd;
            }
            function ringPoint(lambda, phi) {
                linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
                resampleStream.point = linePoint;
            }
            function ringEnd() {
                resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
                resampleStream.lineEnd = lineEnd;
                lineEnd();
            }
            return resampleStream;
        };
    }

    var transformRadians = transformer({
        point: function (x, y) {
            this.stream.point(x * radians, y * radians);
        }
    });
    function transformRotate(rotate) {
        return transformer({
            point: function (x, y) {
                var r = rotate(x, y);
                return this.stream.point(r[0], r[1]);
            }
        });
    }
    function scaleTranslate(k, dx, dy, sx, sy) {
        function transform(x, y) {
            x *= sx;
            y *= sy;
            return [dx + k * x, dy - k * y];
        }
        transform.invert = function (x, y) {
            return [(x - dx) / k * sx, (dy - y) / k * sy];
        };
        return transform;
    }
    function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
        var cosAlpha = cos(alpha),
            sinAlpha = sin(alpha),
            a = cosAlpha * k,
            b = sinAlpha * k,
            ai = cosAlpha / k,
            bi = sinAlpha / k,
            ci = (sinAlpha * dy - cosAlpha * dx) / k,
            fi = (sinAlpha * dx + cosAlpha * dy) / k;
        function transform(x, y) {
            x *= sx;
            y *= sy;
            return [a * x - b * y + dx, dy - b * x - a * y];
        }
        transform.invert = function (x, y) {
            return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)];
        };
        return transform;
    }
    function projection(project) {
        return projectionMutator(function () {
            return project;
        })();
    }
    function projectionMutator(projectAt) {
        var project,
            k = 150,
            // scale
            x = 480,
            y = 250,
            // translate
            lambda = 0,
            phi = 0,
            // center
            deltaLambda = 0,
            deltaPhi = 0,
            deltaGamma = 0,
            rotate,
            // pre-rotate
            alpha = 0,
            // post-rotate angle
            sx = 1,
            // reflectX
            sy = 1,
            // reflectX
            theta = null,
            preclip = clipAntimeridian,
            // pre-clip angle
            x0 = null,
            y0,
            x1,
            y1,
            postclip = identity$3,
            // post-clip extent
            delta2 = 0.5,
            // precision
            projectResample,
            projectTransform,
            projectRotateTransform,
            cache,
            cacheStream;
        function projection(point) {
            return projectRotateTransform(point[0] * radians, point[1] * radians);
        }
        function invert(point) {
            point = projectRotateTransform.invert(point[0], point[1]);
            return point && [point[0] * degrees, point[1] * degrees];
        }
        projection.stream = function (stream) {
            return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
        };
        projection.preclip = function (_) {
            return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
        };
        projection.postclip = function (_) {
            return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
        };
        projection.clipAngle = function (_) {
            return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
        };
        projection.clipExtent = function (_) {
            return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$3) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
        };
        projection.scale = function (_) {
            return arguments.length ? (k = +_, recenter()) : k;
        };
        projection.translate = function (_) {
            return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
        };
        projection.center = function (_) {
            return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
        };
        projection.rotate = function (_) {
            return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
        };
        projection.angle = function (_) {
            return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
        };
        projection.reflectX = function (_) {
            return arguments.length ? (sx = _ ? -1 : 1, recenter()) : sx < 0;
        };
        projection.reflectY = function (_) {
            return arguments.length ? (sy = _ ? -1 : 1, recenter()) : sy < 0;
        };
        projection.precision = function (_) {
            return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
        };
        projection.fitExtent = function (extent, object) {
            return fitExtent(projection, extent, object);
        };
        projection.fitSize = function (size, object) {
            return fitSize(projection, size, object);
        };
        projection.fitWidth = function (width, object) {
            return fitWidth(projection, width, object);
        };
        projection.fitHeight = function (height, object) {
            return fitHeight(projection, height, object);
        };
        function recenter() {
            var center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
                transform = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], sx, sy, alpha);
            rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
            projectTransform = compose(project, transform);
            projectRotateTransform = compose(rotate, projectTransform);
            projectResample = resample(projectTransform, delta2);
            return reset();
        }
        function reset() {
            cache = cacheStream = null;
            return projection;
        }
        return function () {
            project = projectAt.apply(this, arguments);
            projection.invert = project.invert && invert;
            return recenter();
        };
    }

    function conicProjection(projectAt) {
        var phi0 = 0,
            phi1 = pi$1 / 3,
            m = projectionMutator(projectAt),
            p = m(phi0, phi1);
        p.parallels = function (_) {
            return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
        };
        return p;
    }

    function cylindricalEqualAreaRaw(phi0) {
        var cosPhi0 = cos(phi0);
        function forward(lambda, phi) {
            return [lambda * cosPhi0, sin(phi) / cosPhi0];
        }
        forward.invert = function (x, y) {
            return [x / cosPhi0, asin(y * cosPhi0)];
        };
        return forward;
    }

    function conicEqualAreaRaw(y0, y1) {
        var sy0 = sin(y0),
            n = (sy0 + sin(y1)) / 2;

        // Are the parallels symmetrical around the Equator?
        if (abs(n) < epsilon$1) return cylindricalEqualAreaRaw(y0);
        var c = 1 + sy0 * (2 * n - sy0),
            r0 = sqrt(c) / n;
        function project(x, y) {
            var r = sqrt(c - 2 * n * sin(y)) / n;
            return [r * sin(x *= n), r0 - r * cos(x)];
        }
        project.invert = function (x, y) {
            var r0y = r0 - y,
                l = atan2(x, abs(r0y)) * sign(r0y);
            if (r0y * n < 0) l -= pi$1 * sign(x) * sign(r0y);
            return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
        };
        return project;
    }
    function conicEqualArea () {
        return conicProjection(conicEqualAreaRaw).scale(155.424).center([0, 33.6442]);
    }

    function albers () {
        return conicEqualArea().parallels([29.5, 45.5]).scale(1070).translate([480, 250]).rotate([96, 0]).center([-0.6, 38.7]);
    }

    // The projections must have mutually exclusive clip regions on the sphere,
    // as this will avoid emitting interleaving lines and polygons.
    function multiplex(streams) {
        var n = streams.length;
        return {
            point: function (x, y) {
                var i = -1;
                while (++i < n) streams[i].point(x, y);
            },
            sphere: function () {
                var i = -1;
                while (++i < n) streams[i].sphere();
            },
            lineStart: function () {
                var i = -1;
                while (++i < n) streams[i].lineStart();
            },
            lineEnd: function () {
                var i = -1;
                while (++i < n) streams[i].lineEnd();
            },
            polygonStart: function () {
                var i = -1;
                while (++i < n) streams[i].polygonStart();
            },
            polygonEnd: function () {
                var i = -1;
                while (++i < n) streams[i].polygonEnd();
            }
        };
    }

    // A composite projection for the United States, configured by default for
    // 960×500. The projection also works quite well at 960×600 if you change the
    // scale to 1285 and adjust the translate accordingly. The set of standard
    // parallels for each region comes from USGS, which is published here:
    // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
    function albersUsa () {
        var cache,
            cacheStream,
            lower48 = albers(),
            lower48Point,
            alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
            alaskaPoint,
            // EPSG:3338
            hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
            hawaiiPoint,
            // ESRI:102007
            point,
            pointStream = {
                point: function (x, y) {
                    point = [x, y];
                }
            };
        function albersUsa(coordinates) {
            var x = coordinates[0],
                y = coordinates[1];
            return point = null, (lower48Point.point(x, y), point) || (alaskaPoint.point(x, y), point) || (hawaiiPoint.point(x, y), point);
        }
        albersUsa.invert = function (coordinates) {
            var k = lower48.scale(),
                t = lower48.translate(),
                x = (coordinates[0] - t[0]) / k,
                y = (coordinates[1] - t[1]) / k;
            return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii : lower48).invert(coordinates);
        };
        albersUsa.stream = function (stream) {
            return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
        };
        albersUsa.precision = function (_) {
            if (!arguments.length) return lower48.precision();
            lower48.precision(_), alaska.precision(_), hawaii.precision(_);
            return reset();
        };
        albersUsa.scale = function (_) {
            if (!arguments.length) return lower48.scale();
            lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
            return albersUsa.translate(lower48.translate());
        };
        albersUsa.translate = function (_) {
            if (!arguments.length) return lower48.translate();
            var k = lower48.scale(),
                x = +_[0],
                y = +_[1];
            lower48Point = lower48.translate(_).clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]]).stream(pointStream);
            alaskaPoint = alaska.translate([x - 0.307 * k, y + 0.201 * k]).clipExtent([[x - 0.425 * k + epsilon$1, y + 0.120 * k + epsilon$1], [x - 0.214 * k - epsilon$1, y + 0.234 * k - epsilon$1]]).stream(pointStream);
            hawaiiPoint = hawaii.translate([x - 0.205 * k, y + 0.212 * k]).clipExtent([[x - 0.214 * k + epsilon$1, y + 0.166 * k + epsilon$1], [x - 0.115 * k - epsilon$1, y + 0.234 * k - epsilon$1]]).stream(pointStream);
            return reset();
        };
        albersUsa.fitExtent = function (extent, object) {
            return fitExtent(albersUsa, extent, object);
        };
        albersUsa.fitSize = function (size, object) {
            return fitSize(albersUsa, size, object);
        };
        albersUsa.fitWidth = function (width, object) {
            return fitWidth(albersUsa, width, object);
        };
        albersUsa.fitHeight = function (height, object) {
            return fitHeight(albersUsa, height, object);
        };
        function reset() {
            cache = cacheStream = null;
            return albersUsa;
        }
        return albersUsa.scale(1070);
    }

    function azimuthalRaw(scale) {
        return function (x, y) {
            var cx = cos(x),
                cy = cos(y),
                k = scale(cx * cy);
            return [k * cy * sin(x), k * sin(y)];
        };
    }
    function azimuthalInvert(angle) {
        return function (x, y) {
            var z = sqrt(x * x + y * y),
                c = angle(z),
                sc = sin(c),
                cc = cos(c);
            return [atan2(x * sc, z * cc), asin(z && y * sc / z)];
        };
    }

    var azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
        return sqrt(2 / (1 + cxcy));
    });
    azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
        return 2 * asin(z / 2);
    });
    function azimuthalEqualArea () {
        return projection(azimuthalEqualAreaRaw).scale(124.75).clipAngle(180 - 1e-3);
    }

    var azimuthalEquidistantRaw = azimuthalRaw(function (c) {
        return (c = acos(c)) && c / sin(c);
    });
    azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
        return z;
    });
    function azimuthalEquidistant () {
        return projection(azimuthalEquidistantRaw).scale(79.4188).clipAngle(180 - 1e-3);
    }

    function mercatorRaw(lambda, phi) {
        return [lambda, log(tan((halfPi$1 + phi) / 2))];
    }
    mercatorRaw.invert = function (x, y) {
        return [x, 2 * atan(exp(y)) - halfPi$1];
    };
    function mercator () {
        return mercatorProjection(mercatorRaw).scale(961 / tau$1);
    }
    function mercatorProjection(project) {
        var m = projection(project),
            center = m.center,
            scale = m.scale,
            translate = m.translate,
            clipExtent = m.clipExtent,
            x0 = null,
            y0,
            x1,
            y1; // clip extent

        m.scale = function (_) {
            return arguments.length ? (scale(_), reclip()) : scale();
        };
        m.translate = function (_) {
            return arguments.length ? (translate(_), reclip()) : translate();
        };
        m.center = function (_) {
            return arguments.length ? (center(_), reclip()) : center();
        };
        m.clipExtent = function (_) {
            return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
        };
        function reclip() {
            var k = pi$1 * scale(),
                t = m(rotation(m.rotate()).invert([0, 0]));
            return clipExtent(x0 == null ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]] : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
        }
        return reclip();
    }

    function tany(y) {
        return tan((halfPi$1 + y) / 2);
    }
    function conicConformalRaw(y0, y1) {
        var cy0 = cos(y0),
            n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
            f = cy0 * pow(tany(y0), n) / n;
        if (!n) return mercatorRaw;
        function project(x, y) {
            if (f > 0) {
                if (y < -halfPi$1 + epsilon$1) y = -halfPi$1 + epsilon$1;
            } else {
                if (y > halfPi$1 - epsilon$1) y = halfPi$1 - epsilon$1;
            }
            var r = f / pow(tany(y), n);
            return [r * sin(n * x), f - r * cos(n * x)];
        }
        project.invert = function (x, y) {
            var fy = f - y,
                r = sign(n) * sqrt(x * x + fy * fy),
                l = atan2(x, abs(fy)) * sign(fy);
            if (fy * n < 0) l -= pi$1 * sign(x) * sign(fy);
            return [l / n, 2 * atan(pow(f / r, 1 / n)) - halfPi$1];
        };
        return project;
    }
    function conicConformal () {
        return conicProjection(conicConformalRaw).scale(109.5).parallels([30, 30]);
    }

    function equirectangularRaw(lambda, phi) {
        return [lambda, phi];
    }
    equirectangularRaw.invert = equirectangularRaw;
    function equirectangular () {
        return projection(equirectangularRaw).scale(152.63);
    }

    function conicEquidistantRaw(y0, y1) {
        var cy0 = cos(y0),
            n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
            g = cy0 / n + y0;
        if (abs(n) < epsilon$1) return equirectangularRaw;
        function project(x, y) {
            var gy = g - y,
                nx = n * x;
            return [gy * sin(nx), g - gy * cos(nx)];
        }
        project.invert = function (x, y) {
            var gy = g - y,
                l = atan2(x, abs(gy)) * sign(gy);
            if (gy * n < 0) l -= pi$1 * sign(x) * sign(gy);
            return [l / n, g - sign(n) * sqrt(x * x + gy * gy)];
        };
        return project;
    }
    function conicEquidistant () {
        return conicProjection(conicEquidistantRaw).scale(131.154).center([0, 13.9389]);
    }

    var A1 = 1.340264,
        A2 = -0.081106,
        A3 = 0.000893,
        A4 = 0.003796,
        M = sqrt(3) / 2,
        iterations = 12;
    function equalEarthRaw(lambda, phi) {
        var l = asin(M * sin(phi)),
            l2 = l * l,
            l6 = l2 * l2 * l2;
        return [lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))), l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))];
    }
    equalEarthRaw.invert = function (x, y) {
        var l = y,
            l2 = l * l,
            l6 = l2 * l2 * l2;
        for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
            fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;
            fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);
            l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;
            if (abs(delta) < epsilon2) break;
        }
        return [M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l), asin(sin(l) / M)];
    };
    function equalEarth () {
        return projection(equalEarthRaw).scale(177.158);
    }

    function gnomonicRaw(x, y) {
        var cy = cos(y),
            k = cos(x) * cy;
        return [cy * sin(x) / k, sin(y) / k];
    }
    gnomonicRaw.invert = azimuthalInvert(atan);
    function gnomonic () {
        return projection(gnomonicRaw).scale(144.049).clipAngle(60);
    }

    function identity$4 () {
        var k = 1,
            tx = 0,
            ty = 0,
            sx = 1,
            sy = 1,
            // scale, translate and reflect
            alpha = 0,
            ca,
            sa,
            // angle
            x0 = null,
            y0,
            x1,
            y1,
            // clip extent
            kx = 1,
            ky = 1,
            transform = transformer({
                point: function (x, y) {
                    var p = projection([x, y]);
                    this.stream.point(p[0], p[1]);
                }
            }),
            postclip = identity$3,
            cache,
            cacheStream;
        function reset() {
            kx = k * sx;
            ky = k * sy;
            cache = cacheStream = null;
            return projection;
        }
        function projection(p) {
            var x = p[0] * kx,
                y = p[1] * ky;
            if (alpha) {
                var t = y * ca - x * sa;
                x = x * ca + y * sa;
                y = t;
            }
            return [x + tx, y + ty];
        }
        projection.invert = function (p) {
            var x = p[0] - tx,
                y = p[1] - ty;
            if (alpha) {
                var t = y * ca + x * sa;
                x = x * ca - y * sa;
                y = t;
            }
            return [x / kx, y / ky];
        };
        projection.stream = function (stream) {
            return cache && cacheStream === stream ? cache : cache = transform(postclip(cacheStream = stream));
        };
        projection.postclip = function (_) {
            return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
        };
        projection.clipExtent = function (_) {
            return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity$3) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
        };
        projection.scale = function (_) {
            return arguments.length ? (k = +_, reset()) : k;
        };
        projection.translate = function (_) {
            return arguments.length ? (tx = +_[0], ty = +_[1], reset()) : [tx, ty];
        };
        projection.angle = function (_) {
            return arguments.length ? (alpha = _ % 360 * radians, sa = sin(alpha), ca = cos(alpha), reset()) : alpha * degrees;
        };
        projection.reflectX = function (_) {
            return arguments.length ? (sx = _ ? -1 : 1, reset()) : sx < 0;
        };
        projection.reflectY = function (_) {
            return arguments.length ? (sy = _ ? -1 : 1, reset()) : sy < 0;
        };
        projection.fitExtent = function (extent, object) {
            return fitExtent(projection, extent, object);
        };
        projection.fitSize = function (size, object) {
            return fitSize(projection, size, object);
        };
        projection.fitWidth = function (width, object) {
            return fitWidth(projection, width, object);
        };
        projection.fitHeight = function (height, object) {
            return fitHeight(projection, height, object);
        };
        return projection;
    }

    function naturalEarth1Raw(lambda, phi) {
        var phi2 = phi * phi,
            phi4 = phi2 * phi2;
        return [lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))), phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))];
    }
    naturalEarth1Raw.invert = function (x, y) {
        var phi = y,
            i = 25,
            delta;
        do {
            var phi2 = phi * phi,
                phi4 = phi2 * phi2;
            phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) / (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
        } while (abs(delta) > epsilon$1 && --i > 0);
        return [x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))), phi];
    };
    function naturalEarth1 () {
        return projection(naturalEarth1Raw).scale(175.295);
    }

    function orthographicRaw(x, y) {
        return [cos(y) * sin(x), sin(y)];
    }
    orthographicRaw.invert = azimuthalInvert(asin);
    function orthographic () {
        return projection(orthographicRaw).scale(249.5).clipAngle(90 + epsilon$1);
    }

    function stereographicRaw(x, y) {
        var cy = cos(y),
            k = 1 + cos(x) * cy;
        return [cy * sin(x) / k, sin(y) / k];
    }
    stereographicRaw.invert = azimuthalInvert(function (z) {
        return 2 * atan(z);
    });
    function stereographic () {
        return projection(stereographicRaw).scale(250).clipAngle(142);
    }

    function transverseMercatorRaw(lambda, phi) {
        return [log(tan((halfPi$1 + phi) / 2)), -lambda];
    }
    transverseMercatorRaw.invert = function (x, y) {
        return [-y, 2 * atan(exp(x)) - halfPi$1];
    };
    function transverseMercator () {
        var m = mercatorProjection(transverseMercatorRaw),
            center = m.center,
            rotate = m.rotate;
        m.center = function (_) {
            return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
        };
        m.rotate = function (_) {
            return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
        };
        return rotate([0, 0, 90]).scale(159.155);
    }

    var pi$2 = Math.PI,
        tau$2 = 2 * pi$2,
        epsilon$2 = 1e-6,
        tauEpsilon = tau$2 - epsilon$2;
    function Path() {
        this._x0 = this._y0 =
            // start of current subpath
            this._x1 = this._y1 = null; // end of current subpath
        this._ = "";
    }
    function path() {
        return new Path();
    }
    Path.prototype = path.prototype = {
        constructor: Path,
        moveTo: function (x, y) {
            this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
        },
        closePath: function () {
            if (this._x1 !== null) {
                this._x1 = this._x0, this._y1 = this._y0;
                this._ += "Z";
            }
        },
        lineTo: function (x, y) {
            this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
        },
        quadraticCurveTo: function (x1, y1, x, y) {
            this._ += "Q" + +x1 + "," + +y1 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
        },
        bezierCurveTo: function (x1, y1, x2, y2, x, y) {
            this._ += "C" + +x1 + "," + +y1 + "," + +x2 + "," + +y2 + "," + (this._x1 = +x) + "," + (this._y1 = +y);
        },
        arcTo: function (x1, y1, x2, y2, r) {
            x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
            var x0 = this._x1,
                y0 = this._y1,
                x21 = x2 - x1,
                y21 = y2 - y1,
                x01 = x0 - x1,
                y01 = y0 - y1,
                l01_2 = x01 * x01 + y01 * y01;

            // Is the radius negative? Error.
            if (r < 0) throw new Error("negative radius: " + r);

            // Is this path empty? Move to (x1,y1).
            if (this._x1 === null) {
                this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
            }

            // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
            else if (!(l01_2 > epsilon$2)) ;

                // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
                // Equivalently, is (x1,y1) coincident with (x2,y2)?
            // Or, is the radius zero? Line to (x1,y1).
            else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$2) || !r) {
                this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
            }

            // Otherwise, draw an arc!
            else {
                var x20 = x2 - x0,
                    y20 = y2 - y0,
                    l21_2 = x21 * x21 + y21 * y21,
                    l20_2 = x20 * x20 + y20 * y20,
                    l21 = Math.sqrt(l21_2),
                    l01 = Math.sqrt(l01_2),
                    l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
                    t01 = l / l01,
                    t21 = l / l21;

                // If the start tangent is not coincident with (x0,y0), line to.
                if (Math.abs(t01 - 1) > epsilon$2) {
                    this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
                }
                this._ += "A" + r + "," + r + ",0,0," + +(y01 * x20 > x01 * y20) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
            }
        },
        arc: function (x, y, r, a0, a1, ccw) {
            x = +x, y = +y, r = +r, ccw = !!ccw;
            var dx = r * Math.cos(a0),
                dy = r * Math.sin(a0),
                x0 = x + dx,
                y0 = y + dy,
                cw = 1 ^ ccw,
                da = ccw ? a0 - a1 : a1 - a0;

            // Is the radius negative? Error.
            if (r < 0) throw new Error("negative radius: " + r);

            // Is this path empty? Move to (x0,y0).
            if (this._x1 === null) {
                this._ += "M" + x0 + "," + y0;
            }

            // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
            else if (Math.abs(this._x1 - x0) > epsilon$2 || Math.abs(this._y1 - y0) > epsilon$2) {
                this._ += "L" + x0 + "," + y0;
            }

            // Is this arc empty? We’re done.
            if (!r) return;

            // Does the angle go the wrong way? Flip the direction.
            if (da < 0) da = da % tau$2 + tau$2;

            // Is this a complete circle? Draw two arcs to complete the circle.
            if (da > tauEpsilon) {
                this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
            }

            // Is this arc non-empty? Draw an arc!
            else if (da > epsilon$2) {
                this._ += "A" + r + "," + r + ",0," + +(da >= pi$2) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
            }
        },
        rect: function (x, y, w, h) {
            this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + +w + "v" + +h + "h" + -w + "Z";
        },
        toString: function () {
            return this._;
        }
    };

    function initRange(domain, range) {
        switch (arguments.length) {
            case 0:
                break;
            case 1:
                this.range(domain);
                break;
            default:
                this.range(range).domain(domain);
                break;
        }
        return this;
    }
    function initInterpolator(domain, interpolator) {
        switch (arguments.length) {
            case 0:
                break;
            case 1:
                this.interpolator(domain);
                break;
            default:
                this.interpolator(interpolator).domain(domain);
                break;
        }
        return this;
    }

    var prefix = "$";
    function Map() {}
    Map.prototype = map$2.prototype = {
        constructor: Map,
        has: function (key) {
            return prefix + key in this;
        },
        get: function (key) {
            return this[prefix + key];
        },
        set: function (key, value) {
            this[prefix + key] = value;
            return this;
        },
        remove: function (key) {
            var property = prefix + key;
            return property in this && delete this[property];
        },
        clear: function () {
            for (var property in this) if (property[0] === prefix) delete this[property];
        },
        keys: function () {
            var keys = [];
            for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
            return keys;
        },
        values: function () {
            var values = [];
            for (var property in this) if (property[0] === prefix) values.push(this[property]);
            return values;
        },
        entries: function () {
            var entries = [];
            for (var property in this) if (property[0] === prefix) entries.push({
                key: property.slice(1),
                value: this[property]
            });
            return entries;
        },
        size: function () {
            var size = 0;
            for (var property in this) if (property[0] === prefix) ++size;
            return size;
        },
        empty: function () {
            for (var property in this) if (property[0] === prefix) return false;
            return true;
        },
        each: function (f) {
            for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
        }
    };
    function map$2(object, f) {
        var map = new Map();

        // Copy constructor.
        if (object instanceof Map) object.each(function (value, key) {
            map.set(key, value);
        });

        // Index array by numeric index or specified key function.
        else if (Array.isArray(object)) {
            var i = -1,
                n = object.length,
                o;
            if (f == null) while (++i < n) map.set(i, object[i]);else while (++i < n) map.set(f(o = object[i], i, object), o);
        }

        // Convert object to map.
        else if (object) for (var key in object) map.set(key, object[key]);
        return map;
    }

    function Set() {}
    var proto = map$2.prototype;
    Set.prototype = set.prototype = {
        constructor: Set,
        has: proto.has,
        add: function (value) {
            value += "";
            this[prefix + value] = value;
            return this;
        },
        remove: proto.remove,
        clear: proto.clear,
        values: proto.keys,
        size: proto.size,
        empty: proto.empty,
        each: proto.each
    };
    function set(object, f) {
        var set = new Set();

        // Copy constructor.
        if (object instanceof Set) object.each(function (value) {
            set.add(value);
        });

        // Otherwise, assume it’s an array.
        else if (object) {
            var i = -1,
                n = object.length;
            if (f == null) while (++i < n) set.add(object[i]);else while (++i < n) set.add(f(object[i], i, object));
        }
        return set;
    }

    var array$1 = Array.prototype;
    var map$3 = array$1.map;
    var slice$2 = array$1.slice;

    var implicit = {
        name: "implicit"
    };
    function ordinal() {
        var index = map$2(),
            domain = [],
            range = [],
            unknown = implicit;
        function scale(d) {
            var key = d + "",
                i = index.get(key);
            if (!i) {
                if (unknown !== implicit) return unknown;
                index.set(key, i = domain.push(d));
            }
            return range[(i - 1) % range.length];
        }
        scale.domain = function (_) {
            if (!arguments.length) return domain.slice();
            domain = [], index = map$2();
            var i = -1,
                n = _.length,
                d,
                key;
            while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
            return scale;
        };
        scale.range = function (_) {
            return arguments.length ? (range = slice$2.call(_), scale) : range.slice();
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        scale.copy = function () {
            return ordinal(domain, range).unknown(unknown);
        };
        initRange.apply(scale, arguments);
        return scale;
    }

    function band() {
        var scale = ordinal().unknown(undefined),
            domain = scale.domain,
            ordinalRange = scale.range,
            range = [0, 1],
            step,
            bandwidth,
            round = false,
            paddingInner = 0,
            paddingOuter = 0,
            align = 0.5;
        delete scale.unknown;
        function rescale() {
            var n = domain().length,
                reverse = range[1] < range[0],
                start = range[reverse - 0],
                stop = range[1 - reverse];
            step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
            if (round) step = Math.floor(step);
            start += (stop - start - step * (n - paddingInner)) * align;
            bandwidth = step * (1 - paddingInner);
            if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
            var values = sequence(n).map(function (i) {
                return start + step * i;
            });
            return ordinalRange(reverse ? values.reverse() : values);
        }
        scale.domain = function (_) {
            return arguments.length ? (domain(_), rescale()) : domain();
        };
        scale.range = function (_) {
            return arguments.length ? (range = [+_[0], +_[1]], rescale()) : range.slice();
        };
        scale.rangeRound = function (_) {
            return range = [+_[0], +_[1]], round = true, rescale();
        };
        scale.bandwidth = function () {
            return bandwidth;
        };
        scale.step = function () {
            return step;
        };
        scale.round = function (_) {
            return arguments.length ? (round = !!_, rescale()) : round;
        };
        scale.padding = function (_) {
            return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
        };
        scale.paddingInner = function (_) {
            return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
        };
        scale.paddingOuter = function (_) {
            return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
        };
        scale.align = function (_) {
            return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
        };
        scale.copy = function () {
            return band(domain(), range).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
        };
        return initRange.apply(rescale(), arguments);
    }
    function pointish(scale) {
        var copy = scale.copy;
        scale.padding = scale.paddingOuter;
        delete scale.paddingInner;
        delete scale.paddingOuter;
        scale.copy = function () {
            return pointish(copy());
        };
        return scale;
    }
    function point() {
        return pointish(band.apply(null, arguments).paddingInner(1));
    }

    function define (constructor, factory, prototype) {
        constructor.prototype = factory.prototype = prototype;
        prototype.constructor = constructor;
    }
    function extend(parent, definition) {
        var prototype = Object.create(parent.prototype);
        for (var key in definition) prototype[key] = definition[key];
        return prototype;
    }

    function Color() {}
    var darker = 0.7;
    var brighter = 1 / darker;
    var reI = "\\s*([+-]?\\d+)\\s*",
        reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
        reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
        reHex = /^#([0-9a-f]{3,8})$/,
        reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
        reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
        reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
        reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
        reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
        reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");
    var named = {
        aliceblue: 0xf0f8ff,
        antiquewhite: 0xfaebd7,
        aqua: 0x00ffff,
        aquamarine: 0x7fffd4,
        azure: 0xf0ffff,
        beige: 0xf5f5dc,
        bisque: 0xffe4c4,
        black: 0x000000,
        blanchedalmond: 0xffebcd,
        blue: 0x0000ff,
        blueviolet: 0x8a2be2,
        brown: 0xa52a2a,
        burlywood: 0xdeb887,
        cadetblue: 0x5f9ea0,
        chartreuse: 0x7fff00,
        chocolate: 0xd2691e,
        coral: 0xff7f50,
        cornflowerblue: 0x6495ed,
        cornsilk: 0xfff8dc,
        crimson: 0xdc143c,
        cyan: 0x00ffff,
        darkblue: 0x00008b,
        darkcyan: 0x008b8b,
        darkgoldenrod: 0xb8860b,
        darkgray: 0xa9a9a9,
        darkgreen: 0x006400,
        darkgrey: 0xa9a9a9,
        darkkhaki: 0xbdb76b,
        darkmagenta: 0x8b008b,
        darkolivegreen: 0x556b2f,
        darkorange: 0xff8c00,
        darkorchid: 0x9932cc,
        darkred: 0x8b0000,
        darksalmon: 0xe9967a,
        darkseagreen: 0x8fbc8f,
        darkslateblue: 0x483d8b,
        darkslategray: 0x2f4f4f,
        darkslategrey: 0x2f4f4f,
        darkturquoise: 0x00ced1,
        darkviolet: 0x9400d3,
        deeppink: 0xff1493,
        deepskyblue: 0x00bfff,
        dimgray: 0x696969,
        dimgrey: 0x696969,
        dodgerblue: 0x1e90ff,
        firebrick: 0xb22222,
        floralwhite: 0xfffaf0,
        forestgreen: 0x228b22,
        fuchsia: 0xff00ff,
        gainsboro: 0xdcdcdc,
        ghostwhite: 0xf8f8ff,
        gold: 0xffd700,
        goldenrod: 0xdaa520,
        gray: 0x808080,
        green: 0x008000,
        greenyellow: 0xadff2f,
        grey: 0x808080,
        honeydew: 0xf0fff0,
        hotpink: 0xff69b4,
        indianred: 0xcd5c5c,
        indigo: 0x4b0082,
        ivory: 0xfffff0,
        khaki: 0xf0e68c,
        lavender: 0xe6e6fa,
        lavenderblush: 0xfff0f5,
        lawngreen: 0x7cfc00,
        lemonchiffon: 0xfffacd,
        lightblue: 0xadd8e6,
        lightcoral: 0xf08080,
        lightcyan: 0xe0ffff,
        lightgoldenrodyellow: 0xfafad2,
        lightgray: 0xd3d3d3,
        lightgreen: 0x90ee90,
        lightgrey: 0xd3d3d3,
        lightpink: 0xffb6c1,
        lightsalmon: 0xffa07a,
        lightseagreen: 0x20b2aa,
        lightskyblue: 0x87cefa,
        lightslategray: 0x778899,
        lightslategrey: 0x778899,
        lightsteelblue: 0xb0c4de,
        lightyellow: 0xffffe0,
        lime: 0x00ff00,
        limegreen: 0x32cd32,
        linen: 0xfaf0e6,
        magenta: 0xff00ff,
        maroon: 0x800000,
        mediumaquamarine: 0x66cdaa,
        mediumblue: 0x0000cd,
        mediumorchid: 0xba55d3,
        mediumpurple: 0x9370db,
        mediumseagreen: 0x3cb371,
        mediumslateblue: 0x7b68ee,
        mediumspringgreen: 0x00fa9a,
        mediumturquoise: 0x48d1cc,
        mediumvioletred: 0xc71585,
        midnightblue: 0x191970,
        mintcream: 0xf5fffa,
        mistyrose: 0xffe4e1,
        moccasin: 0xffe4b5,
        navajowhite: 0xffdead,
        navy: 0x000080,
        oldlace: 0xfdf5e6,
        olive: 0x808000,
        olivedrab: 0x6b8e23,
        orange: 0xffa500,
        orangered: 0xff4500,
        orchid: 0xda70d6,
        palegoldenrod: 0xeee8aa,
        palegreen: 0x98fb98,
        paleturquoise: 0xafeeee,
        palevioletred: 0xdb7093,
        papayawhip: 0xffefd5,
        peachpuff: 0xffdab9,
        peru: 0xcd853f,
        pink: 0xffc0cb,
        plum: 0xdda0dd,
        powderblue: 0xb0e0e6,
        purple: 0x800080,
        rebeccapurple: 0x663399,
        red: 0xff0000,
        rosybrown: 0xbc8f8f,
        royalblue: 0x4169e1,
        saddlebrown: 0x8b4513,
        salmon: 0xfa8072,
        sandybrown: 0xf4a460,
        seagreen: 0x2e8b57,
        seashell: 0xfff5ee,
        sienna: 0xa0522d,
        silver: 0xc0c0c0,
        skyblue: 0x87ceeb,
        slateblue: 0x6a5acd,
        slategray: 0x708090,
        slategrey: 0x708090,
        snow: 0xfffafa,
        springgreen: 0x00ff7f,
        steelblue: 0x4682b4,
        tan: 0xd2b48c,
        teal: 0x008080,
        thistle: 0xd8bfd8,
        tomato: 0xff6347,
        turquoise: 0x40e0d0,
        violet: 0xee82ee,
        wheat: 0xf5deb3,
        white: 0xffffff,
        whitesmoke: 0xf5f5f5,
        yellow: 0xffff00,
        yellowgreen: 0x9acd32
    };
    define(Color, color, {
        copy: function (channels) {
            return Object.assign(new this.constructor(), this, channels);
        },
        displayable: function () {
            return this.rgb().displayable();
        },
        hex: color_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: color_formatHex,
        formatHsl: color_formatHsl,
        formatRgb: color_formatRgb,
        toString: color_formatRgb
    });
    function color_formatHex() {
        return this.rgb().formatHex();
    }
    function color_formatHsl() {
        return hslConvert(this).formatHsl();
    }
    function color_formatRgb() {
        return this.rgb().formatRgb();
    }
    function color(format) {
        var m, l;
        format = (format + "").trim().toLowerCase();
        return (m = reHex.exec(format)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) // #ff0000
                : l === 3 ? new Rgb(m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
                    : l === 8 ? rgba(m >> 24 & 0xff, m >> 16 & 0xff, m >> 8 & 0xff, (m & 0xff) / 0xff) // #ff000000
                        : l === 4 ? rgba(m >> 12 & 0xf | m >> 8 & 0xf0, m >> 8 & 0xf | m >> 4 & 0xf0, m >> 4 & 0xf | m & 0xf0, ((m & 0xf) << 4 | m & 0xf) / 0xff) // #f000
                            : null // invalid hex
        ) : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
            : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
                : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
                    : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
                        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
                            : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
                                : named.hasOwnProperty(format) ? rgbn(named[format]) // eslint-disable-line no-prototype-builtins
                                    : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
    }
    function rgbn(n) {
        return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
    }
    function rgba(r, g, b, a) {
        if (a <= 0) r = g = b = NaN;
        return new Rgb(r, g, b, a);
    }
    function rgbConvert(o) {
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Rgb();
        o = o.rgb();
        return new Rgb(o.r, o.g, o.b, o.opacity);
    }
    function rgb(r, g, b, opacity) {
        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
    }
    function Rgb(r, g, b, opacity) {
        this.r = +r;
        this.g = +g;
        this.b = +b;
        this.opacity = +opacity;
    }
    define(Rgb, rgb, extend(Color, {
        brighter: function (k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        darker: function (k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
        },
        rgb: function () {
            return this;
        },
        displayable: function () {
            return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
        },
        hex: rgb_formatHex,
        // Deprecated! Use color.formatHex.
        formatHex: rgb_formatHex,
        formatRgb: rgb_formatRgb,
        toString: rgb_formatRgb
    }));
    function rgb_formatHex() {
        return "#" + hex(this.r) + hex(this.g) + hex(this.b);
    }
    function rgb_formatRgb() {
        var a = this.opacity;
        a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
        return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
    }
    function hex(value) {
        value = Math.max(0, Math.min(255, Math.round(value) || 0));
        return (value < 16 ? "0" : "") + value.toString(16);
    }
    function hsla(h, s, l, a) {
        if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
        return new Hsl(h, s, l, a);
    }
    function hslConvert(o) {
        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Color)) o = color(o);
        if (!o) return new Hsl();
        if (o instanceof Hsl) return o;
        o = o.rgb();
        var r = o.r / 255,
            g = o.g / 255,
            b = o.b / 255,
            min = Math.min(r, g, b),
            max = Math.max(r, g, b),
            h = NaN,
            s = max - min,
            l = (max + min) / 2;
        if (s) {
            if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
            s /= l < 0.5 ? max + min : 2 - max - min;
            h *= 60;
        } else {
            s = l > 0 && l < 1 ? 0 : h;
        }
        return new Hsl(h, s, l, o.opacity);
    }
    function hsl(h, s, l, opacity) {
        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
    }
    function Hsl(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
    }
    define(Hsl, hsl, extend(Color, {
        brighter: function (k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function (k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Hsl(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function () {
            var h = this.h % 360 + (this.h < 0) * 360,
                s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
                l = this.l,
                m2 = l + (l < 0.5 ? l : 1 - l) * s,
                m1 = 2 * l - m2;
            return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
        },
        displayable: function () {
            return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
        },
        formatHsl: function () {
            var a = this.opacity;
            a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
            return (a === 1 ? "hsl(" : "hsla(") + (this.h || 0) + ", " + (this.s || 0) * 100 + "%, " + (this.l || 0) * 100 + "%" + (a === 1 ? ")" : ", " + a + ")");
        }
    }));

    /* From FvD 13.37, CSS Color Module Level 3 */
    function hsl2rgb(h, m1, m2) {
        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
    }

    var deg2rad = Math.PI / 180;
    var rad2deg = 180 / Math.PI;

    var A = -0.14861,
        B = +1.78277,
        C = -0.29227,
        D = -0.90649,
        E = +1.97294,
        ED = E * D,
        EB = E * B,
        BC_DA = B * C - D * A;
    function cubehelixConvert(o) {
        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
        if (!(o instanceof Rgb)) o = rgbConvert(o);
        var r = o.r / 255,
            g = o.g / 255,
            b = o.b / 255,
            l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
            bl = b - l,
            k = (E * (g - l) - C * bl) / D,
            s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
            // NaN if l=0 or l=1
            h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
    }
    function cubehelix(h, s, l, opacity) {
        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
    }
    function Cubehelix(h, s, l, opacity) {
        this.h = +h;
        this.s = +s;
        this.l = +l;
        this.opacity = +opacity;
    }
    define(Cubehelix, cubehelix, extend(Color, {
        brighter: function (k) {
            k = k == null ? brighter : Math.pow(brighter, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        darker: function (k) {
            k = k == null ? darker : Math.pow(darker, k);
            return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
        },
        rgb: function () {
            var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
                l = +this.l,
                a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
                cosh = Math.cos(h),
                sinh = Math.sin(h);
            return new Rgb(255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
        }
    }));

    function basis(t1, v0, v1, v2, v3) {
        var t2 = t1 * t1,
            t3 = t2 * t1;
        return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
    }
    function basis$1 (values) {
        var n = values.length - 1;
        return function (t) {
            var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
                v1 = values[i],
                v2 = values[i + 1],
                v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
                v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
            return basis((t - i / n) * n, v0, v1, v2, v3);
        };
    }

    function constant$2 (x) {
        return function () {
            return x;
        };
    }

    function linear$1(a, d) {
        return function (t) {
            return a + t * d;
        };
    }
    function exponential(a, b, y) {
        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
            return Math.pow(a + t * b, y);
        };
    }
    function hue(a, b) {
        var d = b - a;
        return d ? linear$1(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$2(isNaN(a) ? b : a);
    }
    function gamma(y) {
        return (y = +y) === 1 ? nogamma : function (a, b) {
            return b - a ? exponential(a, b, y) : constant$2(isNaN(a) ? b : a);
        };
    }
    function nogamma(a, b) {
        var d = b - a;
        return d ? linear$1(a, d) : constant$2(isNaN(a) ? b : a);
    }

    var interpolateRgb = (function rgbGamma(y) {
        var color = gamma(y);
        function rgb$1(start, end) {
            var r = color((start = rgb(start)).r, (end = rgb(end)).r),
                g = color(start.g, end.g),
                b = color(start.b, end.b),
                opacity = nogamma(start.opacity, end.opacity);
            return function (t) {
                start.r = r(t);
                start.g = g(t);
                start.b = b(t);
                start.opacity = opacity(t);
                return start + "";
            };
        }
        rgb$1.gamma = rgbGamma;
        return rgb$1;
    })(1);
    function rgbSpline(spline) {
        return function (colors) {
            var n = colors.length,
                r = new Array(n),
                g = new Array(n),
                b = new Array(n),
                i,
                color;
            for (i = 0; i < n; ++i) {
                color = rgb(colors[i]);
                r[i] = color.r || 0;
                g[i] = color.g || 0;
                b[i] = color.b || 0;
            }
            r = spline(r);
            g = spline(g);
            b = spline(b);
            color.opacity = 1;
            return function (t) {
                color.r = r(t);
                color.g = g(t);
                color.b = b(t);
                return color + "";
            };
        };
    }
    var rgbBasis = rgbSpline(basis$1);

    function numberArray (a, b) {
        if (!b) b = [];
        var n = a ? Math.min(b.length, a.length) : 0,
            c = b.slice(),
            i;
        return function (t) {
            for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t;
            return c;
        };
    }
    function isNumberArray(x) {
        return ArrayBuffer.isView(x) && !(x instanceof DataView);
    }

    function genericArray(a, b) {
        var nb = b ? b.length : 0,
            na = a ? Math.min(nb, a.length) : 0,
            x = new Array(na),
            c = new Array(nb),
            i;
        for (i = 0; i < na; ++i) x[i] = interpolateValue(a[i], b[i]);
        for (; i < nb; ++i) c[i] = b[i];
        return function (t) {
            for (i = 0; i < na; ++i) c[i] = x[i](t);
            return c;
        };
    }

    function date (a, b) {
        var d = new Date();
        return a = +a, b = +b, function (t) {
            return d.setTime(a * (1 - t) + b * t), d;
        };
    }

    function interpolateNumber (a, b) {
        return a = +a, b = +b, function (t) {
            return a * (1 - t) + b * t;
        };
    }

    function object$1 (a, b) {
        var i = {},
            c = {},
            k;
        if (a === null || typeof a !== "object") a = {};
        if (b === null || typeof b !== "object") b = {};
        for (k in b) {
            if (k in a) {
                i[k] = interpolateValue(a[k], b[k]);
            } else {
                c[k] = b[k];
            }
        }
        return function (t) {
            for (k in i) c[k] = i[k](t);
            return c;
        };
    }

    var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
        reB = new RegExp(reA.source, "g");
    function zero(b) {
        return function () {
            return b;
        };
    }
    function one(b) {
        return function (t) {
            return b(t) + "";
        };
    }
    function interpolateString (a, b) {
        var bi = reA.lastIndex = reB.lastIndex = 0,
            // scan index for next number in b
            am,
            // current match in a
            bm,
            // current match in b
            bs,
            // string preceding current number in b, if any
            i = -1,
            // index in s
            s = [],
            // string constants and placeholders
            q = []; // number interpolators

        // Coerce inputs to strings.
        a = a + "", b = b + "";

        // Interpolate pairs of numbers in a & b.
        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
            if ((bs = bm.index) > bi) {
                // a string precedes the next number in b
                bs = b.slice(bi, bs);
                if (s[i]) s[i] += bs; // coalesce with previous string
                else s[++i] = bs;
            }
            if ((am = am[0]) === (bm = bm[0])) {
                // numbers in a & b match
                if (s[i]) s[i] += bm; // coalesce with previous string
                else s[++i] = bm;
            } else {
                // interpolate non-matching numbers
                s[++i] = null;
                q.push({
                    i: i,
                    x: interpolateNumber(am, bm)
                });
            }
            bi = reB.lastIndex;
        }

        // Add remains of b.
        if (bi < b.length) {
            bs = b.slice(bi);
            if (s[i]) s[i] += bs; // coalesce with previous string
            else s[++i] = bs;
        }

        // Special optimization for only a single match.
        // Otherwise, interpolate each of the numbers and rejoin the string.
        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
            for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
            return s.join("");
        });
    }

    function interpolateValue (a, b) {
        var t = typeof b,
            c;
        return b == null || t === "boolean" ? constant$2(b) : (t === "number" ? interpolateNumber : t === "string" ? (c = color(b)) ? (b = c, interpolateRgb) : interpolateString : b instanceof color ? interpolateRgb : b instanceof Date ? date : isNumberArray(b) ? numberArray : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object$1 : interpolateNumber)(a, b);
    }

    function interpolateRound (a, b) {
        return a = +a, b = +b, function (t) {
            return Math.round(a * (1 - t) + b * t);
        };
    }

    var degrees$1 = 180 / Math.PI;
    var identity$5 = {
        translateX: 0,
        translateY: 0,
        rotate: 0,
        skewX: 0,
        scaleX: 1,
        scaleY: 1
    };
    function decompose (a, b, c, d, e, f) {
        var scaleX, scaleY, skewX;
        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
        return {
            translateX: e,
            translateY: f,
            rotate: Math.atan2(b, a) * degrees$1,
            skewX: Math.atan(skewX) * degrees$1,
            scaleX: scaleX,
            scaleY: scaleY
        };
    }

    var cssNode, cssRoot, cssView, svgNode;
    function parseCss(value) {
        if (value === "none") return identity$5;
        if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
        cssNode.style.transform = value;
        value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
        cssRoot.removeChild(cssNode);
        value = value.slice(7, -1).split(",");
        return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
    }
    function parseSvg(value) {
        if (value == null) return identity$5;
        if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
        svgNode.setAttribute("transform", value);
        if (!(value = svgNode.transform.baseVal.consolidate())) return identity$5;
        value = value.matrix;
        return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
    }

    function interpolateTransform(parse, pxComma, pxParen, degParen) {
        function pop(s) {
            return s.length ? s.pop() + " " : "";
        }
        function translate(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
                var i = s.push("translate(", null, pxComma, null, pxParen);
                q.push({
                    i: i - 4,
                    x: interpolateNumber(xa, xb)
                }, {
                    i: i - 2,
                    x: interpolateNumber(ya, yb)
                });
            } else if (xb || yb) {
                s.push("translate(" + xb + pxComma + yb + pxParen);
            }
        }
        function rotate(a, b, s, q) {
            if (a !== b) {
                if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
                q.push({
                    i: s.push(pop(s) + "rotate(", null, degParen) - 2,
                    x: interpolateNumber(a, b)
                });
            } else if (b) {
                s.push(pop(s) + "rotate(" + b + degParen);
            }
        }
        function skewX(a, b, s, q) {
            if (a !== b) {
                q.push({
                    i: s.push(pop(s) + "skewX(", null, degParen) - 2,
                    x: interpolateNumber(a, b)
                });
            } else if (b) {
                s.push(pop(s) + "skewX(" + b + degParen);
            }
        }
        function scale(xa, ya, xb, yb, s, q) {
            if (xa !== xb || ya !== yb) {
                var i = s.push(pop(s) + "scale(", null, ",", null, ")");
                q.push({
                    i: i - 4,
                    x: interpolateNumber(xa, xb)
                }, {
                    i: i - 2,
                    x: interpolateNumber(ya, yb)
                });
            } else if (xb !== 1 || yb !== 1) {
                s.push(pop(s) + "scale(" + xb + "," + yb + ")");
            }
        }
        return function (a, b) {
            var s = [],
                // string constants and placeholders
                q = []; // number interpolators
            a = parse(a), b = parse(b);
            translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
            rotate(a.rotate, b.rotate, s, q);
            skewX(a.skewX, b.skewX, s, q);
            scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
            a = b = null; // gc
            return function (t) {
                var i = -1,
                    n = q.length,
                    o;
                while (++i < n) s[(o = q[i]).i] = o.x(t);
                return s.join("");
            };
        };
    }
    var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
    var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

    var rho = Math.SQRT2,
        rho2 = 2,
        rho4 = 4,
        epsilon2$1 = 1e-12;
    function cosh(x) {
        return ((x = Math.exp(x)) + 1 / x) / 2;
    }
    function sinh(x) {
        return ((x = Math.exp(x)) - 1 / x) / 2;
    }
    function tanh(x) {
        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
    }

    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    function interpolateZoom (p0, p1) {
        var ux0 = p0[0],
            uy0 = p0[1],
            w0 = p0[2],
            ux1 = p1[0],
            uy1 = p1[1],
            w1 = p1[2],
            dx = ux1 - ux0,
            dy = uy1 - uy0,
            d2 = dx * dx + dy * dy,
            i,
            S;

        // Special case for u0 ≅ u1.
        if (d2 < epsilon2$1) {
            S = Math.log(w1 / w0) / rho;
            i = function (t) {
                return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
            };
        }

        // General case.
        else {
            var d1 = Math.sqrt(d2),
                b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
                b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
                r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
                r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
            S = (r1 - r0) / rho;
            i = function (t) {
                var s = t * S,
                    coshr0 = cosh(r0),
                    u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
                return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
            };
        }
        i.duration = S * 1000;
        return i;
    }

    function cubehelix$1(hue) {
        return function cubehelixGamma(y) {
            y = +y;
            function cubehelix$1(start, end) {
                var h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
                    s = nogamma(start.s, end.s),
                    l = nogamma(start.l, end.l),
                    opacity = nogamma(start.opacity, end.opacity);
                return function (t) {
                    start.h = h(t);
                    start.s = s(t);
                    start.l = l(Math.pow(t, y));
                    start.opacity = opacity(t);
                    return start + "";
                };
            }
            cubehelix$1.gamma = cubehelixGamma;
            return cubehelix$1;
        }(1);
    }
    cubehelix$1(hue);
    var cubehelixLong = cubehelix$1(nogamma);

    function constant$3 (x) {
        return function () {
            return x;
        };
    }

    function number$2 (x) {
        return +x;
    }

    var unit = [0, 1];
    function identity$6(x) {
        return x;
    }
    function normalize(a, b) {
        return (b -= a = +a) ? function (x) {
            return (x - a) / b;
        } : constant$3(isNaN(b) ? NaN : 0.5);
    }
    function clamper(domain) {
        var a = domain[0],
            b = domain[domain.length - 1],
            t;
        if (a > b) t = a, a = b, b = t;
        return function (x) {
            return Math.max(a, Math.min(b, x));
        };
    }

    // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
    // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
    function bimap(domain, range, interpolate) {
        var d0 = domain[0],
            d1 = domain[1],
            r0 = range[0],
            r1 = range[1];
        if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate(r1, r0);else d0 = normalize(d0, d1), r0 = interpolate(r0, r1);
        return function (x) {
            return r0(d0(x));
        };
    }
    function polymap(domain, range, interpolate) {
        var j = Math.min(domain.length, range.length) - 1,
            d = new Array(j),
            r = new Array(j),
            i = -1;

        // Reverse descending domains.
        if (domain[j] < domain[0]) {
            domain = domain.slice().reverse();
            range = range.slice().reverse();
        }
        while (++i < j) {
            d[i] = normalize(domain[i], domain[i + 1]);
            r[i] = interpolate(range[i], range[i + 1]);
        }
        return function (x) {
            var i = bisectRight(domain, x, 1, j) - 1;
            return r[i](d[i](x));
        };
    }
    function copy(source, target) {
        return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
    }
    function transformer$1() {
        var domain = unit,
            range = unit,
            interpolate = interpolateValue,
            transform,
            untransform,
            unknown,
            clamp = identity$6,
            piecewise,
            output,
            input;
        function rescale() {
            piecewise = Math.min(domain.length, range.length) > 2 ? polymap : bimap;
            output = input = null;
            return scale;
        }
        function scale(x) {
            return isNaN(x = +x) ? unknown : (output || (output = piecewise(domain.map(transform), range, interpolate)))(transform(clamp(x)));
        }
        scale.invert = function (y) {
            return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)));
        };
        scale.domain = function (_) {
            return arguments.length ? (domain = map$3.call(_, number$2), clamp === identity$6 || (clamp = clamper(domain)), rescale()) : domain.slice();
        };
        scale.range = function (_) {
            return arguments.length ? (range = slice$2.call(_), rescale()) : range.slice();
        };
        scale.rangeRound = function (_) {
            return range = slice$2.call(_), interpolate = interpolateRound, rescale();
        };
        scale.clamp = function (_) {
            return arguments.length ? (clamp = _ ? clamper(domain) : identity$6, scale) : clamp !== identity$6;
        };
        scale.interpolate = function (_) {
            return arguments.length ? (interpolate = _, rescale()) : interpolate;
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        return function (t, u) {
            transform = t, untransform = u;
            return rescale();
        };
    }
    function continuous(transform, untransform) {
        return transformer$1()(transform, untransform);
    }

    function tickFormat (start, stop, count, specifier) {
        var step = tickStep(start, stop, count),
            precision;
        specifier = formatSpecifier(specifier == null ? ",f" : specifier);
        switch (specifier.type) {
            case "s":
            {
                var value = Math.max(Math.abs(start), Math.abs(stop));
                if (specifier.precision == null && !isNaN(precision = precisionPrefix(step, value))) specifier.precision = precision;
                return formatPrefix(specifier, value);
            }
            case "":
            case "e":
            case "g":
            case "p":
            case "r":
            {
                if (specifier.precision == null && !isNaN(precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
                break;
            }
            case "f":
            case "%":
            {
                if (specifier.precision == null && !isNaN(precision = precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
                break;
            }
        }
        return format(specifier);
    }

    function linearish(scale) {
        var domain = scale.domain;
        scale.ticks = function (count) {
            var d = domain();
            return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
        };
        scale.tickFormat = function (count, specifier) {
            var d = domain();
            return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
        };
        scale.nice = function (count) {
            if (count == null) count = 10;
            var d = domain(),
                i0 = 0,
                i1 = d.length - 1,
                start = d[i0],
                stop = d[i1],
                step;
            if (stop < start) {
                step = start, start = stop, stop = step;
                step = i0, i0 = i1, i1 = step;
            }
            step = tickIncrement(start, stop, count);
            if (step > 0) {
                start = Math.floor(start / step) * step;
                stop = Math.ceil(stop / step) * step;
                step = tickIncrement(start, stop, count);
            } else if (step < 0) {
                start = Math.ceil(start * step) / step;
                stop = Math.floor(stop * step) / step;
                step = tickIncrement(start, stop, count);
            }
            if (step > 0) {
                d[i0] = Math.floor(start / step) * step;
                d[i1] = Math.ceil(stop / step) * step;
                domain(d);
            } else if (step < 0) {
                d[i0] = Math.ceil(start * step) / step;
                d[i1] = Math.floor(stop * step) / step;
                domain(d);
            }
            return scale;
        };
        return scale;
    }
    function linear$2() {
        var scale = continuous(identity$6, identity$6);
        scale.copy = function () {
            return copy(scale, linear$2());
        };
        initRange.apply(scale, arguments);
        return linearish(scale);
    }

    function identity$7(domain) {
        var unknown;
        function scale(x) {
            return isNaN(x = +x) ? unknown : x;
        }
        scale.invert = scale;
        scale.domain = scale.range = function (_) {
            return arguments.length ? (domain = map$3.call(_, number$2), scale) : domain.slice();
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        scale.copy = function () {
            return identity$7(domain).unknown(unknown);
        };
        domain = arguments.length ? map$3.call(domain, number$2) : [0, 1];
        return linearish(scale);
    }

    function nice (domain, interval) {
        domain = domain.slice();
        var i0 = 0,
            i1 = domain.length - 1,
            x0 = domain[i0],
            x1 = domain[i1],
            t;
        if (x1 < x0) {
            t = i0, i0 = i1, i1 = t;
            t = x0, x0 = x1, x1 = t;
        }
        domain[i0] = interval.floor(x0);
        domain[i1] = interval.ceil(x1);
        return domain;
    }

    function transformLog(x) {
        return Math.log(x);
    }
    function transformExp(x) {
        return Math.exp(x);
    }
    function transformLogn(x) {
        return -Math.log(-x);
    }
    function transformExpn(x) {
        return -Math.exp(-x);
    }
    function pow10(x) {
        return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
    }
    function powp(base) {
        return base === 10 ? pow10 : base === Math.E ? Math.exp : function (x) {
            return Math.pow(base, x);
        };
    }
    function logp(base) {
        return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), function (x) {
            return Math.log(x) / base;
        });
    }
    function reflect(f) {
        return function (x) {
            return -f(-x);
        };
    }
    function loggish(transform) {
        var scale = transform(transformLog, transformExp),
            domain = scale.domain,
            base = 10,
            logs,
            pows;
        function rescale() {
            logs = logp(base), pows = powp(base);
            if (domain()[0] < 0) {
                logs = reflect(logs), pows = reflect(pows);
                transform(transformLogn, transformExpn);
            } else {
                transform(transformLog, transformExp);
            }
            return scale;
        }
        scale.base = function (_) {
            return arguments.length ? (base = +_, rescale()) : base;
        };
        scale.domain = function (_) {
            return arguments.length ? (domain(_), rescale()) : domain();
        };
        scale.ticks = function (count) {
            var d = domain(),
                u = d[0],
                v = d[d.length - 1],
                r;
            if (r = v < u) i = u, u = v, v = i;
            var i = logs(u),
                j = logs(v),
                p,
                k,
                t,
                n = count == null ? 10 : +count,
                z = [];
            if (!(base % 1) && j - i < n) {
                i = Math.round(i) - 1, j = Math.round(j) + 1;
                if (u > 0) for (; i < j; ++i) {
                    for (k = 1, p = pows(i); k < base; ++k) {
                        t = p * k;
                        if (t < u) continue;
                        if (t > v) break;
                        z.push(t);
                    }
                } else for (; i < j; ++i) {
                    for (k = base - 1, p = pows(i); k >= 1; --k) {
                        t = p * k;
                        if (t < u) continue;
                        if (t > v) break;
                        z.push(t);
                    }
                }
            } else {
                z = ticks(i, j, Math.min(j - i, n)).map(pows);
            }
            return r ? z.reverse() : z;
        };
        scale.tickFormat = function (count, specifier) {
            if (specifier == null) specifier = base === 10 ? ".0e" : ",";
            if (typeof specifier !== "function") specifier = format(specifier);
            if (count === Infinity) return specifier;
            if (count == null) count = 10;
            var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
            return function (d) {
                var i = d / pows(Math.round(logs(d)));
                if (i * base < base - 0.5) i *= base;
                return i <= k ? specifier(d) : "";
            };
        };
        scale.nice = function () {
            return domain(nice(domain(), {
                floor: function (x) {
                    return pows(Math.floor(logs(x)));
                },
                ceil: function (x) {
                    return pows(Math.ceil(logs(x)));
                }
            }));
        };
        return scale;
    }
    function log$1() {
        var scale = loggish(transformer$1()).domain([1, 10]);
        scale.copy = function () {
            return copy(scale, log$1()).base(scale.base());
        };
        initRange.apply(scale, arguments);
        return scale;
    }

    function transformSymlog(c) {
        return function (x) {
            return Math.sign(x) * Math.log1p(Math.abs(x / c));
        };
    }
    function transformSymexp(c) {
        return function (x) {
            return Math.sign(x) * Math.expm1(Math.abs(x)) * c;
        };
    }
    function symlogish(transform) {
        var c = 1,
            scale = transform(transformSymlog(c), transformSymexp(c));
        scale.constant = function (_) {
            return arguments.length ? transform(transformSymlog(c = +_), transformSymexp(c)) : c;
        };
        return linearish(scale);
    }
    function symlog() {
        var scale = symlogish(transformer$1());
        scale.copy = function () {
            return copy(scale, symlog()).constant(scale.constant());
        };
        return initRange.apply(scale, arguments);
    }

    function transformPow(exponent) {
        return function (x) {
            return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
        };
    }
    function transformSqrt(x) {
        return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x);
    }
    function transformSquare(x) {
        return x < 0 ? -x * x : x * x;
    }
    function powish(transform) {
        var scale = transform(identity$6, identity$6),
            exponent = 1;
        function rescale() {
            return exponent === 1 ? transform(identity$6, identity$6) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
        }
        scale.exponent = function (_) {
            return arguments.length ? (exponent = +_, rescale()) : exponent;
        };
        return linearish(scale);
    }
    function pow$1() {
        var scale = powish(transformer$1());
        scale.copy = function () {
            return copy(scale, pow$1()).exponent(scale.exponent());
        };
        initRange.apply(scale, arguments);
        return scale;
    }
    function sqrt$1() {
        return pow$1.apply(null, arguments).exponent(0.5);
    }

    function quantile() {
        var domain = [],
            range = [],
            thresholds = [],
            unknown;
        function rescale() {
            var i = 0,
                n = Math.max(1, range.length);
            thresholds = new Array(n - 1);
            while (++i < n) thresholds[i - 1] = threshold(domain, i / n);
            return scale;
        }
        function scale(x) {
            return isNaN(x = +x) ? unknown : range[bisectRight(thresholds, x)];
        }
        scale.invertExtent = function (y) {
            var i = range.indexOf(y);
            return i < 0 ? [NaN, NaN] : [i > 0 ? thresholds[i - 1] : domain[0], i < thresholds.length ? thresholds[i] : domain[domain.length - 1]];
        };
        scale.domain = function (_) {
            if (!arguments.length) return domain.slice();
            domain = [];
            for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
            domain.sort(ascending);
            return rescale();
        };
        scale.range = function (_) {
            return arguments.length ? (range = slice$2.call(_), rescale()) : range.slice();
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        scale.quantiles = function () {
            return thresholds.slice();
        };
        scale.copy = function () {
            return quantile().domain(domain).range(range).unknown(unknown);
        };
        return initRange.apply(scale, arguments);
    }

    function quantize() {
        var x0 = 0,
            x1 = 1,
            n = 1,
            domain = [0.5],
            range = [0, 1],
            unknown;
        function scale(x) {
            return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
        }
        function rescale() {
            var i = -1;
            domain = new Array(n);
            while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
            return scale;
        }
        scale.domain = function (_) {
            return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
        };
        scale.range = function (_) {
            return arguments.length ? (n = (range = slice$2.call(_)).length - 1, rescale()) : range.slice();
        };
        scale.invertExtent = function (y) {
            var i = range.indexOf(y);
            return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : scale;
        };
        scale.thresholds = function () {
            return domain.slice();
        };
        scale.copy = function () {
            return quantize().domain([x0, x1]).range(range).unknown(unknown);
        };
        return initRange.apply(linearish(scale), arguments);
    }

    function threshold$1() {
        var domain = [0.5],
            range = [0, 1],
            unknown,
            n = 1;
        function scale(x) {
            return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown;
        }
        scale.domain = function (_) {
            return arguments.length ? (domain = slice$2.call(_), n = Math.min(domain.length, range.length - 1), scale) : domain.slice();
        };
        scale.range = function (_) {
            return arguments.length ? (range = slice$2.call(_), n = Math.min(domain.length, range.length - 1), scale) : range.slice();
        };
        scale.invertExtent = function (y) {
            var i = range.indexOf(y);
            return [domain[i - 1], domain[i]];
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        scale.copy = function () {
            return threshold$1().domain(domain).range(range).unknown(unknown);
        };
        return initRange.apply(scale, arguments);
    }

    var t0 = new Date(),
        t1 = new Date();
    function newInterval(floori, offseti, count, field) {
        function interval(date) {
            return floori(date = arguments.length === 0 ? new Date() : new Date(+date)), date;
        }
        interval.floor = function (date) {
            return floori(date = new Date(+date)), date;
        };
        interval.ceil = function (date) {
            return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
        };
        interval.round = function (date) {
            var d0 = interval(date),
                d1 = interval.ceil(date);
            return date - d0 < d1 - date ? d0 : d1;
        };
        interval.offset = function (date, step) {
            return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
        };
        interval.range = function (start, stop, step) {
            var range = [],
                previous;
            start = interval.ceil(start);
            step = step == null ? 1 : Math.floor(step);
            if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
            do range.push(previous = new Date(+start)), offseti(start, step), floori(start); while (previous < start && start < stop);
            return range;
        };
        interval.filter = function (test) {
            return newInterval(function (date) {
                if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
            }, function (date, step) {
                if (date >= date) {
                    if (step < 0) while (++step <= 0) {
                        while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
                    } else while (--step >= 0) {
                        while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
                    }
                }
            });
        };
        if (count) {
            interval.count = function (start, end) {
                t0.setTime(+start), t1.setTime(+end);
                floori(t0), floori(t1);
                return Math.floor(count(t0, t1));
            };
            interval.every = function (step) {
                step = Math.floor(step);
                return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? function (d) {
                    return field(d) % step === 0;
                } : function (d) {
                    return interval.count(0, d) % step === 0;
                });
            };
        }
        return interval;
    }

    var millisecond = newInterval(function () {
        // noop
    }, function (date, step) {
        date.setTime(+date + step);
    }, function (start, end) {
        return end - start;
    });

    // An optimized implementation for this simple case.
    millisecond.every = function (k) {
        k = Math.floor(k);
        if (!isFinite(k) || !(k > 0)) return null;
        if (!(k > 1)) return millisecond;
        return newInterval(function (date) {
            date.setTime(Math.floor(date / k) * k);
        }, function (date, step) {
            date.setTime(+date + step * k);
        }, function (start, end) {
            return (end - start) / k;
        });
    };

    var durationSecond = 1e3;
    var durationMinute = 6e4;
    var durationHour = 36e5;
    var durationDay = 864e5;
    var durationWeek = 6048e5;

    var second = newInterval(function (date) {
        date.setTime(date - date.getMilliseconds());
    }, function (date, step) {
        date.setTime(+date + step * durationSecond);
    }, function (start, end) {
        return (end - start) / durationSecond;
    }, function (date) {
        return date.getUTCSeconds();
    });

    var minute = newInterval(function (date) {
        date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond);
    }, function (date, step) {
        date.setTime(+date + step * durationMinute);
    }, function (start, end) {
        return (end - start) / durationMinute;
    }, function (date) {
        return date.getMinutes();
    });

    var hour = newInterval(function (date) {
        date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute);
    }, function (date, step) {
        date.setTime(+date + step * durationHour);
    }, function (start, end) {
        return (end - start) / durationHour;
    }, function (date) {
        return date.getHours();
    });

    var day = newInterval(function (date) {
        date.setHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setDate(date.getDate() + step);
    }, function (start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
    }, function (date) {
        return date.getDate() - 1;
    });

    function weekday(i) {
        return newInterval(function (date) {
            date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
            date.setHours(0, 0, 0, 0);
        }, function (date, step) {
            date.setDate(date.getDate() + step * 7);
        }, function (start, end) {
            return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
        });
    }
    var sunday = weekday(0);
    var monday = weekday(1);
    var tuesday = weekday(2);
    var wednesday = weekday(3);
    var thursday = weekday(4);
    var friday = weekday(5);
    var saturday = weekday(6);

    var month = newInterval(function (date) {
        date.setDate(1);
        date.setHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setMonth(date.getMonth() + step);
    }, function (start, end) {
        return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
    }, function (date) {
        return date.getMonth();
    });

    var year = newInterval(function (date) {
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setFullYear(date.getFullYear() + step);
    }, function (start, end) {
        return end.getFullYear() - start.getFullYear();
    }, function (date) {
        return date.getFullYear();
    });

    // An optimized implementation for this simple case.
    year.every = function (k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
            date.setFullYear(Math.floor(date.getFullYear() / k) * k);
            date.setMonth(0, 1);
            date.setHours(0, 0, 0, 0);
        }, function (date, step) {
            date.setFullYear(date.getFullYear() + step * k);
        });
    };

    var utcMinute = newInterval(function (date) {
        date.setUTCSeconds(0, 0);
    }, function (date, step) {
        date.setTime(+date + step * durationMinute);
    }, function (start, end) {
        return (end - start) / durationMinute;
    }, function (date) {
        return date.getUTCMinutes();
    });

    var utcHour = newInterval(function (date) {
        date.setUTCMinutes(0, 0, 0);
    }, function (date, step) {
        date.setTime(+date + step * durationHour);
    }, function (start, end) {
        return (end - start) / durationHour;
    }, function (date) {
        return date.getUTCHours();
    });

    var utcDay = newInterval(function (date) {
        date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setUTCDate(date.getUTCDate() + step);
    }, function (start, end) {
        return (end - start) / durationDay;
    }, function (date) {
        return date.getUTCDate() - 1;
    });

    function utcWeekday(i) {
        return newInterval(function (date) {
            date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
            date.setUTCHours(0, 0, 0, 0);
        }, function (date, step) {
            date.setUTCDate(date.getUTCDate() + step * 7);
        }, function (start, end) {
            return (end - start) / durationWeek;
        });
    }
    var utcSunday = utcWeekday(0);
    var utcMonday = utcWeekday(1);
    var utcTuesday = utcWeekday(2);
    var utcWednesday = utcWeekday(3);
    var utcThursday = utcWeekday(4);
    var utcFriday = utcWeekday(5);
    var utcSaturday = utcWeekday(6);

    var utcMonth = newInterval(function (date) {
        date.setUTCDate(1);
        date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setUTCMonth(date.getUTCMonth() + step);
    }, function (start, end) {
        return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
    }, function (date) {
        return date.getUTCMonth();
    });

    var utcYear = newInterval(function (date) {
        date.setUTCMonth(0, 1);
        date.setUTCHours(0, 0, 0, 0);
    }, function (date, step) {
        date.setUTCFullYear(date.getUTCFullYear() + step);
    }, function (start, end) {
        return end.getUTCFullYear() - start.getUTCFullYear();
    }, function (date) {
        return date.getUTCFullYear();
    });

    // An optimized implementation for this simple case.
    utcYear.every = function (k) {
        return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function (date) {
            date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
            date.setUTCMonth(0, 1);
            date.setUTCHours(0, 0, 0, 0);
        }, function (date, step) {
            date.setUTCFullYear(date.getUTCFullYear() + step * k);
        });
    };

    function localDate(d) {
        if (0 <= d.y && d.y < 100) {
            var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
            date.setFullYear(d.y);
            return date;
        }
        return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
    }
    function utcDate(d) {
        if (0 <= d.y && d.y < 100) {
            var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
            date.setUTCFullYear(d.y);
            return date;
        }
        return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
    }
    function newDate(y, m, d) {
        return {
            y: y,
            m: m,
            d: d,
            H: 0,
            M: 0,
            S: 0,
            L: 0
        };
    }
    function formatLocale$1(locale) {
        var locale_dateTime = locale.dateTime,
            locale_date = locale.date,
            locale_time = locale.time,
            locale_periods = locale.periods,
            locale_weekdays = locale.days,
            locale_shortWeekdays = locale.shortDays,
            locale_months = locale.months,
            locale_shortMonths = locale.shortMonths;
        var periodRe = formatRe(locale_periods),
            periodLookup = formatLookup(locale_periods),
            weekdayRe = formatRe(locale_weekdays),
            weekdayLookup = formatLookup(locale_weekdays),
            shortWeekdayRe = formatRe(locale_shortWeekdays),
            shortWeekdayLookup = formatLookup(locale_shortWeekdays),
            monthRe = formatRe(locale_months),
            monthLookup = formatLookup(locale_months),
            shortMonthRe = formatRe(locale_shortMonths),
            shortMonthLookup = formatLookup(locale_shortMonths);
        var formats = {
            "a": formatShortWeekday,
            "A": formatWeekday,
            "b": formatShortMonth,
            "B": formatMonth,
            "c": null,
            "d": formatDayOfMonth,
            "e": formatDayOfMonth,
            "f": formatMicroseconds,
            "g": formatYearISO,
            "G": formatFullYearISO,
            "H": formatHour24,
            "I": formatHour12,
            "j": formatDayOfYear,
            "L": formatMilliseconds,
            "m": formatMonthNumber,
            "M": formatMinutes,
            "p": formatPeriod,
            "q": formatQuarter,
            "Q": formatUnixTimestamp,
            "s": formatUnixTimestampSeconds,
            "S": formatSeconds,
            "u": formatWeekdayNumberMonday,
            "U": formatWeekNumberSunday,
            "V": formatWeekNumberISO,
            "w": formatWeekdayNumberSunday,
            "W": formatWeekNumberMonday,
            "x": null,
            "X": null,
            "y": formatYear,
            "Y": formatFullYear,
            "Z": formatZone,
            "%": formatLiteralPercent
        };
        var utcFormats = {
            "a": formatUTCShortWeekday,
            "A": formatUTCWeekday,
            "b": formatUTCShortMonth,
            "B": formatUTCMonth,
            "c": null,
            "d": formatUTCDayOfMonth,
            "e": formatUTCDayOfMonth,
            "f": formatUTCMicroseconds,
            "g": formatUTCYearISO,
            "G": formatUTCFullYearISO,
            "H": formatUTCHour24,
            "I": formatUTCHour12,
            "j": formatUTCDayOfYear,
            "L": formatUTCMilliseconds,
            "m": formatUTCMonthNumber,
            "M": formatUTCMinutes,
            "p": formatUTCPeriod,
            "q": formatUTCQuarter,
            "Q": formatUnixTimestamp,
            "s": formatUnixTimestampSeconds,
            "S": formatUTCSeconds,
            "u": formatUTCWeekdayNumberMonday,
            "U": formatUTCWeekNumberSunday,
            "V": formatUTCWeekNumberISO,
            "w": formatUTCWeekdayNumberSunday,
            "W": formatUTCWeekNumberMonday,
            "x": null,
            "X": null,
            "y": formatUTCYear,
            "Y": formatUTCFullYear,
            "Z": formatUTCZone,
            "%": formatLiteralPercent
        };
        var parses = {
            "a": parseShortWeekday,
            "A": parseWeekday,
            "b": parseShortMonth,
            "B": parseMonth,
            "c": parseLocaleDateTime,
            "d": parseDayOfMonth,
            "e": parseDayOfMonth,
            "f": parseMicroseconds,
            "g": parseYear,
            "G": parseFullYear,
            "H": parseHour24,
            "I": parseHour24,
            "j": parseDayOfYear,
            "L": parseMilliseconds,
            "m": parseMonthNumber,
            "M": parseMinutes,
            "p": parsePeriod,
            "q": parseQuarter,
            "Q": parseUnixTimestamp,
            "s": parseUnixTimestampSeconds,
            "S": parseSeconds,
            "u": parseWeekdayNumberMonday,
            "U": parseWeekNumberSunday,
            "V": parseWeekNumberISO,
            "w": parseWeekdayNumberSunday,
            "W": parseWeekNumberMonday,
            "x": parseLocaleDate,
            "X": parseLocaleTime,
            "y": parseYear,
            "Y": parseFullYear,
            "Z": parseZone,
            "%": parseLiteralPercent
        };

        // These recursive directive definitions must be deferred.
        formats.x = newFormat(locale_date, formats);
        formats.X = newFormat(locale_time, formats);
        formats.c = newFormat(locale_dateTime, formats);
        utcFormats.x = newFormat(locale_date, utcFormats);
        utcFormats.X = newFormat(locale_time, utcFormats);
        utcFormats.c = newFormat(locale_dateTime, utcFormats);
        function newFormat(specifier, formats) {
            return function (date) {
                var string = [],
                    i = -1,
                    j = 0,
                    n = specifier.length,
                    c,
                    pad,
                    format;
                if (!(date instanceof Date)) date = new Date(+date);
                while (++i < n) {
                    if (specifier.charCodeAt(i) === 37) {
                        string.push(specifier.slice(j, i));
                        if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);else pad = c === "e" ? " " : "0";
                        if (format = formats[c]) c = format(date, pad);
                        string.push(c);
                        j = i + 1;
                    }
                }
                string.push(specifier.slice(j, i));
                return string.join("");
            };
        }
        function newParse(specifier, Z) {
            return function (string) {
                var d = newDate(1900, undefined, 1),
                    i = parseSpecifier(d, specifier, string += "", 0),
                    week,
                    day$1;
                if (i != string.length) return null;

                // If a UNIX timestamp is specified, return it.
                if ("Q" in d) return new Date(d.Q);
                if ("s" in d) return new Date(d.s * 1000 + ("L" in d ? d.L : 0));

                // If this is utcParse, never use the local timezone.
                if (Z && !("Z" in d)) d.Z = 0;

                // The am-pm flag is 0 for AM, and 1 for PM.
                if ("p" in d) d.H = d.H % 12 + d.p * 12;

                // If the month was not specified, inherit from the quarter.
                if (d.m === undefined) d.m = "q" in d ? d.q : 0;

                // Convert day-of-week and week-of-year to day-of-year.
                if ("V" in d) {
                    if (d.V < 1 || d.V > 53) return null;
                    if (!("w" in d)) d.w = 1;
                    if ("Z" in d) {
                        week = utcDate(newDate(d.y, 0, 1)), day$1 = week.getUTCDay();
                        week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week);
                        week = utcDay.offset(week, (d.V - 1) * 7);
                        d.y = week.getUTCFullYear();
                        d.m = week.getUTCMonth();
                        d.d = week.getUTCDate() + (d.w + 6) % 7;
                    } else {
                        week = localDate(newDate(d.y, 0, 1)), day$1 = week.getDay();
                        week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week);
                        week = day.offset(week, (d.V - 1) * 7);
                        d.y = week.getFullYear();
                        d.m = week.getMonth();
                        d.d = week.getDate() + (d.w + 6) % 7;
                    }
                } else if ("W" in d || "U" in d) {
                    if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
                    day$1 = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
                    d.m = 0;
                    d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day$1 + 5) % 7 : d.w + d.U * 7 - (day$1 + 6) % 7;
                }

                // If a time zone is specified, all fields are interpreted as UTC and then
                // offset according to the specified time zone.
                if ("Z" in d) {
                    d.H += d.Z / 100 | 0;
                    d.M += d.Z % 100;
                    return utcDate(d);
                }

                // Otherwise, all fields are in local time.
                return localDate(d);
            };
        }
        function parseSpecifier(d, specifier, string, j) {
            var i = 0,
                n = specifier.length,
                m = string.length,
                c,
                parse;
            while (i < n) {
                if (j >= m) return -1;
                c = specifier.charCodeAt(i++);
                if (c === 37) {
                    c = specifier.charAt(i++);
                    parse = parses[c in pads ? specifier.charAt(i++) : c];
                    if (!parse || (j = parse(d, string, j)) < 0) return -1;
                } else if (c != string.charCodeAt(j++)) {
                    return -1;
                }
            }
            return j;
        }
        function parsePeriod(d, string, i) {
            var n = periodRe.exec(string.slice(i));
            return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseShortWeekday(d, string, i) {
            var n = shortWeekdayRe.exec(string.slice(i));
            return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseWeekday(d, string, i) {
            var n = weekdayRe.exec(string.slice(i));
            return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseShortMonth(d, string, i) {
            var n = shortMonthRe.exec(string.slice(i));
            return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseMonth(d, string, i) {
            var n = monthRe.exec(string.slice(i));
            return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
        }
        function parseLocaleDateTime(d, string, i) {
            return parseSpecifier(d, locale_dateTime, string, i);
        }
        function parseLocaleDate(d, string, i) {
            return parseSpecifier(d, locale_date, string, i);
        }
        function parseLocaleTime(d, string, i) {
            return parseSpecifier(d, locale_time, string, i);
        }
        function formatShortWeekday(d) {
            return locale_shortWeekdays[d.getDay()];
        }
        function formatWeekday(d) {
            return locale_weekdays[d.getDay()];
        }
        function formatShortMonth(d) {
            return locale_shortMonths[d.getMonth()];
        }
        function formatMonth(d) {
            return locale_months[d.getMonth()];
        }
        function formatPeriod(d) {
            return locale_periods[+(d.getHours() >= 12)];
        }
        function formatQuarter(d) {
            return 1 + ~~(d.getMonth() / 3);
        }
        function formatUTCShortWeekday(d) {
            return locale_shortWeekdays[d.getUTCDay()];
        }
        function formatUTCWeekday(d) {
            return locale_weekdays[d.getUTCDay()];
        }
        function formatUTCShortMonth(d) {
            return locale_shortMonths[d.getUTCMonth()];
        }
        function formatUTCMonth(d) {
            return locale_months[d.getUTCMonth()];
        }
        function formatUTCPeriod(d) {
            return locale_periods[+(d.getUTCHours() >= 12)];
        }
        function formatUTCQuarter(d) {
            return 1 + ~~(d.getUTCMonth() / 3);
        }
        return {
            format: function (specifier) {
                var f = newFormat(specifier += "", formats);
                f.toString = function () {
                    return specifier;
                };
                return f;
            },
            parse: function (specifier) {
                var p = newParse(specifier += "", false);
                p.toString = function () {
                    return specifier;
                };
                return p;
            },
            utcFormat: function (specifier) {
                var f = newFormat(specifier += "", utcFormats);
                f.toString = function () {
                    return specifier;
                };
                return f;
            },
            utcParse: function (specifier) {
                var p = newParse(specifier += "", true);
                p.toString = function () {
                    return specifier;
                };
                return p;
            }
        };
    }
    var pads = {
            "-": "",
            "_": " ",
            "0": "0"
        },
        numberRe = /^\s*\d+/,
        // note: ignores next directive
        percentRe = /^%/,
        requoteRe = /[\\^$*+?|[\]().{}]/g;
    function pad(value, fill, width) {
        var sign = value < 0 ? "-" : "",
            string = (sign ? -value : value) + "",
            length = string.length;
        return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
    }
    function requote(s) {
        return s.replace(requoteRe, "\\$&");
    }
    function formatRe(names) {
        return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
    }
    function formatLookup(names) {
        var map = {},
            i = -1,
            n = names.length;
        while (++i < n) map[names[i].toLowerCase()] = i;
        return map;
    }
    function parseWeekdayNumberSunday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.w = +n[0], i + n[0].length) : -1;
    }
    function parseWeekdayNumberMonday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.u = +n[0], i + n[0].length) : -1;
    }
    function parseWeekNumberSunday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.U = +n[0], i + n[0].length) : -1;
    }
    function parseWeekNumberISO(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.V = +n[0], i + n[0].length) : -1;
    }
    function parseWeekNumberMonday(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.W = +n[0], i + n[0].length) : -1;
    }
    function parseFullYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 4));
        return n ? (d.y = +n[0], i + n[0].length) : -1;
    }
    function parseYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
    }
    function parseZone(d, string, i) {
        var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
        return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
    }
    function parseQuarter(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 1));
        return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
    }
    function parseMonthNumber(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
    }
    function parseDayOfMonth(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.d = +n[0], i + n[0].length) : -1;
    }
    function parseDayOfYear(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
    }
    function parseHour24(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.H = +n[0], i + n[0].length) : -1;
    }
    function parseMinutes(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.M = +n[0], i + n[0].length) : -1;
    }
    function parseSeconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 2));
        return n ? (d.S = +n[0], i + n[0].length) : -1;
    }
    function parseMilliseconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 3));
        return n ? (d.L = +n[0], i + n[0].length) : -1;
    }
    function parseMicroseconds(d, string, i) {
        var n = numberRe.exec(string.slice(i, i + 6));
        return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
    }
    function parseLiteralPercent(d, string, i) {
        var n = percentRe.exec(string.slice(i, i + 1));
        return n ? i + n[0].length : -1;
    }
    function parseUnixTimestamp(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.Q = +n[0], i + n[0].length) : -1;
    }
    function parseUnixTimestampSeconds(d, string, i) {
        var n = numberRe.exec(string.slice(i));
        return n ? (d.s = +n[0], i + n[0].length) : -1;
    }
    function formatDayOfMonth(d, p) {
        return pad(d.getDate(), p, 2);
    }
    function formatHour24(d, p) {
        return pad(d.getHours(), p, 2);
    }
    function formatHour12(d, p) {
        return pad(d.getHours() % 12 || 12, p, 2);
    }
    function formatDayOfYear(d, p) {
        return pad(1 + day.count(year(d), d), p, 3);
    }
    function formatMilliseconds(d, p) {
        return pad(d.getMilliseconds(), p, 3);
    }
    function formatMicroseconds(d, p) {
        return formatMilliseconds(d, p) + "000";
    }
    function formatMonthNumber(d, p) {
        return pad(d.getMonth() + 1, p, 2);
    }
    function formatMinutes(d, p) {
        return pad(d.getMinutes(), p, 2);
    }
    function formatSeconds(d, p) {
        return pad(d.getSeconds(), p, 2);
    }
    function formatWeekdayNumberMonday(d) {
        var day = d.getDay();
        return day === 0 ? 7 : day;
    }
    function formatWeekNumberSunday(d, p) {
        return pad(sunday.count(year(d) - 1, d), p, 2);
    }
    function dISO(d) {
        var day = d.getDay();
        return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
    }
    function formatWeekNumberISO(d, p) {
        d = dISO(d);
        return pad(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2);
    }
    function formatWeekdayNumberSunday(d) {
        return d.getDay();
    }
    function formatWeekNumberMonday(d, p) {
        return pad(monday.count(year(d) - 1, d), p, 2);
    }
    function formatYear(d, p) {
        return pad(d.getFullYear() % 100, p, 2);
    }
    function formatYearISO(d, p) {
        d = dISO(d);
        return pad(d.getFullYear() % 100, p, 2);
    }
    function formatFullYear(d, p) {
        return pad(d.getFullYear() % 10000, p, 4);
    }
    function formatFullYearISO(d, p) {
        var day = d.getDay();
        d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d);
        return pad(d.getFullYear() % 10000, p, 4);
    }
    function formatZone(d) {
        var z = d.getTimezoneOffset();
        return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
    }
    function formatUTCDayOfMonth(d, p) {
        return pad(d.getUTCDate(), p, 2);
    }
    function formatUTCHour24(d, p) {
        return pad(d.getUTCHours(), p, 2);
    }
    function formatUTCHour12(d, p) {
        return pad(d.getUTCHours() % 12 || 12, p, 2);
    }
    function formatUTCDayOfYear(d, p) {
        return pad(1 + utcDay.count(utcYear(d), d), p, 3);
    }
    function formatUTCMilliseconds(d, p) {
        return pad(d.getUTCMilliseconds(), p, 3);
    }
    function formatUTCMicroseconds(d, p) {
        return formatUTCMilliseconds(d, p) + "000";
    }
    function formatUTCMonthNumber(d, p) {
        return pad(d.getUTCMonth() + 1, p, 2);
    }
    function formatUTCMinutes(d, p) {
        return pad(d.getUTCMinutes(), p, 2);
    }
    function formatUTCSeconds(d, p) {
        return pad(d.getUTCSeconds(), p, 2);
    }
    function formatUTCWeekdayNumberMonday(d) {
        var dow = d.getUTCDay();
        return dow === 0 ? 7 : dow;
    }
    function formatUTCWeekNumberSunday(d, p) {
        return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
    }
    function UTCdISO(d) {
        var day = d.getUTCDay();
        return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
    }
    function formatUTCWeekNumberISO(d, p) {
        d = UTCdISO(d);
        return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
    }
    function formatUTCWeekdayNumberSunday(d) {
        return d.getUTCDay();
    }
    function formatUTCWeekNumberMonday(d, p) {
        return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
    }
    function formatUTCYear(d, p) {
        return pad(d.getUTCFullYear() % 100, p, 2);
    }
    function formatUTCYearISO(d, p) {
        d = UTCdISO(d);
        return pad(d.getUTCFullYear() % 100, p, 2);
    }
    function formatUTCFullYear(d, p) {
        return pad(d.getUTCFullYear() % 10000, p, 4);
    }
    function formatUTCFullYearISO(d, p) {
        var day = d.getUTCDay();
        d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
        return pad(d.getUTCFullYear() % 10000, p, 4);
    }
    function formatUTCZone() {
        return "+0000";
    }
    function formatLiteralPercent() {
        return "%";
    }
    function formatUnixTimestamp(d) {
        return +d;
    }
    function formatUnixTimestampSeconds(d) {
        return Math.floor(+d / 1000);
    }

    var locale$1;
    var timeFormat;
    var timeParse;
    var utcFormat;
    var utcParse;
    defaultLocale$1({
        dateTime: "%x, %X",
        date: "%-m/%-d/%Y",
        time: "%-I:%M:%S %p",
        periods: ["AM", "PM"],
        days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
        months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
    });
    function defaultLocale$1(definition) {
        locale$1 = formatLocale$1(definition);
        timeFormat = locale$1.format;
        timeParse = locale$1.parse;
        utcFormat = locale$1.utcFormat;
        utcParse = locale$1.utcParse;
        return locale$1;
    }

    var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";
    function formatIsoNative(date) {
        return date.toISOString();
    }
    var formatIso = Date.prototype.toISOString ? formatIsoNative : utcFormat(isoSpecifier);

    function parseIsoNative(string) {
        var date = new Date(string);
        return isNaN(date) ? null : date;
    }
    var parseIso = +new Date("2000-01-01T00:00:00.000Z") ? parseIsoNative : utcParse(isoSpecifier);

    var durationSecond$1 = 1000,
        durationMinute$1 = durationSecond$1 * 60,
        durationHour$1 = durationMinute$1 * 60,
        durationDay$1 = durationHour$1 * 24,
        durationWeek$1 = durationDay$1 * 7,
        durationMonth = durationDay$1 * 30,
        durationYear = durationDay$1 * 365;
    function date$1(t) {
        return new Date(t);
    }
    function number$3(t) {
        return t instanceof Date ? +t : +new Date(+t);
    }
    function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
        var scale = continuous(identity$6, identity$6),
            invert = scale.invert,
            domain = scale.domain;
        var formatMillisecond = format(".%L"),
            formatSecond = format(":%S"),
            formatMinute = format("%I:%M"),
            formatHour = format("%I %p"),
            formatDay = format("%a %d"),
            formatWeek = format("%b %d"),
            formatMonth = format("%B"),
            formatYear = format("%Y");
        var tickIntervals = [[second, 1, durationSecond$1], [second, 5, 5 * durationSecond$1], [second, 15, 15 * durationSecond$1], [second, 30, 30 * durationSecond$1], [minute, 1, durationMinute$1], [minute, 5, 5 * durationMinute$1], [minute, 15, 15 * durationMinute$1], [minute, 30, 30 * durationMinute$1], [hour, 1, durationHour$1], [hour, 3, 3 * durationHour$1], [hour, 6, 6 * durationHour$1], [hour, 12, 12 * durationHour$1], [day, 1, durationDay$1], [day, 2, 2 * durationDay$1], [week, 1, durationWeek$1], [month, 1, durationMonth], [month, 3, 3 * durationMonth], [year, 1, durationYear]];
        function tickFormat(date) {
            return (second(date) < date ? formatMillisecond : minute(date) < date ? formatSecond : hour(date) < date ? formatMinute : day(date) < date ? formatHour : month(date) < date ? week(date) < date ? formatDay : formatWeek : year(date) < date ? formatMonth : formatYear)(date);
        }
        function tickInterval(interval, start, stop, step) {
            if (interval == null) interval = 10;

            // If a desired tick count is specified, pick a reasonable tick interval
            // based on the extent of the domain and a rough estimate of tick size.
            // Otherwise, assume interval is already a time interval and use it.
            if (typeof interval === "number") {
                var target = Math.abs(stop - start) / interval,
                    i = bisector(function (i) {
                        return i[2];
                    }).right(tickIntervals, target);
                if (i === tickIntervals.length) {
                    step = tickStep(start / durationYear, stop / durationYear, interval);
                    interval = year;
                } else if (i) {
                    i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
                    step = i[1];
                    interval = i[0];
                } else {
                    step = Math.max(tickStep(start, stop, interval), 1);
                    interval = millisecond;
                }
            }
            return step == null ? interval : interval.every(step);
        }
        scale.invert = function (y) {
            return new Date(invert(y));
        };
        scale.domain = function (_) {
            return arguments.length ? domain(map$3.call(_, number$3)) : domain().map(date$1);
        };
        scale.ticks = function (interval, step) {
            var d = domain(),
                t0 = d[0],
                t1 = d[d.length - 1],
                r = t1 < t0,
                t;
            if (r) t = t0, t0 = t1, t1 = t;
            t = tickInterval(interval, t0, t1, step);
            t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
            return r ? t.reverse() : t;
        };
        scale.tickFormat = function (count, specifier) {
            return specifier == null ? tickFormat : format(specifier);
        };
        scale.nice = function (interval, step) {
            var d = domain();
            return (interval = tickInterval(interval, d[0], d[d.length - 1], step)) ? domain(nice(d, interval)) : scale;
        };
        scale.copy = function () {
            return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format));
        };
        return scale;
    }
    function time () {
        return initRange.apply(calendar(year, month, sunday, day, hour, minute, second, millisecond, timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]), arguments);
    }

    function utcTime () {
        return initRange.apply(calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]), arguments);
    }

    function transformer$2() {
        var x0 = 0,
            x1 = 1,
            t0,
            t1,
            k10,
            transform,
            interpolator = identity$6,
            clamp = false,
            unknown;
        function scale(x) {
            return isNaN(x = +x) ? unknown : interpolator(k10 === 0 ? 0.5 : (x = (transform(x) - t0) * k10, clamp ? Math.max(0, Math.min(1, x)) : x));
        }
        scale.domain = function (_) {
            return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), k10 = t0 === t1 ? 0 : 1 / (t1 - t0), scale) : [x0, x1];
        };
        scale.clamp = function (_) {
            return arguments.length ? (clamp = !!_, scale) : clamp;
        };
        scale.interpolator = function (_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        return function (t) {
            transform = t, t0 = t(x0), t1 = t(x1), k10 = t0 === t1 ? 0 : 1 / (t1 - t0);
            return scale;
        };
    }
    function copy$1(source, target) {
        return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
    }
    function sequential() {
        var scale = linearish(transformer$2()(identity$6));
        scale.copy = function () {
            return copy$1(scale, sequential());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function sequentialLog() {
        var scale = loggish(transformer$2()).domain([1, 10]);
        scale.copy = function () {
            return copy$1(scale, sequentialLog()).base(scale.base());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function sequentialSymlog() {
        var scale = symlogish(transformer$2());
        scale.copy = function () {
            return copy$1(scale, sequentialSymlog()).constant(scale.constant());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function sequentialPow() {
        var scale = powish(transformer$2());
        scale.copy = function () {
            return copy$1(scale, sequentialPow()).exponent(scale.exponent());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function sequentialSqrt() {
        return sequentialPow.apply(null, arguments).exponent(0.5);
    }

    function sequentialQuantile() {
        var domain = [],
            interpolator = identity$6;
        function scale(x) {
            if (!isNaN(x = +x)) return interpolator((bisectRight(domain, x) - 1) / (domain.length - 1));
        }
        scale.domain = function (_) {
            if (!arguments.length) return domain.slice();
            domain = [];
            for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
            domain.sort(ascending);
            return scale;
        };
        scale.interpolator = function (_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
        };
        scale.copy = function () {
            return sequentialQuantile(interpolator).domain(domain);
        };
        return initInterpolator.apply(scale, arguments);
    }

    function transformer$3() {
        var x0 = 0,
            x1 = 0.5,
            x2 = 1,
            t0,
            t1,
            t2,
            k10,
            k21,
            interpolator = identity$6,
            transform,
            clamp = false,
            unknown;
        function scale(x) {
            return isNaN(x = +x) ? unknown : (x = 0.5 + ((x = +transform(x)) - t1) * (x < t1 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x)) : x));
        }
        scale.domain = function (_) {
            return arguments.length ? (t0 = transform(x0 = +_[0]), t1 = transform(x1 = +_[1]), t2 = transform(x2 = +_[2]), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1), scale) : [x0, x1, x2];
        };
        scale.clamp = function (_) {
            return arguments.length ? (clamp = !!_, scale) : clamp;
        };
        scale.interpolator = function (_) {
            return arguments.length ? (interpolator = _, scale) : interpolator;
        };
        scale.unknown = function (_) {
            return arguments.length ? (unknown = _, scale) : unknown;
        };
        return function (t) {
            transform = t, t0 = t(x0), t1 = t(x1), t2 = t(x2), k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0), k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1);
            return scale;
        };
    }
    function diverging() {
        var scale = linearish(transformer$3()(identity$6));
        scale.copy = function () {
            return copy$1(scale, diverging());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function divergingLog() {
        var scale = loggish(transformer$3()).domain([0.1, 1, 10]);
        scale.copy = function () {
            return copy$1(scale, divergingLog()).base(scale.base());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function divergingSymlog() {
        var scale = symlogish(transformer$3());
        scale.copy = function () {
            return copy$1(scale, divergingSymlog()).constant(scale.constant());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function divergingPow() {
        var scale = powish(transformer$3());
        scale.copy = function () {
            return copy$1(scale, divergingPow()).exponent(scale.exponent());
        };
        return initInterpolator.apply(scale, arguments);
    }
    function divergingSqrt() {
        return divergingPow.apply(null, arguments).exponent(0.5);
    }

    function colors (specifier) {
        var n = specifier.length / 6 | 0,
            colors = new Array(n),
            i = 0;
        while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
        return colors;
    }

    var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

    var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

    var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

    var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

    var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

    var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

    var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

    var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

    var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

    function ramp (scheme) {
        return rgbBasis(scheme[scheme.length - 1]);
    }

    var scheme = new Array(3).concat("d8b365f5f5f55ab4ac", "a6611adfc27d80cdc1018571", "a6611adfc27df5f5f580cdc1018571", "8c510ad8b365f6e8c3c7eae55ab4ac01665e", "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e", "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e", "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e", "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30", "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(colors);
    var BrBG = ramp(scheme);

    var scheme$1 = new Array(3).concat("af8dc3f7f7f77fbf7b", "7b3294c2a5cfa6dba0008837", "7b3294c2a5cff7f7f7a6dba0008837", "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837", "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837", "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837", "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837", "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b", "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(colors);
    var PRGn = ramp(scheme$1);

    var scheme$2 = new Array(3).concat("e9a3c9f7f7f7a1d76a", "d01c8bf1b6dab8e1864dac26", "d01c8bf1b6daf7f7f7b8e1864dac26", "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221", "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221", "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221", "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221", "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419", "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(colors);
    var PiYG = ramp(scheme$2);

    var scheme$3 = new Array(3).concat("998ec3f7f7f7f1a340", "5e3c99b2abd2fdb863e66101", "5e3c99b2abd2f7f7f7fdb863e66101", "542788998ec3d8daebfee0b6f1a340b35806", "542788998ec3d8daebf7f7f7fee0b6f1a340b35806", "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806", "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806", "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08", "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(colors);
    var PuOr = ramp(scheme$3);

    var scheme$4 = new Array(3).concat("ef8a62f7f7f767a9cf", "ca0020f4a58292c5de0571b0", "ca0020f4a582f7f7f792c5de0571b0", "b2182bef8a62fddbc7d1e5f067a9cf2166ac", "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac", "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac", "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac", "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061", "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(colors);
    var RdBu = ramp(scheme$4);

    var scheme$5 = new Array(3).concat("ef8a62ffffff999999", "ca0020f4a582bababa404040", "ca0020f4a582ffffffbababa404040", "b2182bef8a62fddbc7e0e0e09999994d4d4d", "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d", "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d", "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d", "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a", "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(colors);
    var RdGy = ramp(scheme$5);

    var scheme$6 = new Array(3).concat("fc8d59ffffbf91bfdb", "d7191cfdae61abd9e92c7bb6", "d7191cfdae61ffffbfabd9e92c7bb6", "d73027fc8d59fee090e0f3f891bfdb4575b4", "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4", "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4", "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4", "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695", "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(colors);
    var RdYlBu = ramp(scheme$6);

    var scheme$7 = new Array(3).concat("fc8d59ffffbf91cf60", "d7191cfdae61a6d96a1a9641", "d7191cfdae61ffffbfa6d96a1a9641", "d73027fc8d59fee08bd9ef8b91cf601a9850", "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850", "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850", "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850", "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837", "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(colors);
    var RdYlGn = ramp(scheme$7);

    var scheme$8 = new Array(3).concat("fc8d59ffffbf99d594", "d7191cfdae61abdda42b83ba", "d7191cfdae61ffffbfabdda42b83ba", "d53e4ffc8d59fee08be6f59899d5943288bd", "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd", "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd", "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd", "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2", "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(colors);
    var Spectral = ramp(scheme$8);

    var scheme$9 = new Array(3).concat("e5f5f999d8c92ca25f", "edf8fbb2e2e266c2a4238b45", "edf8fbb2e2e266c2a42ca25f006d2c", "edf8fbccece699d8c966c2a42ca25f006d2c", "edf8fbccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824", "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(colors);
    var BuGn = ramp(scheme$9);

    var scheme$a = new Array(3).concat("e0ecf49ebcda8856a7", "edf8fbb3cde38c96c688419d", "edf8fbb3cde38c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68856a7810f7c", "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b", "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(colors);
    var BuPu = ramp(scheme$a);

    var scheme$b = new Array(3).concat("e0f3dba8ddb543a2ca", "f0f9e8bae4bc7bccc42b8cbe", "f0f9e8bae4bc7bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac", "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e", "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(colors);
    var GnBu = ramp(scheme$b);

    var scheme$c = new Array(3).concat("fee8c8fdbb84e34a33", "fef0d9fdcc8afc8d59d7301f", "fef0d9fdcc8afc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59e34a33b30000", "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000", "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(colors);
    var OrRd = ramp(scheme$c);

    var scheme$d = new Array(3).concat("ece2f0a6bddb1c9099", "f6eff7bdc9e167a9cf02818a", "f6eff7bdc9e167a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf1c9099016c59", "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450", "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(colors);
    var PuBuGn = ramp(scheme$d);

    var scheme$e = new Array(3).concat("ece7f2a6bddb2b8cbe", "f1eef6bdc9e174a9cf0570b0", "f1eef6bdc9e174a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d", "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b", "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(colors);
    var PuBu = ramp(scheme$e);

    var scheme$f = new Array(3).concat("e7e1efc994c7dd1c77", "f1eef6d7b5d8df65b0ce1256", "f1eef6d7b5d8df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0dd1c77980043", "f1eef6d4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f", "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(colors);
    var PuRd = ramp(scheme$f);

    var scheme$g = new Array(3).concat("fde0ddfa9fb5c51b8a", "feebe2fbb4b9f768a1ae017e", "feebe2fbb4b9f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177", "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177", "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(colors);
    var RdPu = ramp(scheme$g);

    var scheme$h = new Array(3).concat("edf8b17fcdbb2c7fb8", "ffffcca1dab441b6c4225ea8", "ffffcca1dab441b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c42c7fb8253494", "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84", "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(colors);
    var YlGnBu = ramp(scheme$h);

    var scheme$i = new Array(3).concat("f7fcb9addd8e31a354", "ffffccc2e69978c679238443", "ffffccc2e69978c67931a354006837", "ffffccd9f0a3addd8e78c67931a354006837", "ffffccd9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32", "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(colors);
    var YlGn = ramp(scheme$i);

    var scheme$j = new Array(3).concat("fff7bcfec44fd95f0e", "ffffd4fed98efe9929cc4c02", "ffffd4fed98efe9929d95f0e993404", "ffffd4fee391fec44ffe9929d95f0e993404", "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04", "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(colors);
    var YlOrBr = ramp(scheme$j);

    var scheme$k = new Array(3).concat("ffeda0feb24cf03b20", "ffffb2fecc5cfd8d3ce31a1c", "ffffb2fecc5cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cf03b20bd0026", "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026", "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(colors);
    var YlOrRd = ramp(scheme$k);

    var scheme$l = new Array(3).concat("deebf79ecae13182bd", "eff3ffbdd7e76baed62171b5", "eff3ffbdd7e76baed63182bd08519c", "eff3ffc6dbef9ecae16baed63182bd08519c", "eff3ffc6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594", "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(colors);
    var Blues = ramp(scheme$l);

    var scheme$m = new Array(3).concat("e5f5e0a1d99b31a354", "edf8e9bae4b374c476238b45", "edf8e9bae4b374c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47631a354006d2c", "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32", "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(colors);
    var Greens = ramp(scheme$m);

    var scheme$n = new Array(3).concat("f0f0f0bdbdbd636363", "f7f7f7cccccc969696525252", "f7f7f7cccccc969696636363252525", "f7f7f7d9d9d9bdbdbd969696636363252525", "f7f7f7d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525", "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(colors);
    var Greys = ramp(scheme$n);

    var scheme$o = new Array(3).concat("efedf5bcbddc756bb1", "f2f0f7cbc9e29e9ac86a51a3", "f2f0f7cbc9e29e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8756bb154278f", "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486", "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(colors);
    var Purples = ramp(scheme$o);

    var scheme$p = new Array(3).concat("fee0d2fc9272de2d26", "fee5d9fcae91fb6a4acb181d", "fee5d9fcae91fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4ade2d26a50f15", "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d", "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(colors);
    var Reds = ramp(scheme$p);

    var scheme$q = new Array(3).concat("fee6cefdae6be6550d", "feeddefdbe85fd8d3cd94701", "feeddefdbe85fd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3ce6550da63603", "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04", "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(colors);
    var Oranges = ramp(scheme$q);

    var cubehelix$2 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0));

    var warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
    var cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.50, 0.8));
    var c = cubehelix();
    function rainbow (t) {
        if (t < 0 || t > 1) t -= Math.floor(t);
        var ts = Math.abs(t - 0.5);
        c.h = 360 * t - 100;
        c.s = 1.5 - 1.5 * ts;
        c.l = 0.8 - 0.9 * ts;
        return c + "";
    }

    var c$1 = rgb(),
        pi_1_3 = Math.PI / 3,
        pi_2_3 = Math.PI * 2 / 3;
    function sinebow (t) {
        var x;
        t = (0.5 - t) * Math.PI;
        c$1.r = 255 * (x = Math.sin(t)) * x;
        c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
        c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
        return c$1 + "";
    }

    function ramp$1(range) {
        var n = range.length;
        return function (t) {
            return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
        };
    }
    var viridis = ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));
    var magma = ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));
    var inferno = ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));
    var plasma = ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

    var xhtml = "http://www.w3.org/1999/xhtml";
    var namespaces = {
        svg: "http://www.w3.org/2000/svg",
        xhtml: xhtml,
        xlink: "http://www.w3.org/1999/xlink",
        xml: "http://www.w3.org/XML/1998/namespace",
        xmlns: "http://www.w3.org/2000/xmlns/"
    };

    function namespace (name) {
        var prefix = name += "",
            i = prefix.indexOf(":");
        if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
        return namespaces.hasOwnProperty(prefix) ? {
            space: namespaces[prefix],
            local: name
        } : name;
    }

    function creatorInherit(name) {
        return function () {
            var document = this.ownerDocument,
                uri = this.namespaceURI;
            return uri === xhtml && document.documentElement.namespaceURI === xhtml ? document.createElement(name) : document.createElementNS(uri, name);
        };
    }
    function creatorFixed(fullname) {
        return function () {
            return this.ownerDocument.createElementNS(fullname.space, fullname.local);
        };
    }
    function creator (name) {
        var fullname = namespace(name);
        return (fullname.local ? creatorFixed : creatorInherit)(fullname);
    }

    function none() {}
    function selector (selector) {
        return selector == null ? none : function () {
            return this.querySelector(selector);
        };
    }

    function selection_select (select) {
        if (typeof select !== "function") select = selector(select);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
                if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    subgroup[i] = subnode;
                }
            }
        }
        return new Selection(subgroups, this._parents);
    }

    function empty() {
        return [];
    }
    function selectorAll (selector) {
        return selector == null ? empty : function () {
            return this.querySelectorAll(selector);
        };
    }

    function selection_selectAll (select) {
        if (typeof select !== "function") select = selectorAll(select);
        for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    subgroups.push(select.call(node, node.__data__, i, group));
                    parents.push(node);
                }
            }
        }
        return new Selection(subgroups, parents);
    }

    function matcher (selector) {
        return function () {
            return this.matches(selector);
        };
    }

    function selection_filter (match) {
        if (typeof match !== "function") match = matcher(match);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
                if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                    subgroup.push(node);
                }
            }
        }
        return new Selection(subgroups, this._parents);
    }

    function sparse (update) {
        return new Array(update.length);
    }

    function selection_enter () {
        return new Selection(this._enter || this._groups.map(sparse), this._parents);
    }
    function EnterNode(parent, datum) {
        this.ownerDocument = parent.ownerDocument;
        this.namespaceURI = parent.namespaceURI;
        this._next = null;
        this._parent = parent;
        this.__data__ = datum;
    }
    EnterNode.prototype = {
        constructor: EnterNode,
        appendChild: function (child) {
            return this._parent.insertBefore(child, this._next);
        },
        insertBefore: function (child, next) {
            return this._parent.insertBefore(child, next);
        },
        querySelector: function (selector) {
            return this._parent.querySelector(selector);
        },
        querySelectorAll: function (selector) {
            return this._parent.querySelectorAll(selector);
        }
    };

    function constant$4 (x) {
        return function () {
            return x;
        };
    }

    var keyPrefix = "$"; // Protect against keys like “__proto__”.

    function bindIndex(parent, group, enter, update, exit, data) {
        var i = 0,
            node,
            groupLength = group.length,
            dataLength = data.length;

        // Put any non-null nodes that fit into update.
        // Put any null nodes into enter.
        // Put any remaining data into enter.
        for (; i < dataLength; ++i) {
            if (node = group[i]) {
                node.__data__ = data[i];
                update[i] = node;
            } else {
                enter[i] = new EnterNode(parent, data[i]);
            }
        }

        // Put any non-null nodes that don’t fit into exit.
        for (; i < groupLength; ++i) {
            if (node = group[i]) {
                exit[i] = node;
            }
        }
    }
    function bindKey(parent, group, enter, update, exit, data, key) {
        var i,
            node,
            nodeByKeyValue = {},
            groupLength = group.length,
            dataLength = data.length,
            keyValues = new Array(groupLength),
            keyValue;

        // Compute the key for each node.
        // If multiple nodes have the same key, the duplicates are added to exit.
        for (i = 0; i < groupLength; ++i) {
            if (node = group[i]) {
                keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
                if (keyValue in nodeByKeyValue) {
                    exit[i] = node;
                } else {
                    nodeByKeyValue[keyValue] = node;
                }
            }
        }

        // Compute the key for each datum.
        // If there a node associated with this key, join and add it to update.
        // If there is not (or the key is a duplicate), add it to enter.
        for (i = 0; i < dataLength; ++i) {
            keyValue = keyPrefix + key.call(parent, data[i], i, data);
            if (node = nodeByKeyValue[keyValue]) {
                update[i] = node;
                node.__data__ = data[i];
                nodeByKeyValue[keyValue] = null;
            } else {
                enter[i] = new EnterNode(parent, data[i]);
            }
        }

        // Add any remaining nodes that were not bound to data to exit.
        for (i = 0; i < groupLength; ++i) {
            if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
                exit[i] = node;
            }
        }
    }
    function selection_data (value, key) {
        if (!value) {
            data = new Array(this.size()), j = -1;
            this.each(function (d) {
                data[++j] = d;
            });
            return data;
        }
        var bind = key ? bindKey : bindIndex,
            parents = this._parents,
            groups = this._groups;
        if (typeof value !== "function") value = constant$4(value);
        for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
            var parent = parents[j],
                group = groups[j],
                groupLength = group.length,
                data = value.call(parent, parent && parent.__data__, j, parents),
                dataLength = data.length,
                enterGroup = enter[j] = new Array(dataLength),
                updateGroup = update[j] = new Array(dataLength),
                exitGroup = exit[j] = new Array(groupLength);
            bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

            // Now connect the enter nodes to their following update node, such that
            // appendChild can insert the materialized enter node before this node,
            // rather than at the end of the parent node.
            for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
                if (previous = enterGroup[i0]) {
                    if (i0 >= i1) i1 = i0 + 1;
                    while (!(next = updateGroup[i1]) && ++i1 < dataLength);
                    previous._next = next || null;
                }
            }
        }
        update = new Selection(update, parents);
        update._enter = enter;
        update._exit = exit;
        return update;
    }

    function selection_exit () {
        return new Selection(this._exit || this._groups.map(sparse), this._parents);
    }

    function selection_join (onenter, onupdate, onexit) {
        var enter = this.enter(),
            update = this,
            exit = this.exit();
        enter = typeof onenter === "function" ? onenter(enter) : enter.append(onenter + "");
        if (onupdate != null) update = onupdate(update);
        if (onexit == null) exit.remove();else onexit(exit);
        return enter && update ? enter.merge(update).order() : update;
    }

    function selection_merge (selection) {
        for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
            for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
                if (node = group0[i] || group1[i]) {
                    merge[i] = node;
                }
            }
        }
        for (; j < m0; ++j) {
            merges[j] = groups0[j];
        }
        return new Selection(merges, this._parents);
    }

    function selection_order () {
        for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
            for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
                if (node = group[i]) {
                    if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next);
                    next = node;
                }
            }
        }
        return this;
    }

    function selection_sort (compare) {
        if (!compare) compare = ascending$1;
        function compareNode(a, b) {
            return a && b ? compare(a.__data__, b.__data__) : !a - !b;
        }
        for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    sortgroup[i] = node;
                }
            }
            sortgroup.sort(compareNode);
        }
        return new Selection(sortgroups, this._parents).order();
    }
    function ascending$1(a, b) {
        return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
    }

    function selection_call () {
        var callback = arguments[0];
        arguments[0] = this;
        callback.apply(null, arguments);
        return this;
    }

    function selection_nodes () {
        var nodes = new Array(this.size()),
            i = -1;
        this.each(function () {
            nodes[++i] = this;
        });
        return nodes;
    }

    function selection_node () {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
                var node = group[i];
                if (node) return node;
            }
        }
        return null;
    }

    function selection_size () {
        var size = 0;
        this.each(function () {
            ++size;
        });
        return size;
    }

    function selection_empty () {
        return !this.node();
    }

    function selection_each (callback) {
        for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
            for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
                if (node = group[i]) callback.call(node, node.__data__, i, group);
            }
        }
        return this;
    }

    function attrRemove(name) {
        return function () {
            this.removeAttribute(name);
        };
    }
    function attrRemoveNS(fullname) {
        return function () {
            this.removeAttributeNS(fullname.space, fullname.local);
        };
    }
    function attrConstant(name, value) {
        return function () {
            this.setAttribute(name, value);
        };
    }
    function attrConstantNS(fullname, value) {
        return function () {
            this.setAttributeNS(fullname.space, fullname.local, value);
        };
    }
    function attrFunction(name, value) {
        return function () {
            var v = value.apply(this, arguments);
            if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
        };
    }
    function attrFunctionNS(fullname, value) {
        return function () {
            var v = value.apply(this, arguments);
            if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
        };
    }
    function selection_attr (name, value) {
        var fullname = namespace(name);
        if (arguments.length < 2) {
            var node = this.node();
            return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
        }
        return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
    }

    function defaultView (node) {
        return node.ownerDocument && node.ownerDocument.defaultView // node is a Node
            || node.document && node // node is a Window
            || node.defaultView; // node is a Document
    }

    function styleRemove(name) {
        return function () {
            this.style.removeProperty(name);
        };
    }
    function styleConstant(name, value, priority) {
        return function () {
            this.style.setProperty(name, value, priority);
        };
    }
    function styleFunction(name, value, priority) {
        return function () {
            var v = value.apply(this, arguments);
            if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
        };
    }
    function selection_style (name, value, priority) {
        return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
    }
    function styleValue(node, name) {
        return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
    }

    function propertyRemove(name) {
        return function () {
            delete this[name];
        };
    }
    function propertyConstant(name, value) {
        return function () {
            this[name] = value;
        };
    }
    function propertyFunction(name, value) {
        return function () {
            var v = value.apply(this, arguments);
            if (v == null) delete this[name];else this[name] = v;
        };
    }
    function selection_property (name, value) {
        return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
    }

    function classArray(string) {
        return string.trim().split(/^|\s+/);
    }
    function classList(node) {
        return node.classList || new ClassList(node);
    }
    function ClassList(node) {
        this._node = node;
        this._names = classArray(node.getAttribute("class") || "");
    }
    ClassList.prototype = {
        add: function (name) {
            var i = this._names.indexOf(name);
            if (i < 0) {
                this._names.push(name);
                this._node.setAttribute("class", this._names.join(" "));
            }
        },
        remove: function (name) {
            var i = this._names.indexOf(name);
            if (i >= 0) {
                this._names.splice(i, 1);
                this._node.setAttribute("class", this._names.join(" "));
            }
        },
        contains: function (name) {
            return this._names.indexOf(name) >= 0;
        }
    };
    function classedAdd(node, names) {
        var list = classList(node),
            i = -1,
            n = names.length;
        while (++i < n) list.add(names[i]);
    }
    function classedRemove(node, names) {
        var list = classList(node),
            i = -1,
            n = names.length;
        while (++i < n) list.remove(names[i]);
    }
    function classedTrue(names) {
        return function () {
            classedAdd(this, names);
        };
    }
    function classedFalse(names) {
        return function () {
            classedRemove(this, names);
        };
    }
    function classedFunction(names, value) {
        return function () {
            (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
        };
    }
    function selection_classed (name, value) {
        var names = classArray(name + "");
        if (arguments.length < 2) {
            var list = classList(this.node()),
                i = -1,
                n = names.length;
            while (++i < n) if (!list.contains(names[i])) return false;
            return true;
        }
        return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
    }

    function textRemove() {
        this.textContent = "";
    }
    function textConstant(value) {
        return function () {
            this.textContent = value;
        };
    }
    function textFunction(value) {
        return function () {
            var v = value.apply(this, arguments);
            this.textContent = v == null ? "" : v;
        };
    }
    function selection_text (value) {
        return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
    }

    function htmlRemove() {
        this.innerHTML = "";
    }
    function htmlConstant(value) {
        return function () {
            this.innerHTML = value;
        };
    }
    function htmlFunction(value) {
        return function () {
            var v = value.apply(this, arguments);
            this.innerHTML = v == null ? "" : v;
        };
    }
    function selection_html (value) {
        return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
    }

    function raise() {
        if (this.nextSibling) this.parentNode.appendChild(this);
    }
    function selection_raise () {
        return this.each(raise);
    }

    function lower() {
        if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
    }
    function selection_lower () {
        return this.each(lower);
    }

    function selection_append (name) {
        var create = typeof name === "function" ? name : creator(name);
        return this.select(function () {
            return this.appendChild(create.apply(this, arguments));
        });
    }

    function constantNull() {
        return null;
    }
    function selection_insert (name, before) {
        var create = typeof name === "function" ? name : creator(name),
            select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
        return this.select(function () {
            return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
        });
    }

    function remove() {
        var parent = this.parentNode;
        if (parent) parent.removeChild(this);
    }
    function selection_remove () {
        return this.each(remove);
    }

    function selection_cloneShallow() {
        var clone = this.cloneNode(false),
            parent = this.parentNode;
        return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }
    function selection_cloneDeep() {
        var clone = this.cloneNode(true),
            parent = this.parentNode;
        return parent ? parent.insertBefore(clone, this.nextSibling) : clone;
    }
    function selection_clone (deep) {
        return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
    }

    function selection_datum (value) {
        return arguments.length ? this.property("__data__", value) : this.node().__data__;
    }

    var filterEvents = {};
    var event$1 = null;
    if (typeof document !== "undefined") {
        var element = document.documentElement;
        if (!("onmouseenter" in element)) {
            filterEvents = {
                mouseenter: "mouseover",
                mouseleave: "mouseout"
            };
        }
    }
    function filterContextListener(listener, index, group) {
        listener = contextListener(listener, index, group);
        return function (event) {
            var related = event.relatedTarget;
            if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
                listener.call(this, event);
            }
        };
    }
    function contextListener(listener, index, group) {
        return function (event1) {
            var event0 = event$1; // Events can be reentrant (e.g., focus).
            event$1 = event1;
            try {
                listener.call(this, this.__data__, index, group);
            } finally {
                event$1 = event0;
            }
        };
    }
    function parseTypenames(typenames) {
        return typenames.trim().split(/^|\s+/).map(function (t) {
            var name = "",
                i = t.indexOf(".");
            if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
            return {
                type: t,
                name: name
            };
        });
    }
    function onRemove(typename) {
        return function () {
            var on = this.__on;
            if (!on) return;
            for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
                if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
                    this.removeEventListener(o.type, o.listener, o.capture);
                } else {
                    on[++i] = o;
                }
            }
            if (++i) on.length = i;else delete this.__on;
        };
    }
    function onAdd(typename, value, capture) {
        var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
        return function (d, i, group) {
            var on = this.__on,
                o,
                listener = wrap(value, i, group);
            if (on) for (var j = 0, m = on.length; j < m; ++j) {
                if ((o = on[j]).type === typename.type && o.name === typename.name) {
                    this.removeEventListener(o.type, o.listener, o.capture);
                    this.addEventListener(o.type, o.listener = listener, o.capture = capture);
                    o.value = value;
                    return;
                }
            }
            this.addEventListener(typename.type, listener, capture);
            o = {
                type: typename.type,
                name: typename.name,
                value: value,
                listener: listener,
                capture: capture
            };
            if (!on) this.__on = [o];else on.push(o);
        };
    }
    function selection_on (typename, value, capture) {
        var typenames = parseTypenames(typename + ""),
            i,
            n = typenames.length,
            t;
        if (arguments.length < 2) {
            var on = this.node().__on;
            if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
                for (i = 0, o = on[j]; i < n; ++i) {
                    if ((t = typenames[i]).type === o.type && t.name === o.name) {
                        return o.value;
                    }
                }
            }
            return;
        }
        on = value ? onAdd : onRemove;
        if (capture == null) capture = false;
        for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
        return this;
    }
    function customEvent(event1, listener, that, args) {
        var event0 = event$1;
        event1.sourceEvent = event$1;
        event$1 = event1;
        try {
            return listener.apply(that, args);
        } finally {
            event$1 = event0;
        }
    }

    function dispatchEvent(node, type, params) {
        var window = defaultView(node),
            event = window.CustomEvent;
        if (typeof event === "function") {
            event = new event(type, params);
        } else {
            event = window.document.createEvent("Event");
            if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
        }
        node.dispatchEvent(event);
    }
    function dispatchConstant(type, params) {
        return function () {
            return dispatchEvent(this, type, params);
        };
    }
    function dispatchFunction(type, params) {
        return function () {
            return dispatchEvent(this, type, params.apply(this, arguments));
        };
    }
    function selection_dispatch (type, params) {
        return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
    }

    var root = [null];
    function Selection(groups, parents) {
        this._groups = groups;
        this._parents = parents;
    }
    function selection() {
        return new Selection([[document.documentElement]], root);
    }
    Selection.prototype = selection.prototype = {
        constructor: Selection,
        select: selection_select,
        selectAll: selection_selectAll,
        filter: selection_filter,
        data: selection_data,
        enter: selection_enter,
        exit: selection_exit,
        join: selection_join,
        merge: selection_merge,
        order: selection_order,
        sort: selection_sort,
        call: selection_call,
        nodes: selection_nodes,
        node: selection_node,
        size: selection_size,
        empty: selection_empty,
        each: selection_each,
        attr: selection_attr,
        style: selection_style,
        property: selection_property,
        classed: selection_classed,
        text: selection_text,
        html: selection_html,
        raise: selection_raise,
        lower: selection_lower,
        append: selection_append,
        insert: selection_insert,
        remove: selection_remove,
        clone: selection_clone,
        datum: selection_datum,
        on: selection_on,
        dispatch: selection_dispatch
    };

    function select (selector) {
        return typeof selector === "string" ? new Selection([[document.querySelector(selector)]], [document.documentElement]) : new Selection([[selector]], root);
    }

    function sourceEvent () {
        var current = event$1,
            source;
        while (source = current.sourceEvent) current = source;
        return current;
    }

    function point$1 (node, event) {
        var svg = node.ownerSVGElement || node;
        if (svg.createSVGPoint) {
            var point = svg.createSVGPoint();
            point.x = event.clientX, point.y = event.clientY;
            point = point.matrixTransform(node.getScreenCTM().inverse());
            return [point.x, point.y];
        }
        var rect = node.getBoundingClientRect();
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
    }

    function mouse (node) {
        var event = sourceEvent();
        if (event.changedTouches) event = event.changedTouches[0];
        return point$1(node, event);
    }

    function selectAll (selector) {
        return typeof selector === "string" ? new Selection([document.querySelectorAll(selector)], [document.documentElement]) : new Selection([selector == null ? [] : selector], root);
    }

    function touch (node, touches, identifier) {
        if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;
        for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
            if ((touch = touches[i]).identifier === identifier) {
                return point$1(node, touch);
            }
        }
        return null;
    }

    function constant$5 (x) {
        return function constant() {
            return x;
        };
    }

    var abs$1 = Math.abs;
    var atan2$1 = Math.atan2;
    var cos$1 = Math.cos;
    var max$1 = Math.max;
    var min$1 = Math.min;
    var sin$1 = Math.sin;
    var sqrt$2 = Math.sqrt;
    var epsilon$3 = 1e-12;
    var pi$3 = Math.PI;
    var halfPi$2 = pi$3 / 2;
    var tau$3 = 2 * pi$3;
    function acos$1(x) {
        return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x);
    }
    function asin$1(x) {
        return x >= 1 ? halfPi$2 : x <= -1 ? -halfPi$2 : Math.asin(x);
    }

    function arcInnerRadius(d) {
        return d.innerRadius;
    }
    function arcOuterRadius(d) {
        return d.outerRadius;
    }
    function arcStartAngle(d) {
        return d.startAngle;
    }
    function arcEndAngle(d) {
        return d.endAngle;
    }
    function arcPadAngle(d) {
        return d && d.padAngle; // Note: optional!
    }
    function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
        var x10 = x1 - x0,
            y10 = y1 - y0,
            x32 = x3 - x2,
            y32 = y3 - y2,
            t = y32 * x10 - x32 * y10;
        if (t * t < epsilon$3) return;
        t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t;
        return [x0 + t * x10, y0 + t * y10];
    }

    // Compute perpendicular offset line of length rc.
    // http://mathworld.wolfram.com/Circle-LineIntersection.html
    function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
        var x01 = x0 - x1,
            y01 = y0 - y1,
            lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
            ox = lo * y01,
            oy = -lo * x01,
            x11 = x0 + ox,
            y11 = y0 + oy,
            x10 = x1 + ox,
            y10 = y1 + oy,
            x00 = (x11 + x10) / 2,
            y00 = (y11 + y10) / 2,
            dx = x10 - x11,
            dy = y10 - y11,
            d2 = dx * dx + dy * dy,
            r = r1 - rc,
            D = x11 * y10 - x10 * y11,
            d = (dy < 0 ? -1 : 1) * sqrt$2(max$1(0, r * r * d2 - D * D)),
            cx0 = (D * dy - dx * d) / d2,
            cy0 = (-D * dx - dy * d) / d2,
            cx1 = (D * dy + dx * d) / d2,
            cy1 = (-D * dx + dy * d) / d2,
            dx0 = cx0 - x00,
            dy0 = cy0 - y00,
            dx1 = cx1 - x00,
            dy1 = cy1 - y00;

        // Pick the closer of the two intersection points.
        // TODO Is there a faster way to determine which intersection to use?
        if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;
        return {
            cx: cx0,
            cy: cy0,
            x01: -ox,
            y01: -oy,
            x11: cx0 * (r1 / r - 1),
            y11: cy0 * (r1 / r - 1)
        };
    }
    function arc () {
        var innerRadius = arcInnerRadius,
            outerRadius = arcOuterRadius,
            cornerRadius = constant$5(0),
            padRadius = null,
            startAngle = arcStartAngle,
            endAngle = arcEndAngle,
            padAngle = arcPadAngle,
            context = null;
        function arc() {
            var buffer,
                r,
                r0 = +innerRadius.apply(this, arguments),
                r1 = +outerRadius.apply(this, arguments),
                a0 = startAngle.apply(this, arguments) - halfPi$2,
                a1 = endAngle.apply(this, arguments) - halfPi$2,
                da = abs$1(a1 - a0),
                cw = a1 > a0;
            if (!context) context = buffer = path();

            // Ensure that the outer radius is always larger than the inner radius.
            if (r1 < r0) r = r1, r1 = r0, r0 = r;

            // Is it a point?
            if (!(r1 > epsilon$3)) context.moveTo(0, 0);

            // Or is it a circle or annulus?
            else if (da > tau$3 - epsilon$3) {
                context.moveTo(r1 * cos$1(a0), r1 * sin$1(a0));
                context.arc(0, 0, r1, a0, a1, !cw);
                if (r0 > epsilon$3) {
                    context.moveTo(r0 * cos$1(a1), r0 * sin$1(a1));
                    context.arc(0, 0, r0, a1, a0, cw);
                }
            }

            // Or is it a circular or annular sector?
            else {
                var a01 = a0,
                    a11 = a1,
                    a00 = a0,
                    a10 = a1,
                    da0 = da,
                    da1 = da,
                    ap = padAngle.apply(this, arguments) / 2,
                    rp = ap > epsilon$3 && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
                    rc = min$1(abs$1(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
                    rc0 = rc,
                    rc1 = rc,
                    t0,
                    t1;

                // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
                if (rp > epsilon$3) {
                    var p0 = asin$1(rp / r0 * sin$1(ap)),
                        p1 = asin$1(rp / r1 * sin$1(ap));
                    if ((da0 -= p0 * 2) > epsilon$3) p0 *= cw ? 1 : -1, a00 += p0, a10 -= p0;else da0 = 0, a00 = a10 = (a0 + a1) / 2;
                    if ((da1 -= p1 * 2) > epsilon$3) p1 *= cw ? 1 : -1, a01 += p1, a11 -= p1;else da1 = 0, a01 = a11 = (a0 + a1) / 2;
                }
                var x01 = r1 * cos$1(a01),
                    y01 = r1 * sin$1(a01),
                    x10 = r0 * cos$1(a10),
                    y10 = r0 * sin$1(a10);

                // Apply rounded corners?
                if (rc > epsilon$3) {
                    var x11 = r1 * cos$1(a11),
                        y11 = r1 * sin$1(a11),
                        x00 = r0 * cos$1(a00),
                        y00 = r0 * sin$1(a00),
                        oc;

                    // Restrict the corner radius according to the sector angle.
                    if (da < pi$3 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
                        var ax = x01 - oc[0],
                            ay = y01 - oc[1],
                            bx = x11 - oc[0],
                            by = y11 - oc[1],
                            kc = 1 / sin$1(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
                            lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1]);
                        rc0 = min$1(rc, (r0 - lc) / (kc - 1));
                        rc1 = min$1(rc, (r1 - lc) / (kc + 1));
                    }
                }

                // Is the sector collapsed to a line?
                if (!(da1 > epsilon$3)) context.moveTo(x01, y01);

                // Does the sector’s outer ring have rounded corners?
                else if (rc1 > epsilon$3) {
                    t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
                    t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);
                    context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

                    // Have the corners merged?
                    if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

                    // Otherwise, draw the two corners and the ring.
                    else {
                        context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
                        context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
                        context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
                    }
                }

                // Or is the outer ring just a circular arc?
                else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

                // Is there no inner ring, and it’s a circular sector?
                // Or perhaps it’s an annular sector collapsed due to padding?
                if (!(r0 > epsilon$3) || !(da0 > epsilon$3)) context.lineTo(x10, y10);

                // Does the sector’s inner ring (or point) have rounded corners?
                else if (rc0 > epsilon$3) {
                    t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
                    t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);
                    context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

                    // Have the corners merged?
                    if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw);

                    // Otherwise, draw the two corners and the ring.
                    else {
                        context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw);
                        context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw);
                        context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw);
                    }
                }

                // Or is the inner ring just a circular arc?
                else context.arc(0, 0, r0, a10, a00, cw);
            }
            context.closePath();
            if (buffer) return context = null, buffer + "" || null;
        }
        arc.centroid = function () {
            var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
                a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$3 / 2;
            return [cos$1(a) * r, sin$1(a) * r];
        };
        arc.innerRadius = function (_) {
            return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant$5(+_), arc) : innerRadius;
        };
        arc.outerRadius = function (_) {
            return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant$5(+_), arc) : outerRadius;
        };
        arc.cornerRadius = function (_) {
            return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant$5(+_), arc) : cornerRadius;
        };
        arc.padRadius = function (_) {
            return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant$5(+_), arc) : padRadius;
        };
        arc.startAngle = function (_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), arc) : startAngle;
        };
        arc.endAngle = function (_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), arc) : endAngle;
        };
        arc.padAngle = function (_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$5(+_), arc) : padAngle;
        };
        arc.context = function (_) {
            return arguments.length ? (context = _ == null ? null : _, arc) : context;
        };
        return arc;
    }

    function Linear(context) {
        this._context = context;
    }
    Linear.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                // proceed
                default:
                    this._context.lineTo(x, y);
                    break;
            }
        }
    };
    function curveLinear (context) {
        return new Linear(context);
    }

    function x(p) {
        return p[0];
    }
    function y(p) {
        return p[1];
    }

    function line () {
        var x$1 = x,
            y$1 = y,
            defined = constant$5(true),
            context = null,
            curve = curveLinear,
            output = null;
        function line(data) {
            var i,
                n = data.length,
                d,
                defined0 = false,
                buffer;
            if (context == null) output = curve(buffer = path());
            for (i = 0; i <= n; ++i) {
                if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                    if (defined0 = !defined0) output.lineStart();else output.lineEnd();
                }
                if (defined0) output.point(+x$1(d, i, data), +y$1(d, i, data));
            }
            if (buffer) return output = null, buffer + "" || null;
        }
        line.x = function (_) {
            return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$5(+_), line) : x$1;
        };
        line.y = function (_) {
            return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$5(+_), line) : y$1;
        };
        line.defined = function (_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : constant$5(!!_), line) : defined;
        };
        line.curve = function (_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
        };
        line.context = function (_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
        };
        return line;
    }

    function area$1 () {
        var x0 = x,
            x1 = null,
            y0 = constant$5(0),
            y1 = y,
            defined = constant$5(true),
            context = null,
            curve = curveLinear,
            output = null;
        function area(data) {
            var i,
                j,
                k,
                n = data.length,
                d,
                defined0 = false,
                buffer,
                x0z = new Array(n),
                y0z = new Array(n);
            if (context == null) output = curve(buffer = path());
            for (i = 0; i <= n; ++i) {
                if (!(i < n && defined(d = data[i], i, data)) === defined0) {
                    if (defined0 = !defined0) {
                        j = i;
                        output.areaStart();
                        output.lineStart();
                    } else {
                        output.lineEnd();
                        output.lineStart();
                        for (k = i - 1; k >= j; --k) {
                            output.point(x0z[k], y0z[k]);
                        }
                        output.lineEnd();
                        output.areaEnd();
                    }
                }
                if (defined0) {
                    x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
                    output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
                }
            }
            if (buffer) return output = null, buffer + "" || null;
        }
        function arealine() {
            return line().defined(defined).curve(curve).context(context);
        }
        area.x = function (_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$5(+_), x1 = null, area) : x0;
        };
        area.x0 = function (_) {
            return arguments.length ? (x0 = typeof _ === "function" ? _ : constant$5(+_), area) : x0;
        };
        area.x1 = function (_) {
            return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant$5(+_), area) : x1;
        };
        area.y = function (_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$5(+_), y1 = null, area) : y0;
        };
        area.y0 = function (_) {
            return arguments.length ? (y0 = typeof _ === "function" ? _ : constant$5(+_), area) : y0;
        };
        area.y1 = function (_) {
            return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant$5(+_), area) : y1;
        };
        area.lineX0 = area.lineY0 = function () {
            return arealine().x(x0).y(y0);
        };
        area.lineY1 = function () {
            return arealine().x(x0).y(y1);
        };
        area.lineX1 = function () {
            return arealine().x(x1).y(y0);
        };
        area.defined = function (_) {
            return arguments.length ? (defined = typeof _ === "function" ? _ : constant$5(!!_), area) : defined;
        };
        area.curve = function (_) {
            return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
        };
        area.context = function (_) {
            return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
        };
        return area;
    }

    function descending$1 (a, b) {
        return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
    }

    function identity$8 (d) {
        return d;
    }

    function pie () {
        var value = identity$8,
            sortValues = descending$1,
            sort = null,
            startAngle = constant$5(0),
            endAngle = constant$5(tau$3),
            padAngle = constant$5(0);
        function pie(data) {
            var i,
                n = data.length,
                j,
                k,
                sum = 0,
                index = new Array(n),
                arcs = new Array(n),
                a0 = +startAngle.apply(this, arguments),
                da = Math.min(tau$3, Math.max(-tau$3, endAngle.apply(this, arguments) - a0)),
                a1,
                p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
                pa = p * (da < 0 ? -1 : 1),
                v;
            for (i = 0; i < n; ++i) {
                if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
                    sum += v;
                }
            }

            // Optionally sort the arcs by previously-computed values or by data.
            if (sortValues != null) index.sort(function (i, j) {
                return sortValues(arcs[i], arcs[j]);
            });else if (sort != null) index.sort(function (i, j) {
                return sort(data[i], data[j]);
            });

            // Compute the arcs! They are stored in the original data's order.
            for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
                j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
                    data: data[j],
                    index: i,
                    value: v,
                    startAngle: a0,
                    endAngle: a1,
                    padAngle: p
                };
            }
            return arcs;
        }
        pie.value = function (_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant$5(+_), pie) : value;
        };
        pie.sortValues = function (_) {
            return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
        };
        pie.sort = function (_) {
            return arguments.length ? (sort = _, sortValues = null, pie) : sort;
        };
        pie.startAngle = function (_) {
            return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant$5(+_), pie) : startAngle;
        };
        pie.endAngle = function (_) {
            return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant$5(+_), pie) : endAngle;
        };
        pie.padAngle = function (_) {
            return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant$5(+_), pie) : padAngle;
        };
        return pie;
    }

    var curveRadialLinear = curveRadial(curveLinear);
    function Radial(curve) {
        this._curve = curve;
    }
    Radial.prototype = {
        areaStart: function () {
            this._curve.areaStart();
        },
        areaEnd: function () {
            this._curve.areaEnd();
        },
        lineStart: function () {
            this._curve.lineStart();
        },
        lineEnd: function () {
            this._curve.lineEnd();
        },
        point: function (a, r) {
            this._curve.point(r * Math.sin(a), r * -Math.cos(a));
        }
    };
    function curveRadial(curve) {
        function radial(context) {
            return new Radial(curve(context));
        }
        radial._curve = curve;
        return radial;
    }

    function lineRadial(l) {
        var c = l.curve;
        l.angle = l.x, delete l.x;
        l.radius = l.y, delete l.y;
        l.curve = function (_) {
            return arguments.length ? c(curveRadial(_)) : c()._curve;
        };
        return l;
    }
    function lineRadial$1 () {
        return lineRadial(line().curve(curveRadialLinear));
    }

    function areaRadial () {
        var a = area$1().curve(curveRadialLinear),
            c = a.curve,
            x0 = a.lineX0,
            x1 = a.lineX1,
            y0 = a.lineY0,
            y1 = a.lineY1;
        a.angle = a.x, delete a.x;
        a.startAngle = a.x0, delete a.x0;
        a.endAngle = a.x1, delete a.x1;
        a.radius = a.y, delete a.y;
        a.innerRadius = a.y0, delete a.y0;
        a.outerRadius = a.y1, delete a.y1;
        a.lineStartAngle = function () {
            return lineRadial(x0());
        }, delete a.lineX0;
        a.lineEndAngle = function () {
            return lineRadial(x1());
        }, delete a.lineX1;
        a.lineInnerRadius = function () {
            return lineRadial(y0());
        }, delete a.lineY0;
        a.lineOuterRadius = function () {
            return lineRadial(y1());
        }, delete a.lineY1;
        a.curve = function (_) {
            return arguments.length ? c(curveRadial(_)) : c()._curve;
        };
        return a;
    }

    function pointRadial (x, y) {
        return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
    }

    var slice$3 = Array.prototype.slice;

    function linkSource(d) {
        return d.source;
    }
    function linkTarget(d) {
        return d.target;
    }
    function link$1(curve) {
        var source = linkSource,
            target = linkTarget,
            x$1 = x,
            y$1 = y,
            context = null;
        function link() {
            var buffer,
                argv = slice$3.call(arguments),
                s = source.apply(this, argv),
                t = target.apply(this, argv);
            if (!context) context = buffer = path();
            curve(context, +x$1.apply(this, (argv[0] = s, argv)), +y$1.apply(this, argv), +x$1.apply(this, (argv[0] = t, argv)), +y$1.apply(this, argv));
            if (buffer) return context = null, buffer + "" || null;
        }
        link.source = function (_) {
            return arguments.length ? (source = _, link) : source;
        };
        link.target = function (_) {
            return arguments.length ? (target = _, link) : target;
        };
        link.x = function (_) {
            return arguments.length ? (x$1 = typeof _ === "function" ? _ : constant$5(+_), link) : x$1;
        };
        link.y = function (_) {
            return arguments.length ? (y$1 = typeof _ === "function" ? _ : constant$5(+_), link) : y$1;
        };
        link.context = function (_) {
            return arguments.length ? (context = _ == null ? null : _, link) : context;
        };
        return link;
    }
    function curveHorizontal(context, x0, y0, x1, y1) {
        context.moveTo(x0, y0);
        context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
    }
    function curveVertical(context, x0, y0, x1, y1) {
        context.moveTo(x0, y0);
        context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
    }
    function curveRadial$1(context, x0, y0, x1, y1) {
        var p0 = pointRadial(x0, y0),
            p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
            p2 = pointRadial(x1, y0),
            p3 = pointRadial(x1, y1);
        context.moveTo(p0[0], p0[1]);
        context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
    }
    function linkHorizontal() {
        return link$1(curveHorizontal);
    }
    function linkVertical() {
        return link$1(curveVertical);
    }
    function linkRadial() {
        var l = link$1(curveRadial$1);
        l.angle = l.x, delete l.x;
        l.radius = l.y, delete l.y;
        return l;
    }

    var circle$2 = {
        draw: function (context, size) {
            var r = Math.sqrt(size / pi$3);
            context.moveTo(r, 0);
            context.arc(0, 0, r, 0, tau$3);
        }
    };

    var cross$1 = {
        draw: function (context, size) {
            var r = Math.sqrt(size / 5) / 2;
            context.moveTo(-3 * r, -r);
            context.lineTo(-r, -r);
            context.lineTo(-r, -3 * r);
            context.lineTo(r, -3 * r);
            context.lineTo(r, -r);
            context.lineTo(3 * r, -r);
            context.lineTo(3 * r, r);
            context.lineTo(r, r);
            context.lineTo(r, 3 * r);
            context.lineTo(-r, 3 * r);
            context.lineTo(-r, r);
            context.lineTo(-3 * r, r);
            context.closePath();
        }
    };

    var tan30 = Math.sqrt(1 / 3),
        tan30_2 = tan30 * 2;
    var diamond = {
        draw: function (context, size) {
            var y = Math.sqrt(size / tan30_2),
                x = y * tan30;
            context.moveTo(0, -y);
            context.lineTo(x, 0);
            context.lineTo(0, y);
            context.lineTo(-x, 0);
            context.closePath();
        }
    };

    var ka = 0.89081309152928522810,
        kr = Math.sin(pi$3 / 10) / Math.sin(7 * pi$3 / 10),
        kx = Math.sin(tau$3 / 10) * kr,
        ky = -Math.cos(tau$3 / 10) * kr;
    var star = {
        draw: function (context, size) {
            var r = Math.sqrt(size * ka),
                x = kx * r,
                y = ky * r;
            context.moveTo(0, -r);
            context.lineTo(x, y);
            for (var i = 1; i < 5; ++i) {
                var a = tau$3 * i / 5,
                    c = Math.cos(a),
                    s = Math.sin(a);
                context.lineTo(s * r, -c * r);
                context.lineTo(c * x - s * y, s * x + c * y);
            }
            context.closePath();
        }
    };

    var square = {
        draw: function (context, size) {
            var w = Math.sqrt(size),
                x = -w / 2;
            context.rect(x, x, w, w);
        }
    };

    var sqrt3 = Math.sqrt(3);
    var triangle = {
        draw: function (context, size) {
            var y = -Math.sqrt(size / (sqrt3 * 3));
            context.moveTo(0, y * 2);
            context.lineTo(-sqrt3 * y, -y);
            context.lineTo(sqrt3 * y, -y);
            context.closePath();
        }
    };

    var c$2 = -0.5,
        s = Math.sqrt(3) / 2,
        k = 1 / Math.sqrt(12),
        a = (k / 2 + 1) * 3;
    var wye = {
        draw: function (context, size) {
            var r = Math.sqrt(size / a),
                x0 = r / 2,
                y0 = r * k,
                x1 = x0,
                y1 = r * k + r,
                x2 = -x1,
                y2 = y1;
            context.moveTo(x0, y0);
            context.lineTo(x1, y1);
            context.lineTo(x2, y2);
            context.lineTo(c$2 * x0 - s * y0, s * x0 + c$2 * y0);
            context.lineTo(c$2 * x1 - s * y1, s * x1 + c$2 * y1);
            context.lineTo(c$2 * x2 - s * y2, s * x2 + c$2 * y2);
            context.lineTo(c$2 * x0 + s * y0, c$2 * y0 - s * x0);
            context.lineTo(c$2 * x1 + s * y1, c$2 * y1 - s * x1);
            context.lineTo(c$2 * x2 + s * y2, c$2 * y2 - s * x2);
            context.closePath();
        }
    };

    var symbols = [circle$2, cross$1, diamond, square, star, triangle, wye];
    function symbol () {
        var type = constant$5(circle$2),
            size = constant$5(64),
            context = null;
        function symbol() {
            var buffer;
            if (!context) context = buffer = path();
            type.apply(this, arguments).draw(context, +size.apply(this, arguments));
            if (buffer) return context = null, buffer + "" || null;
        }
        symbol.type = function (_) {
            return arguments.length ? (type = typeof _ === "function" ? _ : constant$5(_), symbol) : type;
        };
        symbol.size = function (_) {
            return arguments.length ? (size = typeof _ === "function" ? _ : constant$5(+_), symbol) : size;
        };
        symbol.context = function (_) {
            return arguments.length ? (context = _ == null ? null : _, symbol) : context;
        };
        return symbol;
    }

    function noop$1 () {}

    function point$2(that, x, y) {
        that._context.bezierCurveTo((2 * that._x0 + that._x1) / 3, (2 * that._y0 + that._y1) / 3, (that._x0 + 2 * that._x1) / 3, (that._y0 + 2 * that._y1) / 3, (that._x0 + 4 * that._x1 + x) / 6, (that._y0 + 4 * that._y1 + y) / 6);
    }
    function Basis(context) {
        this._context = context;
    }
    Basis.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 3:
                    point$2(this, this._x1, this._y1);
                // proceed
                case 2:
                    this._context.lineTo(this._x1, this._y1);
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
                // proceed
                default:
                    point$2(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
        }
    };
    function basis$2 (context) {
        return new Basis(context);
    }

    function BasisClosed(context) {
        this._context = context;
    }
    BasisClosed.prototype = {
        areaStart: noop$1,
        areaEnd: noop$1,
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 1:
                {
                    this._context.moveTo(this._x2, this._y2);
                    this._context.closePath();
                    break;
                }
                case 2:
                {
                    this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
                    this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
                    this._context.closePath();
                    break;
                }
                case 3:
                {
                    this.point(this._x2, this._y2);
                    this.point(this._x3, this._y3);
                    this.point(this._x4, this._y4);
                    break;
                }
            }
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._x2 = x, this._y2 = y;
                    break;
                case 1:
                    this._point = 2;
                    this._x3 = x, this._y3 = y;
                    break;
                case 2:
                    this._point = 3;
                    this._x4 = x, this._y4 = y;
                    this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6);
                    break;
                default:
                    point$2(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
        }
    };
    function basisClosed (context) {
        return new BasisClosed(context);
    }

    function BasisOpen(context) {
        this._context = context;
    }
    BasisOpen.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._y0 = this._y1 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    var x0 = (this._x0 + 4 * this._x1 + x) / 6,
                        y0 = (this._y0 + 4 * this._y1 + y) / 6;
                    this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
                    break;
                case 3:
                    this._point = 4;
                // proceed
                default:
                    point$2(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
        }
    };
    function basisOpen (context) {
        return new BasisOpen(context);
    }

    function Bundle(context, beta) {
        this._basis = new Basis(context);
        this._beta = beta;
    }
    Bundle.prototype = {
        lineStart: function () {
            this._x = [];
            this._y = [];
            this._basis.lineStart();
        },
        lineEnd: function () {
            var x = this._x,
                y = this._y,
                j = x.length - 1;
            if (j > 0) {
                var x0 = x[0],
                    y0 = y[0],
                    dx = x[j] - x0,
                    dy = y[j] - y0,
                    i = -1,
                    t;
                while (++i <= j) {
                    t = i / j;
                    this._basis.point(this._beta * x[i] + (1 - this._beta) * (x0 + t * dx), this._beta * y[i] + (1 - this._beta) * (y0 + t * dy));
                }
            }
            this._x = this._y = null;
            this._basis.lineEnd();
        },
        point: function (x, y) {
            this._x.push(+x);
            this._y.push(+y);
        }
    };
    var bundle = (function custom(beta) {
        function bundle(context) {
            return beta === 1 ? new Basis(context) : new Bundle(context, beta);
        }
        bundle.beta = function (beta) {
            return custom(+beta);
        };
        return bundle;
    })(0.85);

    function point$3(that, x, y) {
        that._context.bezierCurveTo(that._x1 + that._k * (that._x2 - that._x0), that._y1 + that._k * (that._y2 - that._y0), that._x2 + that._k * (that._x1 - x), that._y2 + that._k * (that._y1 - y), that._x2, that._y2);
    }
    function Cardinal(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6;
    }
    Cardinal.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x2, this._y2);
                    break;
                case 3:
                    point$3(this, this._x1, this._y1);
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    this._x1 = x, this._y1 = y;
                    break;
                case 2:
                    this._point = 3;
                // proceed
                default:
                    point$3(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var cardinal = (function custom(tension) {
        function cardinal(context) {
            return new Cardinal(context, tension);
        }
        cardinal.tension = function (tension) {
            return custom(+tension);
        };
        return cardinal;
    })(0);

    function CardinalClosed(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6;
    }
    CardinalClosed.prototype = {
        areaStart: noop$1,
        areaEnd: noop$1,
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 1:
                {
                    this._context.moveTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                }
                case 2:
                {
                    this._context.lineTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                }
                case 3:
                {
                    this.point(this._x3, this._y3);
                    this.point(this._x4, this._y4);
                    this.point(this._x5, this._y5);
                    break;
                }
            }
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._x3 = x, this._y3 = y;
                    break;
                case 1:
                    this._point = 2;
                    this._context.moveTo(this._x4 = x, this._y4 = y);
                    break;
                case 2:
                    this._point = 3;
                    this._x5 = x, this._y5 = y;
                    break;
                default:
                    point$3(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var cardinalClosed = (function custom(tension) {
        function cardinal(context) {
            return new CardinalClosed(context, tension);
        }
        cardinal.tension = function (tension) {
            return custom(+tension);
        };
        return cardinal;
    })(0);

    function CardinalOpen(context, tension) {
        this._context = context;
        this._k = (1 - tension) / 6;
    }
    CardinalOpen.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                    break;
                case 3:
                    this._point = 4;
                // proceed
                default:
                    point$3(this, x, y);
                    break;
            }
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var cardinalOpen = (function custom(tension) {
        function cardinal(context) {
            return new CardinalOpen(context, tension);
        }
        cardinal.tension = function (tension) {
            return custom(+tension);
        };
        return cardinal;
    })(0);

    function point$4(that, x, y) {
        var x1 = that._x1,
            y1 = that._y1,
            x2 = that._x2,
            y2 = that._y2;
        if (that._l01_a > epsilon$3) {
            var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
                n = 3 * that._l01_a * (that._l01_a + that._l12_a);
            x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
            y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
        }
        if (that._l23_a > epsilon$3) {
            var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
                m = 3 * that._l23_a * (that._l23_a + that._l12_a);
            x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
            y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
        }
        that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
    }
    function CatmullRom(context, alpha) {
        this._context = context;
        this._alpha = alpha;
    }
    CatmullRom.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x2, this._y2);
                    break;
                case 3:
                    this.point(this._x2, this._y2);
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            if (this._point) {
                var x23 = this._x2 - x,
                    y23 = this._y2 - y;
                this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                // proceed
                default:
                    point$4(this, x, y);
                    break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var catmullRom = (function custom(alpha) {
        function catmullRom(context) {
            return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
        }
        catmullRom.alpha = function (alpha) {
            return custom(+alpha);
        };
        return catmullRom;
    })(0.5);

    function CatmullRomClosed(context, alpha) {
        this._context = context;
        this._alpha = alpha;
    }
    CatmullRomClosed.prototype = {
        areaStart: noop$1,
        areaEnd: noop$1,
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 1:
                {
                    this._context.moveTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                }
                case 2:
                {
                    this._context.lineTo(this._x3, this._y3);
                    this._context.closePath();
                    break;
                }
                case 3:
                {
                    this.point(this._x3, this._y3);
                    this.point(this._x4, this._y4);
                    this.point(this._x5, this._y5);
                    break;
                }
            }
        },
        point: function (x, y) {
            x = +x, y = +y;
            if (this._point) {
                var x23 = this._x2 - x,
                    y23 = this._y2 - y;
                this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._x3 = x, this._y3 = y;
                    break;
                case 1:
                    this._point = 2;
                    this._context.moveTo(this._x4 = x, this._y4 = y);
                    break;
                case 2:
                    this._point = 3;
                    this._x5 = x, this._y5 = y;
                    break;
                default:
                    point$4(this, x, y);
                    break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var catmullRomClosed = (function custom(alpha) {
        function catmullRom(context) {
            return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
        }
        catmullRom.alpha = function (alpha) {
            return custom(+alpha);
        };
        return catmullRom;
    })(0.5);

    function CatmullRomOpen(context, alpha) {
        this._context = context;
        this._alpha = alpha;
    }
    CatmullRomOpen.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN;
            this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0;
        },
        lineEnd: function () {
            if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            if (this._point) {
                var x23 = this._x2 - x,
                    y23 = this._y2 - y;
                this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
            }
            switch (this._point) {
                case 0:
                    this._point = 1;
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2);
                    break;
                case 3:
                    this._point = 4;
                // proceed
                default:
                    point$4(this, x, y);
                    break;
            }
            this._l01_a = this._l12_a, this._l12_a = this._l23_a;
            this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
            this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
            this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
        }
    };
    var catmullRomOpen = (function custom(alpha) {
        function catmullRom(context) {
            return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
        }
        catmullRom.alpha = function (alpha) {
            return custom(+alpha);
        };
        return catmullRom;
    })(0.5);

    function LinearClosed(context) {
        this._context = context;
    }
    LinearClosed.prototype = {
        areaStart: noop$1,
        areaEnd: noop$1,
        lineStart: function () {
            this._point = 0;
        },
        lineEnd: function () {
            if (this._point) this._context.closePath();
        },
        point: function (x, y) {
            x = +x, y = +y;
            if (this._point) this._context.lineTo(x, y);else this._point = 1, this._context.moveTo(x, y);
        }
    };
    function linearClosed (context) {
        return new LinearClosed(context);
    }

    function sign$1(x) {
        return x < 0 ? -1 : 1;
    }

    // Calculate the slopes of the tangents (Hermite-type interpolation) based on
    // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
    // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
    // NOV(II), P. 443, 1990.
    function slope3(that, x2, y2) {
        var h0 = that._x1 - that._x0,
            h1 = x2 - that._x1,
            s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
            s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
            p = (s0 * h1 + s1 * h0) / (h0 + h1);
        return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
    }

    // Calculate a one-sided slope.
    function slope2(that, t) {
        var h = that._x1 - that._x0;
        return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
    }

    // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
    // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
    // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
    function point$5(that, t0, t1) {
        var x0 = that._x0,
            y0 = that._y0,
            x1 = that._x1,
            y1 = that._y1,
            dx = (x1 - x0) / 3;
        that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
    }
    function MonotoneX(context) {
        this._context = context;
    }
    MonotoneX.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            switch (this._point) {
                case 2:
                    this._context.lineTo(this._x1, this._y1);
                    break;
                case 3:
                    point$5(this, this._t0, slope2(this, this._t0));
                    break;
            }
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            this._line = 1 - this._line;
        },
        point: function (x, y) {
            var t1 = NaN;
            x = +x, y = +y;
            if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                    break;
                case 2:
                    this._point = 3;
                    point$5(this, slope2(this, t1 = slope3(this, x, y)), t1);
                    break;
                default:
                    point$5(this, this._t0, t1 = slope3(this, x, y));
                    break;
            }
            this._x0 = this._x1, this._x1 = x;
            this._y0 = this._y1, this._y1 = y;
            this._t0 = t1;
        }
    };
    function MonotoneY(context) {
        this._context = new ReflectContext(context);
    }
    (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
        MonotoneX.prototype.point.call(this, y, x);
    };
    function ReflectContext(context) {
        this._context = context;
    }
    ReflectContext.prototype = {
        moveTo: function (x, y) {
            this._context.moveTo(y, x);
        },
        closePath: function () {
            this._context.closePath();
        },
        lineTo: function (x, y) {
            this._context.lineTo(y, x);
        },
        bezierCurveTo: function (x1, y1, x2, y2, x, y) {
            this._context.bezierCurveTo(y1, x1, y2, x2, y, x);
        }
    };
    function monotoneX(context) {
        return new MonotoneX(context);
    }
    function monotoneY(context) {
        return new MonotoneY(context);
    }

    function Natural(context) {
        this._context = context;
    }
    Natural.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x = [];
            this._y = [];
        },
        lineEnd: function () {
            var x = this._x,
                y = this._y,
                n = x.length;
            if (n) {
                this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
                if (n === 2) {
                    this._context.lineTo(x[1], y[1]);
                } else {
                    var px = controlPoints(x),
                        py = controlPoints(y);
                    for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
                        this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
                    }
                }
            }
            if (this._line || this._line !== 0 && n === 1) this._context.closePath();
            this._line = 1 - this._line;
            this._x = this._y = null;
        },
        point: function (x, y) {
            this._x.push(+x);
            this._y.push(+y);
        }
    };

    // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
    function controlPoints(x) {
        var i,
            n = x.length - 1,
            m,
            a = new Array(n),
            b = new Array(n),
            r = new Array(n);
        a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
        for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
        a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
        for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
        a[n - 1] = r[n - 1] / b[n - 1];
        for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
        b[n - 1] = (x[n] + a[n - 1]) / 2;
        for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
        return [a, b];
    }
    function natural (context) {
        return new Natural(context);
    }

    function Step(context, t) {
        this._context = context;
        this._t = t;
    }
    Step.prototype = {
        areaStart: function () {
            this._line = 0;
        },
        areaEnd: function () {
            this._line = NaN;
        },
        lineStart: function () {
            this._x = this._y = NaN;
            this._point = 0;
        },
        lineEnd: function () {
            if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
            if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
            if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
        },
        point: function (x, y) {
            x = +x, y = +y;
            switch (this._point) {
                case 0:
                    this._point = 1;
                    this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y);
                    break;
                case 1:
                    this._point = 2;
                // proceed
                default:
                {
                    if (this._t <= 0) {
                        this._context.lineTo(this._x, y);
                        this._context.lineTo(x, y);
                    } else {
                        var x1 = this._x * (1 - this._t) + x * this._t;
                        this._context.lineTo(x1, this._y);
                        this._context.lineTo(x1, y);
                    }
                    break;
                }
            }
            this._x = x, this._y = y;
        }
    };
    function step (context) {
        return new Step(context, 0.5);
    }
    function stepBefore(context) {
        return new Step(context, 0);
    }
    function stepAfter(context) {
        return new Step(context, 1);
    }

    function none$1 (series, order) {
        if (!((n = series.length) > 1)) return;
        for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
            s0 = s1, s1 = series[order[i]];
            for (j = 0; j < m; ++j) {
                s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
            }
        }
    }

    function none$2 (series) {
        var n = series.length,
            o = new Array(n);
        while (--n >= 0) o[n] = n;
        return o;
    }

    function stackValue(d, key) {
        return d[key];
    }
    function stack () {
        var keys = constant$5([]),
            order = none$2,
            offset = none$1,
            value = stackValue;
        function stack(data) {
            var kz = keys.apply(this, arguments),
                i,
                m = data.length,
                n = kz.length,
                sz = new Array(n),
                oz;
            for (i = 0; i < n; ++i) {
                for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
                    si[j] = sij = [0, +value(data[j], ki, j, data)];
                    sij.data = data[j];
                }
                si.key = ki;
            }
            for (i = 0, oz = order(sz); i < n; ++i) {
                sz[oz[i]].index = i;
            }
            offset(sz, oz);
            return sz;
        }
        stack.keys = function (_) {
            return arguments.length ? (keys = typeof _ === "function" ? _ : constant$5(slice$3.call(_)), stack) : keys;
        };
        stack.value = function (_) {
            return arguments.length ? (value = typeof _ === "function" ? _ : constant$5(+_), stack) : value;
        };
        stack.order = function (_) {
            return arguments.length ? (order = _ == null ? none$2 : typeof _ === "function" ? _ : constant$5(slice$3.call(_)), stack) : order;
        };
        stack.offset = function (_) {
            return arguments.length ? (offset = _ == null ? none$1 : _, stack) : offset;
        };
        return stack;
    }

    function expand (series, order) {
        if (!((n = series.length) > 0)) return;
        for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
            for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
            if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
        }
        none$1(series, order);
    }

    function diverging$1 (series, order) {
        if (!((n = series.length) > 0)) return;
        for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
            for (yp = yn = 0, i = 0; i < n; ++i) {
                if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
                    d[0] = yp, d[1] = yp += dy;
                } else if (dy < 0) {
                    d[1] = yn, d[0] = yn += dy;
                } else {
                    d[0] = 0, d[1] = dy;
                }
            }
        }
    }

    function silhouette (series, order) {
        if (!((n = series.length) > 0)) return;
        for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
            for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
            s0[j][1] += s0[j][0] = -y / 2;
        }
        none$1(series, order);
    }

    function wiggle (series, order) {
        if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
        for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
            for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
                var si = series[order[i]],
                    sij0 = si[j][1] || 0,
                    sij1 = si[j - 1][1] || 0,
                    s3 = (sij0 - sij1) / 2;
                for (var k = 0; k < i; ++k) {
                    var sk = series[order[k]],
                        skj0 = sk[j][1] || 0,
                        skj1 = sk[j - 1][1] || 0;
                    s3 += skj0 - skj1;
                }
                s1 += sij0, s2 += s3 * sij0;
            }
            s0[j - 1][1] += s0[j - 1][0] = y;
            if (s1) y -= s2 / s1;
        }
        s0[j - 1][1] += s0[j - 1][0] = y;
        none$1(series, order);
    }

    function appearance (series) {
        var peaks = series.map(peak);
        return none$2(series).sort(function (a, b) {
            return peaks[a] - peaks[b];
        });
    }
    function peak(series) {
        var i = -1,
            j = 0,
            n = series.length,
            vi,
            vj = -Infinity;
        while (++i < n) if ((vi = +series[i][1]) > vj) vj = vi, j = i;
        return j;
    }

    function ascending$2 (series) {
        var sums = series.map(sum$2);
        return none$2(series).sort(function (a, b) {
            return sums[a] - sums[b];
        });
    }
    function sum$2(series) {
        var s = 0,
            i = -1,
            n = series.length,
            v;
        while (++i < n) if (v = +series[i][1]) s += v;
        return s;
    }

    function descending$2 (series) {
        return ascending$2(series).reverse();
    }

    function insideOut (series) {
        var n = series.length,
            i,
            j,
            sums = series.map(sum$2),
            order = appearance(series),
            top = 0,
            bottom = 0,
            tops = [],
            bottoms = [];
        for (i = 0; i < n; ++i) {
            j = order[i];
            if (top < bottom) {
                top += sums[j];
                tops.push(j);
            } else {
                bottom += sums[j];
                bottoms.push(j);
            }
        }
        return bottoms.reverse().concat(tops);
    }

    function reverse (series) {
        return none$2(series).reverse();
    }

    var noop$2 = {
        value: function () {}
    };
    function dispatch() {
        for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
            if (!(t = arguments[i] + "") || t in _ || /[\s.]/.test(t)) throw new Error("illegal type: " + t);
            _[t] = [];
        }
        return new Dispatch(_);
    }
    function Dispatch(_) {
        this._ = _;
    }
    function parseTypenames$1(typenames, types) {
        return typenames.trim().split(/^|\s+/).map(function (t) {
            var name = "",
                i = t.indexOf(".");
            if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
            if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
            return {
                type: t,
                name: name
            };
        });
    }
    Dispatch.prototype = dispatch.prototype = {
        constructor: Dispatch,
        on: function (typename, callback) {
            var _ = this._,
                T = parseTypenames$1(typename + "", _),
                t,
                i = -1,
                n = T.length;

            // If no callback was specified, return the callback of the given type and name.
            if (arguments.length < 2) {
                while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
                return;
            }

            // If a type was specified, set the callback for the given type and name.
            // Otherwise, if a null callback was specified, remove callbacks of the given name.
            if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
            while (++i < n) {
                if (t = (typename = T[i]).type) _[t] = set$1(_[t], typename.name, callback);else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null);
            }
            return this;
        },
        copy: function () {
            var copy = {},
                _ = this._;
            for (var t in _) copy[t] = _[t].slice();
            return new Dispatch(copy);
        },
        call: function (type, that) {
            if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
            if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
            for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
        },
        apply: function (type, that, args) {
            if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
            for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
        }
    };
    function get(type, name) {
        for (var i = 0, n = type.length, c; i < n; ++i) {
            if ((c = type[i]).name === name) {
                return c.value;
            }
        }
    }
    function set$1(type, name, callback) {
        for (var i = 0, n = type.length; i < n; ++i) {
            if (type[i].name === name) {
                type[i] = noop$2, type = type.slice(0, i).concat(type.slice(i + 1));
                break;
            }
        }
        if (callback != null) type.push({
            name: name,
            value: callback
        });
        return type;
    }

    var frame = 0,
        // is an animation frame pending?
        timeout = 0,
        // is a timeout pending?
        interval = 0,
        // are any timers active?
        pokeDelay = 1000,
        // how frequently we check for clock skew
        taskHead,
        taskTail,
        clockLast = 0,
        clockNow = 0,
        clockSkew = 0,
        clock = typeof performance === "object" && performance.now ? performance : Date,
        setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
            setTimeout(f, 17);
        };
    function now() {
        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
    }
    function clearNow() {
        clockNow = 0;
    }
    function Timer() {
        this._call = this._time = this._next = null;
    }
    Timer.prototype = timer.prototype = {
        constructor: Timer,
        restart: function (callback, delay, time) {
            if (typeof callback !== "function") throw new TypeError("callback is not a function");
            time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
            if (!this._next && taskTail !== this) {
                if (taskTail) taskTail._next = this;else taskHead = this;
                taskTail = this;
            }
            this._call = callback;
            this._time = time;
            sleep();
        },
        stop: function () {
            if (this._call) {
                this._call = null;
                this._time = Infinity;
                sleep();
            }
        }
    };
    function timer(callback, delay, time) {
        var t = new Timer();
        t.restart(callback, delay, time);
        return t;
    }
    function timerFlush() {
        now(); // Get the current time, if not already set.
        ++frame; // Pretend we’ve set an alarm, if we haven’t already.
        var t = taskHead,
            e;
        while (t) {
            if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
            t = t._next;
        }
        --frame;
    }
    function wake() {
        clockNow = (clockLast = clock.now()) + clockSkew;
        frame = timeout = 0;
        try {
            timerFlush();
        } finally {
            frame = 0;
            nap();
            clockNow = 0;
        }
    }
    function poke() {
        var now = clock.now(),
            delay = now - clockLast;
        if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
    }
    function nap() {
        var t0,
            t1 = taskHead,
            t2,
            time = Infinity;
        while (t1) {
            if (t1._call) {
                if (time > t1._time) time = t1._time;
                t0 = t1, t1 = t1._next;
            } else {
                t2 = t1._next, t1._next = null;
                t1 = t0 ? t0._next = t2 : taskHead = t2;
            }
        }
        taskTail = t0;
        sleep(time);
    }
    function sleep(time) {
        if (frame) return; // Soonest alarm already set, or will be.
        if (timeout) timeout = clearTimeout(timeout);
        var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
        if (delay > 24) {
            if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
            if (interval) interval = clearInterval(interval);
        } else {
            if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
            frame = 1, setFrame(wake);
        }
    }

    function timeout$1 (callback, delay, time) {
        var t = new Timer();
        delay = delay == null ? 0 : +delay;
        t.restart(function (elapsed) {
            t.stop();
            callback(elapsed + delay);
        }, delay, time);
        return t;
    }

    var emptyOn = dispatch("start", "end", "cancel", "interrupt");
    var emptyTween = [];
    var CREATED = 0;
    var SCHEDULED = 1;
    var STARTING = 2;
    var STARTED = 3;
    var RUNNING = 4;
    var ENDING = 5;
    var ENDED = 6;
    function schedule (node, name, id, index, group, timing) {
        var schedules = node.__transition;
        if (!schedules) node.__transition = {};else if (id in schedules) return;
        create(node, id, {
            name: name,
            index: index,
            // For context during callback.
            group: group,
            // For context during callback.
            on: emptyOn,
            tween: emptyTween,
            time: timing.time,
            delay: timing.delay,
            duration: timing.duration,
            ease: timing.ease,
            timer: null,
            state: CREATED
        });
    }
    function init(node, id) {
        var schedule = get$1(node, id);
        if (schedule.state > CREATED) throw new Error("too late; already scheduled");
        return schedule;
    }
    function set$2(node, id) {
        var schedule = get$1(node, id);
        if (schedule.state > STARTED) throw new Error("too late; already running");
        return schedule;
    }
    function get$1(node, id) {
        var schedule = node.__transition;
        if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
        return schedule;
    }
    function create(node, id, self) {
        var schedules = node.__transition,
            tween;

        // Initialize the self timer when the transition is created.
        // Note the actual delay is not known until the first callback!
        schedules[id] = self;
        self.timer = timer(schedule, 0, self.time);
        function schedule(elapsed) {
            self.state = SCHEDULED;
            self.timer.restart(start, self.delay, self.time);

            // If the elapsed delay is less than our first sleep, start immediately.
            if (self.delay <= elapsed) start(elapsed - self.delay);
        }
        function start(elapsed) {
            var i, j, n, o;

            // If the state is not SCHEDULED, then we previously errored on start.
            if (self.state !== SCHEDULED) return stop();
            for (i in schedules) {
                o = schedules[i];
                if (o.name !== self.name) continue;

                // While this element already has a starting transition during this frame,
                // defer starting an interrupting transition until that transition has a
                // chance to tick (and possibly end); see d3/d3-transition#54!
                if (o.state === STARTED) return timeout$1(start);

                // Interrupt the active transition, if any.
                if (o.state === RUNNING) {
                    o.state = ENDED;
                    o.timer.stop();
                    o.on.call("interrupt", node, node.__data__, o.index, o.group);
                    delete schedules[i];
                }

                // Cancel any pre-empted transitions.
                else if (+i < id) {
                    o.state = ENDED;
                    o.timer.stop();
                    o.on.call("cancel", node, node.__data__, o.index, o.group);
                    delete schedules[i];
                }
            }

            // Defer the first tick to end of the current frame; see d3/d3#1576.
            // Note the transition may be canceled after start and before the first tick!
            // Note this must be scheduled before the start event; see d3/d3-transition#16!
            // Assuming this is successful, subsequent callbacks go straight to tick.
            timeout$1(function () {
                if (self.state === STARTED) {
                    self.state = RUNNING;
                    self.timer.restart(tick, self.delay, self.time);
                    tick(elapsed);
                }
            });

            // Dispatch the start event.
            // Note this must be done before the tween are initialized.
            self.state = STARTING;
            self.on.call("start", node, node.__data__, self.index, self.group);
            if (self.state !== STARTING) return; // interrupted
            self.state = STARTED;

            // Initialize the tween, deleting null tween.
            tween = new Array(n = self.tween.length);
            for (i = 0, j = -1; i < n; ++i) {
                if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
                    tween[++j] = o;
                }
            }
            tween.length = j + 1;
        }
        function tick(elapsed) {
            var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
                i = -1,
                n = tween.length;
            while (++i < n) {
                tween[i].call(node, t);
            }

            // Dispatch the end event.
            if (self.state === ENDING) {
                self.on.call("end", node, node.__data__, self.index, self.group);
                stop();
            }
        }
        function stop() {
            self.state = ENDED;
            self.timer.stop();
            delete schedules[id];
            for (var i in schedules) return; // eslint-disable-line no-unused-vars
            delete node.__transition;
        }
    }

    function interrupt (node, name) {
        var schedules = node.__transition,
            schedule,
            active,
            empty = true,
            i;
        if (!schedules) return;
        name = name == null ? null : name + "";
        for (i in schedules) {
            if ((schedule = schedules[i]).name !== name) {
                empty = false;
                continue;
            }
            active = schedule.state > STARTING && schedule.state < ENDING;
            schedule.state = ENDED;
            schedule.timer.stop();
            schedule.on.call(active ? "interrupt" : "cancel", node, node.__data__, schedule.index, schedule.group);
            delete schedules[i];
        }
        if (empty) delete node.__transition;
    }

    function selection_interrupt (name) {
        return this.each(function () {
            interrupt(this, name);
        });
    }

    function tweenRemove(id, name) {
        var tween0, tween1;
        return function () {
            var schedule = set$2(this, id),
                tween = schedule.tween;

            // If this node shared tween with the previous node,
            // just assign the updated shared tween and we’re done!
            // Otherwise, copy-on-write.
            if (tween !== tween0) {
                tween1 = tween0 = tween;
                for (var i = 0, n = tween1.length; i < n; ++i) {
                    if (tween1[i].name === name) {
                        tween1 = tween1.slice();
                        tween1.splice(i, 1);
                        break;
                    }
                }
            }
            schedule.tween = tween1;
        };
    }
    function tweenFunction(id, name, value) {
        var tween0, tween1;
        if (typeof value !== "function") throw new Error();
        return function () {
            var schedule = set$2(this, id),
                tween = schedule.tween;

            // If this node shared tween with the previous node,
            // just assign the updated shared tween and we’re done!
            // Otherwise, copy-on-write.
            if (tween !== tween0) {
                tween1 = (tween0 = tween).slice();
                for (var t = {
                    name: name,
                    value: value
                }, i = 0, n = tween1.length; i < n; ++i) {
                    if (tween1[i].name === name) {
                        tween1[i] = t;
                        break;
                    }
                }
                if (i === n) tween1.push(t);
            }
            schedule.tween = tween1;
        };
    }
    function transition_tween (name, value) {
        var id = this._id;
        name += "";
        if (arguments.length < 2) {
            var tween = get$1(this.node(), id).tween;
            for (var i = 0, n = tween.length, t; i < n; ++i) {
                if ((t = tween[i]).name === name) {
                    return t.value;
                }
            }
            return null;
        }
        return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
    }
    function tweenValue(transition, name, value) {
        var id = transition._id;
        transition.each(function () {
            var schedule = set$2(this, id);
            (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
        });
        return function (node) {
            return get$1(node, id).value[name];
        };
    }

    function interpolate$1 (a, b) {
        var c;
        return (typeof b === "number" ? interpolateNumber : b instanceof color ? interpolateRgb : (c = color(b)) ? (b = c, interpolateRgb) : interpolateString)(a, b);
    }

    function attrRemove$1(name) {
        return function () {
            this.removeAttribute(name);
        };
    }
    function attrRemoveNS$1(fullname) {
        return function () {
            this.removeAttributeNS(fullname.space, fullname.local);
        };
    }
    function attrConstant$1(name, interpolate, value1) {
        var string00,
            string1 = value1 + "",
            interpolate0;
        return function () {
            var string0 = this.getAttribute(name);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
        };
    }
    function attrConstantNS$1(fullname, interpolate, value1) {
        var string00,
            string1 = value1 + "",
            interpolate0;
        return function () {
            var string0 = this.getAttributeNS(fullname.space, fullname.local);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
        };
    }
    function attrFunction$1(name, interpolate, value) {
        var string00, string10, interpolate0;
        return function () {
            var string0,
                value1 = value(this),
                string1;
            if (value1 == null) return void this.removeAttribute(name);
            string0 = this.getAttribute(name);
            string1 = value1 + "";
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
        };
    }
    function attrFunctionNS$1(fullname, interpolate, value) {
        var string00, string10, interpolate0;
        return function () {
            var string0,
                value1 = value(this),
                string1;
            if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
            string0 = this.getAttributeNS(fullname.space, fullname.local);
            string1 = value1 + "";
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
        };
    }
    function transition_attr (name, value) {
        var fullname = namespace(name),
            i = fullname === "transform" ? interpolateTransformSvg : interpolate$1;
        return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname) : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value));
    }

    function attrInterpolate(name, i) {
        return function (t) {
            this.setAttribute(name, i.call(this, t));
        };
    }
    function attrInterpolateNS(fullname, i) {
        return function (t) {
            this.setAttributeNS(fullname.space, fullname.local, i.call(this, t));
        };
    }
    function attrTweenNS(fullname, value) {
        var t0, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i);
            return t0;
        }
        tween._value = value;
        return tween;
    }
    function attrTween(name, value) {
        var t0, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i);
            return t0;
        }
        tween._value = value;
        return tween;
    }
    function transition_attrTween (name, value) {
        var key = "attr." + name;
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error();
        var fullname = namespace(name);
        return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
    }

    function delayFunction(id, value) {
        return function () {
            init(this, id).delay = +value.apply(this, arguments);
        };
    }
    function delayConstant(id, value) {
        return value = +value, function () {
            init(this, id).delay = value;
        };
    }
    function transition_delay (value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : get$1(this.node(), id).delay;
    }

    function durationFunction(id, value) {
        return function () {
            set$2(this, id).duration = +value.apply(this, arguments);
        };
    }
    function durationConstant(id, value) {
        return value = +value, function () {
            set$2(this, id).duration = value;
        };
    }
    function transition_duration (value) {
        var id = this._id;
        return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : get$1(this.node(), id).duration;
    }

    function easeConstant(id, value) {
        if (typeof value !== "function") throw new Error();
        return function () {
            set$2(this, id).ease = value;
        };
    }
    function transition_ease (value) {
        var id = this._id;
        return arguments.length ? this.each(easeConstant(id, value)) : get$1(this.node(), id).ease;
    }

    function transition_filter (match) {
        if (typeof match !== "function") match = matcher(match);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
                if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
                    subgroup.push(node);
                }
            }
        }
        return new Transition(subgroups, this._parents, this._name, this._id);
    }

    function transition_merge (transition) {
        if (transition._id !== this._id) throw new Error();
        for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
            for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
                if (node = group0[i] || group1[i]) {
                    merge[i] = node;
                }
            }
        }
        for (; j < m0; ++j) {
            merges[j] = groups0[j];
        }
        return new Transition(merges, this._parents, this._name, this._id);
    }

    function start(name) {
        return (name + "").trim().split(/^|\s+/).every(function (t) {
            var i = t.indexOf(".");
            if (i >= 0) t = t.slice(0, i);
            return !t || t === "start";
        });
    }
    function onFunction(id, name, listener) {
        var on0,
            on1,
            sit = start(name) ? init : set$2;
        return function () {
            var schedule = sit(this, id),
                on = schedule.on;

            // If this node shared a dispatch with the previous node,
            // just assign the updated shared dispatch and we’re done!
            // Otherwise, copy-on-write.
            if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);
            schedule.on = on1;
        };
    }
    function transition_on (name, listener) {
        var id = this._id;
        return arguments.length < 2 ? get$1(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
    }

    function removeFunction(id) {
        return function () {
            var parent = this.parentNode;
            for (var i in this.__transition) if (+i !== id) return;
            if (parent) parent.removeChild(this);
        };
    }
    function transition_remove () {
        return this.on("end.remove", removeFunction(this._id));
    }

    function transition_select (select) {
        var name = this._name,
            id = this._id;
        if (typeof select !== "function") select = selector(select);
        for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
                if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
                    if ("__data__" in node) subnode.__data__ = node.__data__;
                    subgroup[i] = subnode;
                    schedule(subgroup[i], name, id, i, subgroup, get$1(node, id));
                }
            }
        }
        return new Transition(subgroups, this._parents, name, id);
    }

    function transition_selectAll (select) {
        var name = this._name,
            id = this._id;
        if (typeof select !== "function") select = selectorAll(select);
        for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    for (var children = select.call(node, node.__data__, i, group), child, inherit = get$1(node, id), k = 0, l = children.length; k < l; ++k) {
                        if (child = children[k]) {
                            schedule(child, name, id, k, children, inherit);
                        }
                    }
                    subgroups.push(children);
                    parents.push(node);
                }
            }
        }
        return new Transition(subgroups, parents, name, id);
    }

    var Selection$1 = selection.prototype.constructor;
    function transition_selection () {
        return new Selection$1(this._groups, this._parents);
    }

    function styleNull(name, interpolate) {
        var string00, string10, interpolate0;
        return function () {
            var string0 = styleValue(this, name),
                string1 = (this.style.removeProperty(name), styleValue(this, name));
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : interpolate0 = interpolate(string00 = string0, string10 = string1);
        };
    }
    function styleRemove$1(name) {
        return function () {
            this.style.removeProperty(name);
        };
    }
    function styleConstant$1(name, interpolate, value1) {
        var string00,
            string1 = value1 + "",
            interpolate0;
        return function () {
            var string0 = styleValue(this, name);
            return string0 === string1 ? null : string0 === string00 ? interpolate0 : interpolate0 = interpolate(string00 = string0, value1);
        };
    }
    function styleFunction$1(name, interpolate, value) {
        var string00, string10, interpolate0;
        return function () {
            var string0 = styleValue(this, name),
                value1 = value(this),
                string1 = value1 + "";
            if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name));
            return string0 === string1 ? null : string0 === string00 && string1 === string10 ? interpolate0 : (string10 = string1, interpolate0 = interpolate(string00 = string0, value1));
        };
    }
    function styleMaybeRemove(id, name) {
        var on0,
            on1,
            listener0,
            key = "style." + name,
            event = "end." + key,
            remove;
        return function () {
            var schedule = set$2(this, id),
                on = schedule.on,
                listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined;

            // If this node shared a dispatch with the previous node,
            // just assign the updated shared dispatch and we’re done!
            // Otherwise, copy-on-write.
            if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, listener0 = listener);
            schedule.on = on1;
        };
    }
    function transition_style (name, value, priority) {
        var i = (name += "") === "transform" ? interpolateTransformCss : interpolate$1;
        return value == null ? this.styleTween(name, styleNull(name, i)).on("end.style." + name, styleRemove$1(name)) : typeof value === "function" ? this.styleTween(name, styleFunction$1(name, i, tweenValue(this, "style." + name, value))).each(styleMaybeRemove(this._id, name)) : this.styleTween(name, styleConstant$1(name, i, value), priority).on("end.style." + name, null);
    }

    function styleInterpolate(name, i, priority) {
        return function (t) {
            this.style.setProperty(name, i.call(this, t), priority);
        };
    }
    function styleTween(name, value, priority) {
        var t, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority);
            return t;
        }
        tween._value = value;
        return tween;
    }
    function transition_styleTween (name, value, priority) {
        var key = "style." + (name += "");
        if (arguments.length < 2) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error();
        return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
    }

    function textConstant$1(value) {
        return function () {
            this.textContent = value;
        };
    }
    function textFunction$1(value) {
        return function () {
            var value1 = value(this);
            this.textContent = value1 == null ? "" : value1;
        };
    }
    function transition_text (value) {
        return this.tween("text", typeof value === "function" ? textFunction$1(tweenValue(this, "text", value)) : textConstant$1(value == null ? "" : value + ""));
    }

    function textInterpolate(i) {
        return function (t) {
            this.textContent = i.call(this, t);
        };
    }
    function textTween(value) {
        var t0, i0;
        function tween() {
            var i = value.apply(this, arguments);
            if (i !== i0) t0 = (i0 = i) && textInterpolate(i);
            return t0;
        }
        tween._value = value;
        return tween;
    }
    function transition_textTween (value) {
        var key = "text";
        if (arguments.length < 1) return (key = this.tween(key)) && key._value;
        if (value == null) return this.tween(key, null);
        if (typeof value !== "function") throw new Error();
        return this.tween(key, textTween(value));
    }

    function transition_transition () {
        var name = this._name,
            id0 = this._id,
            id1 = newId();
        for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    var inherit = get$1(node, id0);
                    schedule(node, name, id1, i, group, {
                        time: inherit.time + inherit.delay + inherit.duration,
                        delay: 0,
                        duration: inherit.duration,
                        ease: inherit.ease
                    });
                }
            }
        }
        return new Transition(groups, this._parents, name, id1);
    }

    function transition_end () {
        var on0,
            on1,
            that = this,
            id = that._id,
            size = that.size();
        return new Promise(function (resolve, reject) {
            var cancel = {
                    value: reject
                },
                end = {
                    value: function () {
                        if (--size === 0) resolve();
                    }
                };
            that.each(function () {
                var schedule = set$2(this, id),
                    on = schedule.on;

                // If this node shared a dispatch with the previous node,
                // just assign the updated shared dispatch and we’re done!
                // Otherwise, copy-on-write.
                if (on !== on0) {
                    on1 = (on0 = on).copy();
                    on1._.cancel.push(cancel);
                    on1._.interrupt.push(cancel);
                    on1._.end.push(end);
                }
                schedule.on = on1;
            });
        });
    }

    var id = 0;
    function Transition(groups, parents, name, id) {
        this._groups = groups;
        this._parents = parents;
        this._name = name;
        this._id = id;
    }
    function transition(name) {
        return selection().transition(name);
    }
    function newId() {
        return ++id;
    }
    var selection_prototype = selection.prototype;
    Transition.prototype = transition.prototype = {
        constructor: Transition,
        select: transition_select,
        selectAll: transition_selectAll,
        filter: transition_filter,
        merge: transition_merge,
        selection: transition_selection,
        transition: transition_transition,
        call: selection_prototype.call,
        nodes: selection_prototype.nodes,
        node: selection_prototype.node,
        size: selection_prototype.size,
        empty: selection_prototype.empty,
        each: selection_prototype.each,
        on: transition_on,
        attr: transition_attr,
        attrTween: transition_attrTween,
        style: transition_style,
        styleTween: transition_styleTween,
        text: transition_text,
        textTween: transition_textTween,
        remove: transition_remove,
        tween: transition_tween,
        delay: transition_delay,
        duration: transition_duration,
        ease: transition_ease,
        end: transition_end
    };

    var defaultTiming = {
        time: null,
        // Set on use.
        delay: 0,
        duration: 250,
        ease: cubicInOut
    };
    function inherit(node, id) {
        var timing;
        while (!(timing = node.__transition) || !(timing = timing[id])) {
            if (!(node = node.parentNode)) {
                return defaultTiming.time = now(), defaultTiming;
            }
        }
        return timing;
    }
    function selection_transition (name) {
        var id, timing;
        if (name instanceof Transition) {
            id = name._id, name = name._name;
        } else {
            id = newId(), (timing = defaultTiming).time = now(), name = name == null ? null : name + "";
        }
        for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
            for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
                if (node = group[i]) {
                    schedule(node, name, id, i, group, timing || inherit(node, id));
                }
            }
        }
        return new Transition(groups, this._parents, name, id);
    }

    selection.prototype.interrupt = selection_interrupt;
    selection.prototype.transition = selection_transition;

    var root$1 = [null];
    function active (node, name) {
        var schedules = node.__transition,
            schedule,
            i;
        if (schedules) {
            name = name == null ? null : name + "";
            for (i in schedules) {
                if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
                    return new Transition([[node]], root$1, name, +i);
                }
            }
        }
        return null;
    }

    function noevent () {
        event$1.preventDefault();
        event$1.stopImmediatePropagation();
    }

    function dragDisable (view) {
        var root = view.document.documentElement,
            selection = select(view).on("dragstart.drag", noevent, true);
        if ("onselectstart" in root) {
            selection.on("selectstart.drag", noevent, true);
        } else {
            root.__noselect = root.style.MozUserSelect;
            root.style.MozUserSelect = "none";
        }
    }
    function yesdrag(view, noclick) {
        var root = view.document.documentElement,
            selection = select(view).on("dragstart.drag", null);
        if (noclick) {
            selection.on("click.drag", noevent, true);
            setTimeout(function () {
                selection.on("click.drag", null);
            }, 0);
        }
        if ("onselectstart" in root) {
            selection.on("selectstart.drag", null);
        } else {
            root.style.MozUserSelect = root.__noselect;
            delete root.__noselect;
        }
    }

    function constant$6 (x) {
        return function () {
            return x;
        };
    }

    function ZoomEvent(target, type, transform) {
        this.target = target;
        this.type = type;
        this.transform = transform;
    }

    function Transform(k, x, y) {
        this.k = k;
        this.x = x;
        this.y = y;
    }
    Transform.prototype = {
        constructor: Transform,
        scale: function (k) {
            return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
        },
        translate: function (x, y) {
            return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
        },
        apply: function (point) {
            return [point[0] * this.k + this.x, point[1] * this.k + this.y];
        },
        applyX: function (x) {
            return x * this.k + this.x;
        },
        applyY: function (y) {
            return y * this.k + this.y;
        },
        invert: function (location) {
            return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
        },
        invertX: function (x) {
            return (x - this.x) / this.k;
        },
        invertY: function (y) {
            return (y - this.y) / this.k;
        },
        rescaleX: function (x) {
            return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
        },
        rescaleY: function (y) {
            return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
        },
        toString: function () {
            return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
        }
    };
    var identity$9 = new Transform(1, 0, 0);
    transform$1.prototype = Transform.prototype;
    function transform$1(node) {
        while (!node.__zoom) if (!(node = node.parentNode)) return identity$9;
        return node.__zoom;
    }

    function nopropagation() {
        event$1.stopImmediatePropagation();
    }
    function noevent$1 () {
        event$1.preventDefault();
        event$1.stopImmediatePropagation();
    }

    // Ignore right-click, since that should open the context menu.
    function defaultFilter() {
        return !event$1.ctrlKey && !event$1.button;
    }
    function defaultExtent() {
        var e = this;
        if (e instanceof SVGElement) {
            e = e.ownerSVGElement || e;
            if (e.hasAttribute("viewBox")) {
                e = e.viewBox.baseVal;
                return [[e.x, e.y], [e.x + e.width, e.y + e.height]];
            }
            return [[0, 0], [e.width.baseVal.value, e.height.baseVal.value]];
        }
        return [[0, 0], [e.clientWidth, e.clientHeight]];
    }
    function defaultTransform() {
        return this.__zoom || identity$9;
    }
    function defaultWheelDelta() {
        return -event$1.deltaY * (event$1.deltaMode === 1 ? 0.05 : event$1.deltaMode ? 1 : 0.002);
    }
    function defaultTouchable() {
        return navigator.maxTouchPoints || "ontouchstart" in this;
    }
    function defaultConstrain(transform, extent, translateExtent) {
        var dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
            dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
            dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
            dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1];
        return transform.translate(dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1), dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1));
    }
    function zoom () {
        var filter = defaultFilter,
            extent = defaultExtent,
            constrain = defaultConstrain,
            wheelDelta = defaultWheelDelta,
            touchable = defaultTouchable,
            scaleExtent = [0, Infinity],
            translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
            duration = 250,
            interpolate = interpolateZoom,
            listeners = dispatch("start", "zoom", "end"),
            touchstarting,
            touchending,
            touchDelay = 500,
            wheelDelay = 150,
            clickDistance2 = 0;
        function zoom(selection) {
            selection.property("__zoom", defaultTransform).on("wheel.zoom", wheeled).on("mousedown.zoom", mousedowned).on("dblclick.zoom", dblclicked).filter(touchable).on("touchstart.zoom", touchstarted).on("touchmove.zoom", touchmoved).on("touchend.zoom touchcancel.zoom", touchended).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
        }
        zoom.transform = function (collection, transform, point) {
            var selection = collection.selection ? collection.selection() : collection;
            selection.property("__zoom", defaultTransform);
            if (collection !== selection) {
                schedule(collection, transform, point);
            } else {
                selection.interrupt().each(function () {
                    gesture(this, arguments).start().zoom(null, typeof transform === "function" ? transform.apply(this, arguments) : transform).end();
                });
            }
        };
        zoom.scaleBy = function (selection, k, p) {
            zoom.scaleTo(selection, function () {
                var k0 = this.__zoom.k,
                    k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return k0 * k1;
            }, p);
        };
        zoom.scaleTo = function (selection, k, p) {
            zoom.transform(selection, function () {
                var e = extent.apply(this, arguments),
                    t0 = this.__zoom,
                    p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p,
                    p1 = t0.invert(p0),
                    k1 = typeof k === "function" ? k.apply(this, arguments) : k;
                return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
            }, p);
        };
        zoom.translateBy = function (selection, x, y) {
            zoom.transform(selection, function () {
                return constrain(this.__zoom.translate(typeof x === "function" ? x.apply(this, arguments) : x, typeof y === "function" ? y.apply(this, arguments) : y), extent.apply(this, arguments), translateExtent);
            });
        };
        zoom.translateTo = function (selection, x, y, p) {
            zoom.transform(selection, function () {
                var e = extent.apply(this, arguments),
                    t = this.__zoom,
                    p0 = p == null ? centroid(e) : typeof p === "function" ? p.apply(this, arguments) : p;
                return constrain(identity$9.translate(p0[0], p0[1]).scale(t.k).translate(typeof x === "function" ? -x.apply(this, arguments) : -x, typeof y === "function" ? -y.apply(this, arguments) : -y), e, translateExtent);
            }, p);
        };
        function scale(transform, k) {
            k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
            return k === transform.k ? transform : new Transform(k, transform.x, transform.y);
        }
        function translate(transform, p0, p1) {
            var x = p0[0] - p1[0] * transform.k,
                y = p0[1] - p1[1] * transform.k;
            return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y);
        }
        function centroid(extent) {
            return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
        }
        function schedule(transition, transform, point) {
            transition.on("start.zoom", function () {
                gesture(this, arguments).start();
            }).on("interrupt.zoom end.zoom", function () {
                gesture(this, arguments).end();
            }).tween("zoom", function () {
                var that = this,
                    args = arguments,
                    g = gesture(that, args),
                    e = extent.apply(that, args),
                    p = point == null ? centroid(e) : typeof point === "function" ? point.apply(that, args) : point,
                    w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
                    a = that.__zoom,
                    b = typeof transform === "function" ? transform.apply(that, args) : transform,
                    i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
                return function (t) {
                    if (t === 1) t = b; // Avoid rounding error on end.
                    else {
                        var l = i(t),
                            k = w / l[2];
                        t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k);
                    }
                    g.zoom(null, t);
                };
            });
        }
        function gesture(that, args, clean) {
            return !clean && that.__zooming || new Gesture(that, args);
        }
        function Gesture(that, args) {
            this.that = that;
            this.args = args;
            this.active = 0;
            this.extent = extent.apply(that, args);
            this.taps = 0;
        }
        Gesture.prototype = {
            start: function () {
                if (++this.active === 1) {
                    this.that.__zooming = this;
                    this.emit("start");
                }
                return this;
            },
            zoom: function (key, transform) {
                if (this.mouse && key !== "mouse") this.mouse[1] = transform.invert(this.mouse[0]);
                if (this.touch0 && key !== "touch") this.touch0[1] = transform.invert(this.touch0[0]);
                if (this.touch1 && key !== "touch") this.touch1[1] = transform.invert(this.touch1[0]);
                this.that.__zoom = transform;
                this.emit("zoom");
                return this;
            },
            end: function () {
                if (--this.active === 0) {
                    delete this.that.__zooming;
                    this.emit("end");
                }
                return this;
            },
            emit: function (type) {
                customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
            }
        };
        function wheeled() {
            if (!filter.apply(this, arguments)) return;
            var g = gesture(this, arguments),
                t = this.__zoom,
                k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
                p = mouse(this);

            // If the mouse is in the same location as before, reuse it.
            // If there were recent wheel events, reset the wheel idle timeout.
            if (g.wheel) {
                if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
                    g.mouse[1] = t.invert(g.mouse[0] = p);
                }
                clearTimeout(g.wheel);
            }

            // If this wheel event won’t trigger a transform change, ignore it.
            else if (t.k === k) return;

            // Otherwise, capture the mouse point and location at the start.
            else {
                g.mouse = [p, t.invert(p)];
                interrupt(this);
                g.start();
            }
            noevent$1();
            g.wheel = setTimeout(wheelidled, wheelDelay);
            g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));
            function wheelidled() {
                g.wheel = null;
                g.end();
            }
        }
        function mousedowned() {
            if (touchending || !filter.apply(this, arguments)) return;
            var g = gesture(this, arguments, true),
                v = select(event$1.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
                p = mouse(this),
                x0 = event$1.clientX,
                y0 = event$1.clientY;
            dragDisable(event$1.view);
            nopropagation();
            g.mouse = [p, this.__zoom.invert(p)];
            interrupt(this);
            g.start();
            function mousemoved() {
                noevent$1();
                if (!g.moved) {
                    var dx = event$1.clientX - x0,
                        dy = event$1.clientY - y0;
                    g.moved = dx * dx + dy * dy > clickDistance2;
                }
                g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = mouse(g.that), g.mouse[1]), g.extent, translateExtent));
            }
            function mouseupped() {
                v.on("mousemove.zoom mouseup.zoom", null);
                yesdrag(event$1.view, g.moved);
                noevent$1();
                g.end();
            }
        }
        function dblclicked() {
            if (!filter.apply(this, arguments)) return;
            var t0 = this.__zoom,
                p0 = mouse(this),
                p1 = t0.invert(p0),
                k1 = t0.k * (event$1.shiftKey ? 0.5 : 2),
                t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);
            noevent$1();
            if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0);else select(this).call(zoom.transform, t1);
        }
        function touchstarted() {
            if (!filter.apply(this, arguments)) return;
            var touches = event$1.touches,
                n = touches.length,
                g = gesture(this, arguments, event$1.changedTouches.length === n),
                started,
                i,
                t,
                p;
            nopropagation();
            for (i = 0; i < n; ++i) {
                t = touches[i], p = touch(this, touches, t.identifier);
                p = [p, this.__zoom.invert(p), t.identifier];
                if (!g.touch0) g.touch0 = p, started = true, g.taps = 1 + !!touchstarting;else if (!g.touch1 && g.touch0[2] !== p[2]) g.touch1 = p, g.taps = 0;
            }
            if (touchstarting) touchstarting = clearTimeout(touchstarting);
            if (started) {
                if (g.taps < 2) touchstarting = setTimeout(function () {
                    touchstarting = null;
                }, touchDelay);
                interrupt(this);
                g.start();
            }
        }
        function touchmoved() {
            if (!this.__zooming) return;
            var g = gesture(this, arguments),
                touches = event$1.changedTouches,
                n = touches.length,
                i,
                t,
                p,
                l;
            noevent$1();
            if (touchstarting) touchstarting = clearTimeout(touchstarting);
            g.taps = 0;
            for (i = 0; i < n; ++i) {
                t = touches[i], p = touch(this, touches, t.identifier);
                if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
            }
            t = g.that.__zoom;
            if (g.touch1) {
                var p0 = g.touch0[0],
                    l0 = g.touch0[1],
                    p1 = g.touch1[0],
                    l1 = g.touch1[1],
                    dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
                    dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
                t = scale(t, Math.sqrt(dp / dl));
                p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
                l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
            } else if (g.touch0) p = g.touch0[0], l = g.touch0[1];else return;
            g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
        }
        function touchended() {
            if (!this.__zooming) return;
            var g = gesture(this, arguments),
                touches = event$1.changedTouches,
                n = touches.length,
                i,
                t;
            nopropagation();
            if (touchending) clearTimeout(touchending);
            touchending = setTimeout(function () {
                touchending = null;
            }, touchDelay);
            for (i = 0; i < n; ++i) {
                t = touches[i];
                if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
            }
            if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
            if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);else {
                g.end();
                // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
                if (g.taps === 2) {
                    var p = select(this).on("dblclick.zoom");
                    if (p) p.apply(this, arguments);
                }
            }
        }
        zoom.wheelDelta = function (_) {
            return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant$6(+_), zoom) : wheelDelta;
        };
        zoom.filter = function (_) {
            return arguments.length ? (filter = typeof _ === "function" ? _ : constant$6(!!_), zoom) : filter;
        };
        zoom.touchable = function (_) {
            return arguments.length ? (touchable = typeof _ === "function" ? _ : constant$6(!!_), zoom) : touchable;
        };
        zoom.extent = function (_) {
            return arguments.length ? (extent = typeof _ === "function" ? _ : constant$6([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
        };
        zoom.scaleExtent = function (_) {
            return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
        };
        zoom.translateExtent = function (_) {
            return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
        };
        zoom.constrain = function (_) {
            return arguments.length ? (constrain = _, zoom) : constrain;
        };
        zoom.duration = function (_) {
            return arguments.length ? (duration = +_, zoom) : duration;
        };
        zoom.interpolate = function (_) {
            return arguments.length ? (interpolate = _, zoom) : interpolate;
        };
        zoom.on = function () {
            var value = listeners.on.apply(listeners, arguments);
            return value === listeners ? zoom : value;
        };
        zoom.clickDistance = function (_) {
            return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
        };
        return zoom;
    }

    var slice$4 = [].slice;

    var noabort = {};
    function Queue(size) {
        this._size = size;
        this._call = this._error = null;
        this._tasks = [];
        this._data = [];
        this._waiting = this._active = this._ended = this._start = 0; // inside a synchronous task callback?
    }
    Queue.prototype = queue.prototype = {
        constructor: Queue,
        defer: function (callback) {
            if (typeof callback !== "function") throw new Error("invalid callback");
            if (this._call) throw new Error("defer after await");
            if (this._error != null) return this;
            var t = slice$4.call(arguments, 1);
            t.push(callback);
            ++this._waiting, this._tasks.push(t);
            poke$1(this);
            return this;
        },
        abort: function () {
            if (this._error == null) abort(this, new Error("abort"));
            return this;
        },
        await: function (callback) {
            if (typeof callback !== "function") throw new Error("invalid callback");
            if (this._call) throw new Error("multiple await");
            this._call = function (error, results) {
                callback.apply(null, [error].concat(results));
            };
            maybeNotify(this);
            return this;
        },
        awaitAll: function (callback) {
            if (typeof callback !== "function") throw new Error("invalid callback");
            if (this._call) throw new Error("multiple await");
            this._call = callback;
            maybeNotify(this);
            return this;
        }
    };
    function poke$1(q) {
        if (!q._start) {
            try {
                start$1(q);
            } // let the current task complete
            catch (e) {
                if (q._tasks[q._ended + q._active - 1]) abort(q, e); // task errored synchronously
                else if (!q._data) throw e; // await callback errored synchronously
            }
        }
    }
    function start$1(q) {
        while (q._start = q._waiting && q._active < q._size) {
            var i = q._ended + q._active,
                t = q._tasks[i],
                j = t.length - 1,
                c = t[j];
            t[j] = end(q, i);
            --q._waiting, ++q._active;
            t = c.apply(null, t);
            if (!q._tasks[i]) continue; // task finished synchronously
            q._tasks[i] = t || noabort;
        }
    }
    function end(q, i) {
        return function (e, r) {
            if (!q._tasks[i]) return; // ignore multiple callbacks
            --q._active, ++q._ended;
            q._tasks[i] = null;
            if (q._error != null) return; // ignore secondary errors
            if (e != null) {
                abort(q, e);
            } else {
                q._data[i] = r;
                if (q._waiting) poke$1(q);else maybeNotify(q);
            }
        };
    }
    function abort(q, e) {
        var i = q._tasks.length,
            t;
        q._error = e; // ignore active callbacks
        q._data = undefined; // allow gc
        q._waiting = NaN; // prevent starting

        while (--i >= 0) {
            if (t = q._tasks[i]) {
                q._tasks[i] = null;
                if (t.abort) {
                    try {
                        t.abort();
                    } catch (e) {/* ignore */}
                }
            }
        }
        q._active = NaN; // allow notification
        maybeNotify(q);
    }
    function maybeNotify(q) {
        if (!q._active && q._call) {
            var d = q._data;
            q._data = undefined; // allow gc
            q._call(q._error, d);
        }
    }
    function queue(concurrency) {
        if (concurrency == null) concurrency = Infinity;else if (!((concurrency = +concurrency) >= 1)) throw new Error("invalid concurrency");
        return new Queue(concurrency);
    }

    //export {version} from "./dist/package";

    var d3 = /*#__PURE__*/Object.freeze({
        get event () { return event$1; },
        select: select,
        selectAll: selectAll,
        bisect: bisectRight,
        bisectRight: bisectRight,
        bisectLeft: bisectLeft,
        ascending: ascending,
        bisector: bisector,
        cross: cross,
        descending: descending,
        deviation: deviation,
        extent: extent,
        histogram: histogram,
        thresholdFreedmanDiaconis: freedmanDiaconis,
        thresholdScott: scott,
        thresholdSturges: sturges,
        max: max,
        mean: mean,
        median: median,
        merge: merge,
        min: min,
        pairs: pairs,
        permute: permute,
        quantile: threshold,
        range: sequence,
        scan: scan,
        shuffle: shuffle,
        sum: sum,
        ticks: ticks,
        tickIncrement: tickIncrement,
        tickStep: tickStep,
        transpose: transpose,
        variance: variance,
        zip: zip,
        axisTop: axisTop,
        axisRight: axisRight,
        axisBottom: axisBottom,
        axisLeft: axisLeft,
        easeLinear: linear,
        easeQuad: quadInOut,
        easeQuadIn: quadIn,
        easeQuadOut: quadOut,
        easeQuadInOut: quadInOut,
        easeCubic: cubicInOut,
        easeCubicIn: cubicIn,
        easeCubicOut: cubicOut,
        easeCubicInOut: cubicInOut,
        easePoly: polyInOut,
        easePolyIn: polyIn,
        easePolyOut: polyOut,
        easePolyInOut: polyInOut,
        easeSin: sinInOut,
        easeSinIn: sinIn,
        easeSinOut: sinOut,
        easeSinInOut: sinInOut,
        easeExp: expInOut,
        easeExpIn: expIn,
        easeExpOut: expOut,
        easeExpInOut: expInOut,
        easeCircle: circleInOut,
        easeCircleIn: circleIn,
        easeCircleOut: circleOut,
        easeCircleInOut: circleInOut,
        easeBounce: bounceOut,
        easeBounceIn: bounceIn,
        easeBounceOut: bounceOut,
        easeBounceInOut: bounceInOut,
        easeBack: backInOut,
        easeBackIn: backIn,
        easeBackOut: backOut,
        easeBackInOut: backInOut,
        easeElastic: elasticOut,
        easeElasticIn: elasticIn,
        easeElasticOut: elasticOut,
        easeElasticInOut: elasticInOut,
        formatDefaultLocale: defaultLocale,
        get format () { return format; },
        get formatPrefix () { return formatPrefix; },
        formatLocale: formatLocale,
        formatSpecifier: formatSpecifier,
        FormatSpecifier: FormatSpecifier,
        precisionFixed: precisionFixed,
        precisionPrefix: precisionPrefix,
        precisionRound: precisionRound,
        geoArea: area,
        geoBounds: bounds,
        geoCentroid: centroid,
        geoCircle: circle,
        geoClipAntimeridian: clipAntimeridian,
        geoClipCircle: clipCircle,
        geoClipExtent: extent$1,
        geoClipRectangle: clipRectangle,
        geoContains: contains,
        geoDistance: distance,
        geoGraticule: graticule,
        geoGraticule10: graticule10,
        geoInterpolate: interpolate,
        geoLength: length$1,
        geoPath: index,
        geoAlbers: albers,
        geoAlbersUsa: albersUsa,
        geoAzimuthalEqualArea: azimuthalEqualArea,
        geoAzimuthalEqualAreaRaw: azimuthalEqualAreaRaw,
        geoAzimuthalEquidistant: azimuthalEquidistant,
        geoAzimuthalEquidistantRaw: azimuthalEquidistantRaw,
        geoConicConformal: conicConformal,
        geoConicConformalRaw: conicConformalRaw,
        geoConicEqualArea: conicEqualArea,
        geoConicEqualAreaRaw: conicEqualAreaRaw,
        geoConicEquidistant: conicEquidistant,
        geoConicEquidistantRaw: conicEquidistantRaw,
        geoEqualEarth: equalEarth,
        geoEqualEarthRaw: equalEarthRaw,
        geoEquirectangular: equirectangular,
        geoEquirectangularRaw: equirectangularRaw,
        geoGnomonic: gnomonic,
        geoGnomonicRaw: gnomonicRaw,
        geoIdentity: identity$4,
        geoProjection: projection,
        geoProjectionMutator: projectionMutator,
        geoMercator: mercator,
        geoMercatorRaw: mercatorRaw,
        geoNaturalEarth1: naturalEarth1,
        geoNaturalEarth1Raw: naturalEarth1Raw,
        geoOrthographic: orthographic,
        geoOrthographicRaw: orthographicRaw,
        geoStereographic: stereographic,
        geoStereographicRaw: stereographicRaw,
        geoTransverseMercator: transverseMercator,
        geoTransverseMercatorRaw: transverseMercatorRaw,
        geoRotation: rotation,
        geoStream: geoStream,
        geoTransform: transform,
        path: path,
        scaleBand: band,
        scalePoint: point,
        scaleIdentity: identity$7,
        scaleLinear: linear$2,
        scaleLog: log$1,
        scaleSymlog: symlog,
        scaleOrdinal: ordinal,
        scaleImplicit: implicit,
        scalePow: pow$1,
        scaleSqrt: sqrt$1,
        scaleQuantile: quantile,
        scaleQuantize: quantize,
        scaleThreshold: threshold$1,
        scaleTime: time,
        scaleUtc: utcTime,
        scaleSequential: sequential,
        scaleSequentialLog: sequentialLog,
        scaleSequentialPow: sequentialPow,
        scaleSequentialSqrt: sequentialSqrt,
        scaleSequentialSymlog: sequentialSymlog,
        scaleSequentialQuantile: sequentialQuantile,
        scaleDiverging: diverging,
        scaleDivergingLog: divergingLog,
        scaleDivergingPow: divergingPow,
        scaleDivergingSqrt: divergingSqrt,
        scaleDivergingSymlog: divergingSymlog,
        tickFormat: tickFormat,
        schemeCategory10: category10,
        schemeAccent: Accent,
        schemeDark2: Dark2,
        schemePaired: Paired,
        schemePastel1: Pastel1,
        schemePastel2: Pastel2,
        schemeSet1: Set1,
        schemeSet2: Set2,
        schemeSet3: Set3,
        interpolateBrBG: BrBG,
        schemeBrBG: scheme,
        interpolatePRGn: PRGn,
        schemePRGn: scheme$1,
        interpolatePiYG: PiYG,
        schemePiYG: scheme$2,
        interpolatePuOr: PuOr,
        schemePuOr: scheme$3,
        interpolateRdBu: RdBu,
        schemeRdBu: scheme$4,
        interpolateRdGy: RdGy,
        schemeRdGy: scheme$5,
        interpolateRdYlBu: RdYlBu,
        schemeRdYlBu: scheme$6,
        interpolateRdYlGn: RdYlGn,
        schemeRdYlGn: scheme$7,
        interpolateSpectral: Spectral,
        schemeSpectral: scheme$8,
        interpolateBuGn: BuGn,
        schemeBuGn: scheme$9,
        interpolateBuPu: BuPu,
        schemeBuPu: scheme$a,
        interpolateGnBu: GnBu,
        schemeGnBu: scheme$b,
        interpolateOrRd: OrRd,
        schemeOrRd: scheme$c,
        interpolatePuBuGn: PuBuGn,
        schemePuBuGn: scheme$d,
        interpolatePuBu: PuBu,
        schemePuBu: scheme$e,
        interpolatePuRd: PuRd,
        schemePuRd: scheme$f,
        interpolateRdPu: RdPu,
        schemeRdPu: scheme$g,
        interpolateYlGnBu: YlGnBu,
        schemeYlGnBu: scheme$h,
        interpolateYlGn: YlGn,
        schemeYlGn: scheme$i,
        interpolateYlOrBr: YlOrBr,
        schemeYlOrBr: scheme$j,
        interpolateYlOrRd: YlOrRd,
        schemeYlOrRd: scheme$k,
        interpolateBlues: Blues,
        schemeBlues: scheme$l,
        interpolateGreens: Greens,
        schemeGreens: scheme$m,
        interpolateGreys: Greys,
        schemeGreys: scheme$n,
        interpolatePurples: Purples,
        schemePurples: scheme$o,
        interpolateReds: Reds,
        schemeReds: scheme$p,
        interpolateOranges: Oranges,
        schemeOranges: scheme$q,
        interpolateCubehelixDefault: cubehelix$2,
        interpolateRainbow: rainbow,
        interpolateWarm: warm,
        interpolateCool: cool,
        interpolateSinebow: sinebow,
        interpolateViridis: viridis,
        interpolateMagma: magma,
        interpolateInferno: inferno,
        interpolatePlasma: plasma,
        arc: arc,
        area: area$1,
        line: line,
        pie: pie,
        areaRadial: areaRadial,
        radialArea: areaRadial,
        lineRadial: lineRadial$1,
        radialLine: lineRadial$1,
        pointRadial: pointRadial,
        linkHorizontal: linkHorizontal,
        linkVertical: linkVertical,
        linkRadial: linkRadial,
        symbol: symbol,
        symbols: symbols,
        symbolCircle: circle$2,
        symbolCross: cross$1,
        symbolDiamond: diamond,
        symbolSquare: square,
        symbolStar: star,
        symbolTriangle: triangle,
        symbolWye: wye,
        curveBasisClosed: basisClosed,
        curveBasisOpen: basisOpen,
        curveBasis: basis$2,
        curveBundle: bundle,
        curveCardinalClosed: cardinalClosed,
        curveCardinalOpen: cardinalOpen,
        curveCardinal: cardinal,
        curveCatmullRomClosed: catmullRomClosed,
        curveCatmullRomOpen: catmullRomOpen,
        curveCatmullRom: catmullRom,
        curveLinearClosed: linearClosed,
        curveLinear: curveLinear,
        curveMonotoneX: monotoneX,
        curveMonotoneY: monotoneY,
        curveNatural: natural,
        curveStep: step,
        curveStepAfter: stepAfter,
        curveStepBefore: stepBefore,
        stack: stack,
        stackOffsetExpand: expand,
        stackOffsetDiverging: diverging$1,
        stackOffsetNone: none$1,
        stackOffsetSilhouette: silhouette,
        stackOffsetWiggle: wiggle,
        stackOrderAppearance: appearance,
        stackOrderAscending: ascending$2,
        stackOrderDescending: descending$2,
        stackOrderInsideOut: insideOut,
        stackOrderNone: none$2,
        stackOrderReverse: reverse,
        timeFormatDefaultLocale: defaultLocale$1,
        get timeFormat () { return timeFormat; },
        get timeParse () { return timeParse; },
        get utcFormat () { return utcFormat; },
        get utcParse () { return utcParse; },
        timeFormatLocale: formatLocale$1,
        isoFormat: formatIso,
        isoParse: parseIso,
        transition: transition,
        active: active,
        interrupt: interrupt,
        zoom: zoom,
        zoomTransform: transform$1,
        zoomIdentity: identity$9,
        queue: queue
    });

    var __assign = window && window.__assign || function () {
            return (__assign = Object.assign || function (t) {
                for (var i, a = 1, s = arguments.length; a < s; a++) for (var n in i = arguments[a]) Object.prototype.hasOwnProperty.call(i, n) && (t[n] = i[n]);
                return t;
            }).apply(this, arguments);
        },
        CountUp = function () {
            function t(t, i, a) {
                var s = this;
                this.target = t, this.endVal = i, this.options = a, this.version = "2.0.8", this.defaults = {
                    startVal: 0,
                    decimalPlaces: 0,
                    duration: 2,
                    useEasing: !0,
                    useGrouping: !0,
                    smartEasingThreshold: 999,
                    smartEasingAmount: 333,
                    separator: ",",
                    decimal: ".",
                    prefix: "",
                    suffix: ""
                }, this.finalEndVal = null, this.useEasing = !0, this.countDown = !1, this.error = "", this.startVal = 0, this.paused = !0, this.count = function (t) {
                    s.startTime || (s.startTime = t);
                    var i = t - s.startTime;
                    s.remaining = s.duration - i, s.useEasing ? s.countDown ? s.frameVal = s.startVal - s.easingFn(i, 0, s.startVal - s.endVal, s.duration) : s.frameVal = s.easingFn(i, s.startVal, s.endVal - s.startVal, s.duration) : s.countDown ? s.frameVal = s.startVal - (s.startVal - s.endVal) * (i / s.duration) : s.frameVal = s.startVal + (s.endVal - s.startVal) * (i / s.duration), s.countDown ? s.frameVal = s.frameVal < s.endVal ? s.endVal : s.frameVal : s.frameVal = s.frameVal > s.endVal ? s.endVal : s.frameVal, s.frameVal = Number(s.frameVal.toFixed(s.options.decimalPlaces)), s.printValue(s.frameVal), i < s.duration ? s.rAF = requestAnimationFrame(s.count) : null !== s.finalEndVal ? s.update(s.finalEndVal) : s.callback && s.callback();
                }, this.formatNumber = function (t) {
                    var i,
                        a,
                        n,
                        e,
                        r = t < 0 ? "-" : "";
                    i = Math.abs(t).toFixed(s.options.decimalPlaces);
                    var o = (i += "").split(".");
                    if (a = o[0], n = o.length > 1 ? s.options.decimal + o[1] : "", s.options.useGrouping) {
                        e = "";
                        for (var l = 0, h = a.length; l < h; ++l) 0 !== l && l % 3 == 0 && (e = s.options.separator + e), e = a[h - l - 1] + e;
                        a = e;
                    }
                    return s.options.numerals && s.options.numerals.length && (a = a.replace(/[0-9]/g, function (t) {
                        return s.options.numerals[+t];
                    }), n = n.replace(/[0-9]/g, function (t) {
                        return s.options.numerals[+t];
                    })), r + s.options.prefix + a + n + s.options.suffix;
                }, this.easeOutExpo = function (t, i, a, s) {
                    return a * (1 - Math.pow(2, -10 * t / s)) * 1024 / 1023 + i;
                }, this.options = __assign(__assign({}, this.defaults), a), this.formattingFn = this.options.formattingFn ? this.options.formattingFn : this.formatNumber, this.easingFn = this.options.easingFn ? this.options.easingFn : this.easeOutExpo, this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.endVal = this.validateValue(i), this.options.decimalPlaces = Math.max(this.options.decimalPlaces), this.resetDuration(), this.options.separator = String(this.options.separator), this.useEasing = this.options.useEasing, "" === this.options.separator && (this.options.useGrouping = !1), this.el = "string" == typeof t ? document.getElementById(t) : t, this.el ? this.printValue(this.startVal) : this.error = "[CountUp] target is null or undefined";
            }
            return t.prototype.determineDirectionAndSmartEasing = function () {
                var t = this.finalEndVal ? this.finalEndVal : this.endVal;
                this.countDown = this.startVal > t;
                var i = t - this.startVal;
                if (Math.abs(i) > this.options.smartEasingThreshold) {
                    this.finalEndVal = t;
                    var a = this.countDown ? 1 : -1;
                    this.endVal = t + a * this.options.smartEasingAmount, this.duration = this.duration / 2;
                } else this.endVal = t, this.finalEndVal = null;
                this.finalEndVal ? this.useEasing = !1 : this.useEasing = this.options.useEasing;
            }, t.prototype.start = function (t) {
                this.error || (this.callback = t, this.duration > 0 ? (this.determineDirectionAndSmartEasing(), this.paused = !1, this.rAF = requestAnimationFrame(this.count)) : this.printValue(this.endVal));
            }, t.prototype.pauseResume = function () {
                this.paused ? (this.startTime = null, this.duration = this.remaining, this.startVal = this.frameVal, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count)) : cancelAnimationFrame(this.rAF), this.paused = !this.paused;
            }, t.prototype.reset = function () {
                cancelAnimationFrame(this.rAF), this.paused = !0, this.resetDuration(), this.startVal = this.validateValue(this.options.startVal), this.frameVal = this.startVal, this.printValue(this.startVal);
            }, t.prototype.update = function (t) {
                cancelAnimationFrame(this.rAF), this.startTime = null, this.endVal = this.validateValue(t), this.endVal !== this.frameVal && (this.startVal = this.frameVal, this.finalEndVal || this.resetDuration(), this.finalEndVal = null, this.determineDirectionAndSmartEasing(), this.rAF = requestAnimationFrame(this.count));
            }, t.prototype.printValue = function (t) {
                var i = this.formattingFn(t);
                "INPUT" === this.el.tagName ? this.el.value = i : "text" === this.el.tagName || "tspan" === this.el.tagName ? this.el.textContent = i : this.el.innerHTML = i;
            }, t.prototype.ensureNumber = function (t) {
                return "number" == typeof t && !isNaN(t);
            }, t.prototype.validateValue = function (t) {
                var i = Number(t);
                return this.ensureNumber(i) ? i : (this.error = "[CountUp] invalid start or end value: " + t, null);
            }, t.prototype.resetDuration = function () {
                this.startTime = null, this.duration = 1e3 * Number(this.options.duration), this.remaining = this.duration;
            }, t;
        }();

    var total = {
        selector: '',
        icon: '',
        init: function init(selector) {
            total.selector = common.widget.container.querySelector(".".concat(common.selector, " .metrics-total__item--").concat(selector));
            total.icon = total.selector.querySelector('.metric-icon-fill');
        },
        remove: function remove() {
            total.selector.classList.remove('metrics-selected--js');
            total.icon.classList.remove('metrics-selected--js');
        },
        add: function add() {
            total.selector.classList.add('metrics-selected--js');
            total.icon.classList.add('metrics-selected--js');
            common.counter(total.selector.querySelector('.metrics-total__item-text'));
        }
    };

    var chart = {
        isOneDot: false,
        init: function init(data) {
            common.widget.data.push(data.data);
            common.widget.selections();
            chart.build();
        },
        build: function build() {
            var data = common.widget.data[common.widget.containerIndex];
            common.widget.selectedSections = [];
            var selectedTabTitles = [];
            common.widget.selectedTabs.forEach(function (tabTitle) {
                selectedTabTitles.push(tabTitle.dataset.title);
                common.widget.selectedSections.push(data.dataSections[data.dataSections.map(function (a) {
                    return a.id;
                }).indexOf(tabTitle.dataset.title)]);
                total.init(tabTitle.dataset.title);
                total.add();
            });
            if (!selectedTabTitles.length) {
                selectedTabTitles.push(common.widget.container.querySelector('.metrics-nav__item-link').dataset.title);
            }
            if (common.widget.container.querySelector(".metrics-chart__svg")) {
                common.widget.container.querySelector(".metrics-chart__svg").remove();
            }
            chart.svg.build();
            chart.update(selectedTabTitles);
        },
        svg: {
            build: function build() {
                var $container = common.widget.container.querySelector(".metrics-chart");
                $container.setAttribute('role', 'alert');
                common.widget.svg = select($container).append('svg').attr('class', "metrics-chart__svg").attr('font-family', 'sans-serif').attr('id', 'svg-' + Math.ceil(Math.random() * 10000)).attr('preserveAspectRatio', 'xMinYMin').append('g');
                select(common.widget.container).filter(function (_) {
                    return common.selector !== 'sidebar-metric';
                }).append('div').attr('class', "metrics-chart__tooltip metrics-chart__tooltip-".concat(common.widget.containerIndex));
            },
            getMargins: function getMargins() {
                var bottom = common.isfirstNDays ? 70 : common.isTotalTab ? 55 : 40;
                var margins = {
                    left: 30,
                    bottom: bottom,
                    right: 5
                };
                common.widget.svg.select('.svg-metrics__y-axis').remove();
                common.widget.svg.append('g').lower().attr('class', 'svg-metrics__y-axis').append('g').attr('class', 'tick').attr('font-size', 12).append('text').text(common.maxCount.toLocaleString(navigator.language)).each(function () {
                    margins.left = Math.floor(this.getBBox().width);
                }).remove();
                return margins;
            },
            applyConfig: function applyConfig() {
                chart.svg.config(chart.svg.getMargins());
                var $container = common.widget.container.querySelector(".metrics-chart");
                select($container).select('.metrics-chart__svg').attr('width', common.widget.width + common.widget.margin.left + common.widget.margin.right).attr('height', common.widget.height + common.widget.margin.top + common.widget.margin.bottom).attr('viewBox', "0 0 ".concat(common.widget.svgContainerWidth, " ").concat(common.widget.height + common.widget.margin.top + common.widget.margin.bottom));
                common.widget.svg.attr('transform', "translate(".concat(common.widget.margin.left, ", ").concat(common.widget.margin.top, ")"));
                common.widget.svg.select('.svg-metrics__x-axis').remove();
                common.widget.svg.append('g').attr('class', 'svg-metrics__x-axis').attr('transform', "translate(0, ".concat(common.widget.height, ")"));
            },
            config: function config(margins) {
                var $container = common.widget.container.querySelector(".metrics-chart");
                common.widget.svgContainerWidth = $container && $container.clientWidth;
                common.widget.margin = {
                    top: 20,
                    right: 5,
                    bottom: margins.bottom,
                    left: margins.left
                };
                common.widget.width = common.widget.svgContainerWidth - common.widget.margin.left - common.widget.margin.right;
                common.widget.height = 200 - common.widget.margin.top - common.widget.margin.bottom;
            }
        },
        content: function content() {
            common.widget.valueLine = line().x(function (d) {
                return common.widget.xScale(common.parsedDate(d.month ? d.month : d.day));
            }).y(function (d) {
                return common.widget.yScale(d.count);
            }).curve(monotoneX);
            nav.setNavIndex();
            common.emptyData.check();
            if (!common.isEmptyData) {
                var countedData = common.widget.dataDates.slice(0, common.selectedPeriod + 1),
                    zeroCounts = JSON.parse(JSON.stringify(countedData)),
                    colorClass = common.widget.data[common.widget.containerIndex].dataSections[nav.index].color;
                zeroCounts.forEach(function (date) {
                    return date.count = 0;
                });
                chart.oneDotCheck();
                common.widget.svg.append('path').raise().data([zeroCounts]).style('opacity', 0).attr('class', "line line--".concat(nav.navTitle, " line--").concat(colorClass)).attr('d', common.widget.valueLine).data([countedData]).transition().duration(750).style('opacity', function (_) {
                    return chart.isOneDot ? 0 : 1;
                }).ease(polyOut).attr('d', common.widget.valueLine).attr('stroke-width', '3').attr('fill', 'transparent').attr('stroke-linecap', 'round').attr('stroke', function (_) {
                    return chart.isOneDot ? 'transparent' : chart.inlineStyle(".line--".concat(nav.navTitle), 'stroke');
                });
                common.widget.svg.append('g').attr('class', "dots dots--".concat(nav.navTitle, " dots--").concat(colorClass)).selectAll('.dot').data(common.widget.dataDates.slice(0, common.selectedPeriod + 1)).enter().append('circle').attr('class', "dot dot--".concat(nav.navTitle, " ").concat(chart.isOneDot ? 'one-dot' : '')).attr('cx', function (d) {
                    return common.widget.xScale(common.parsedDate(d.month ? d.month : d.day));
                }).attr('cy', function (d) {
                    return common.widget.yScale(d.count);
                }).attr('r', chart.isOneDot ? 3 : 5).attr('data-month', function (d) {
                    return d.month ? d.month : d.day;
                }).attr('data-count', function (d) {
                    return d.count;
                }).attr('fill', function (_) {
                    return chart.isOneDot ? chart.inlineStyle(".line--".concat(nav.navTitle), 'stroke') : 'transparent';
                });
                var widget = common.widget.container.querySelector(".".concat(common.selector));
                if (widget.classList.contains('numeric-metrics')) {
                    chart.legends();
                }
                common.widget.chartTooltip(nav.navTitle, common.widget.data[common.widget.containerIndex]);
            }
        },
        oneDotCheck: function oneDotCheck() {
            chart.isOneDot = common.widget.dataDates && common.widget.dataDates.length === 1;
        },
        eventUpdate: function eventUpdate() {
            common.widget.svgContainerWidth = common.widget.container.querySelector(".metrics-chart").clientWidth;
            common.widget.width = common.widget.svgContainerWidth - common.widget.margin.left - common.widget.margin.right;
            common.widget.svg = select(common.widget.container.querySelector(".metrics-chart__svg g"));
        },
        update: function update(navTitles) {
            common.anyHasData = false;
            navTitles.forEach(function (navTitle) {
                nav.navTitle = navTitle;
                common.firstNDays();
                common.dataUpdate();
                common.emptyData.check();
                common.emptyData.toggleMsg();
                if (common.isEmptyData) {
                    return;
                }
                common.setPeriod();
                common.setStartEndDate();
                common.setMaxCount();
                common.setDateFormat();
                common.setAxisTicks();
                chart.svg.applyConfig();
                common.scales();
                common.axises();
                common.widget.svg.select('.svg-metrics__y-axis').transition(transition().duration(300)).call(chart.customYAxis);
                common.widget.svg.select('.svg-metrics__x-axis').transition(transition().duration(300)).call(chart.customXAxis);
                chart.content();
            });
        },
        legends: function legends() {
            var legendsWidth = 0,
                legendLabel = common.widget.data[common.widget.containerIndex].dataSections[common.widget.dataSectionIndex].title,
                $legends = '';
            $legends = common.widget.container.querySelectorAll(".legends");
            $legends.forEach(function (item) {
                return legendsWidth += item.getBoundingClientRect().width + 15;
            });
            if (common.widget.container.querySelector(".legends--".concat(nav.navTitle))) {
                return;
            }
            var legends = common.widget.svg.append('g').attr('class', "legends legends--".concat(nav.navTitle)).attr('transform', function (_) {
                return "translate(".concat(legendsWidth, ", -5)");
            });
            legends.append('rect').attr('rx', 1.5).attr('ry', 1.5).attr('x', -20).attr('y', -6).attr('width', 15).attr('height', 3).attr('fill', chart.inlineStyle(".line--".concat(nav.navTitle), 'stroke'));
            legends.append('text').attr('y', 0).attr('x', 0).attr('font-size', '14px').text(legendLabel).attr('fill', chart.inlineStyle(".line--".concat(nav.navTitle), 'stroke'));
        },
        customYAxis: function customYAxis(g) {
            g.call(common.widget.y_axis);
            g.selectAll('.tick line').attr('x1', 10).attr('stroke', chart.inlineStyle('.svg-metrics__y-axis line', 'stroke'));
            g.selectAll('.tick text').attr('x', 5).attr('font-size', '12px').attr('fill', chart.inlineStyle('.svg-metrics__y-axis text', 'fill'));
            g.selectAll('.domain').attr('stroke', chart.inlineStyle('.svg-metrics__y-axis path', 'stroke'));
        },
        customXAxis: function customXAxis(g) {
            g.call(common.widget.x_axis);
            var isRotate = common.isfirstNDays || common.widget.svgContainerWidth < 960 && common.datesTicks > 6 || common.widget.dataPeriod === 'total' && common.selectedPeriod > 0;
            var translate = common.isTotalTab && '20' || common.isfirstNDays && '20' || '10';
            g.selectAll('text').attr('fill', chart.inlineStyle('.svg-metrics__x-axis text', 'fill')).attr('transform', "".concat(isRotate ? "translate(0 ".concat(translate, ") rotate(40)") : "translate(0 5)"));
            g.selectAll('line').attr('stroke', chart.inlineStyle('.svg-metrics__x-axis line', 'stroke'));
            g.selectAll('path').attr('stroke', chart.inlineStyle('.svg-metrics__x-axis path', 'stroke'));
        },
        inlineStyle: function inlineStyle(selector, prop) {
            return window.getComputedStyle(common.widget.container.querySelector(selector), null).getPropertyValue(prop);
        },
        downloadCSV: function downloadCSV() {
            var csvContent = 'data:text/csv;charset=utf-8,';
            var monthsCounts = [],
                csvDownloadLink = common.widget.container.querySelector(".".concat(common.selector, " .metrics-menu__dropdown-item--CSV > .metrics-menu__dropdown-link")),
                data = common.widget.data[common.widget.containerIndex],
                csvFileName = data.publicationTitle + '.csv',
                formatDate = timeFormat('%Y-%m');
            if (data.dataSections.length > 0) {
                for (var i = 0; i < data.dataSections.length; i++) {
                    for (var m = 0; m < data.dataSections[i].months.length; m++) {
                        var yearMonth = common.parsedDate(data.dataSections[i].months[m].month);
                        monthsCounts.push("".concat(data.dataSections[i].title, ",").concat(formatDate(yearMonth), ",").concat(data.dataSections[i].months[m].count));
                    }
                }
                csvContent += monthsCounts.join('\r\n');
                var encodedUri = encodeURI(csvContent);
                if (window.navigator.msSaveOrOpenBlob) {
                    var blob = new Blob([csvContent]);
                    csvDownloadLink.addEventListener('click', function (_) {
                        return window.navigator.msSaveOrOpenBlob(blob, csvFileName);
                    });
                } else {
                    csvDownloadLink.setAttribute('href', encodedUri);
                    csvDownloadLink.setAttribute('download', csvFileName);
                }
            } else {
                csvDownloadLink.setAttribute('title', 'Not enough data');
            }
        },
        downloadPNG: function downloadPNG() {
            var svgString = new XMLSerializer().serializeToString(common.widget.container.querySelector('.metrics-chart__svg'));
            svgString = svgString.replace(/(\w+)?:?xlink=/g, 'xmlns:xlink='); // Fix root xlink without namespace
            svgString = svgString.replace(/NS\d+:href/g, 'xlink:href'); // Safari NS namespace fix

            var selector = common.selector,
                downloadLink = select(common.widget.container).select(".".concat(selector, " .metrics-chart")).append('a').classed(".metrics-menu__dropdown-link", true).node(),
                blob = new Blob([svgString], {
                    type: 'image/svg+xml;charset=utf-8'
                }),
                url = "data:image/svg+xml;base64,".concat(btoa(unescape(encodeURIComponent(svgString)))),
                img = select(common.widget.container).select(".".concat(selector, " .metrics-chart")).append('img').classed("metrics-chart__export-img", true).node();
            img.src = url;
            img.onload = function (_) {
                var canvas = document.createElement('canvas'),
                    ctx = canvas.getContext('2d', {
                        alpha: false
                    }),
                    svgBg = window.getComputedStyle(common.widget.container.querySelector(".".concat(selector, " .metrics-chart__svg")), null).getPropertyValue('fill'),
                    pngFileName = "".concat(common.widget.data[common.widget.containerIndex].publicationTitle, ".png");
                URL.revokeObjectURL(url);
                canvas.height = 200;
                canvas.width = common.widget.svgContainerWidth;
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = svgBg;
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                ctx.drawSvg(svgString, 0, 0, canvas.width, canvas.height);
                if (window.navigator.msSaveOrOpenBlob) {
                    downloadLink.onclick = function () {
                        window.navigator.msSaveOrOpenBlob(canvas.msToBlob(), pngFileName);
                    };
                } else {
                    downloadLink.setAttribute('href', canvas.toDataURL());
                    downloadLink.setAttribute('download', pngFileName);
                    downloadLink.setAttribute('target', '_blank');
                }
                downloadLink.click();
                downloadLink.remove();
                canvas.remove();
                img.remove();
            };
        },
        reset: function reset(e) {
            common.widget.svg.selectAll("path.line--".concat(e.currentTarget.dataset.title)).transition().duration(300).style('opacity', 0).remove();
            common.widget.container.querySelectorAll('path.line').forEach(function (item) {
                return item.remove();
            });
            common.widget.container.querySelectorAll('.dots').forEach(function (item) {
                return item.remove();
            });
            common.widget.container.querySelectorAll('.legends').forEach(function (item) {
                return item.remove();
            });
            var data = common.widget.data[common.widget.containerIndex];
            common.widget.selectedSections = [];
            var selectedTabTitles = [];
            common.widget.selectedTabs.forEach(function (tabTitle) {
                selectedTabTitles.push(tabTitle.dataset.title);
                common.widget.selectedSections.push(data.dataSections[data.dataSections.map(function (a) {
                    return a.id;
                }).indexOf(tabTitle.dataset.title)]);
            });
            chart.update(selectedTabTitles);
            common.emptyData.toggleMsg();
        }
    };

    var tabs = {
        thisTab: '',
        init: function init() {
            tabs.select();
            common.firstNDays();
            nav.disable();
            tabs.periods();
        },
        select: function select() {
            common.setContainers(tabs.thisTab);
            tabs.thisTab.closest('.metrics-tabs').querySelector('.metrics-selected--js').classList.remove('metrics-selected--js');
            tabs.thisTab.classList.add('metrics-selected--js');
            var menuLinkText = tabs.thisTab.closest('.metrics-tabs').querySelector(".metrics-tabs__link .link-text");
            if (menuLinkText) {
                menuLinkText.textContent = tabs.thisTab.textContent;
            }
        },
        periods: function periods() {
            trackArticleMetrics.init('chart-time', null, null, tabs.thisTab.dataset.title);
            common.widget.selections();
            chart.eventUpdate();
            common.widget.selectedTabs = tabs.thisTab.closest(".".concat(common.selector)).querySelectorAll(".metrics-nav__item .metrics-selected--js");
        }
    };

    var nav = {
        thisNav: '',
        navTitle: '',
        disabledNav: '',
        sectionIndex: '',
        total: '',
        totalIcon: '',
        index: '',
        init: function init(e) {
            e.preventDefault();
            total.init(nav.navTitle);
            nav.disable();
        },
        handler: function handler(e) {
            nav.thisNav = e.currentTarget;
            common.setContainers(nav.thisNav);
            nav.navTitle = nav.thisNav.dataset.title;
            nav.init(e);
            common.widget.selectedTabs = nav.thisNav.closest(".metrics-nav").querySelectorAll(".metrics-selected--js");
            if (nav.thisNav.classList.contains('metrics-selected--js')) {
                nav.unSelect();
            } else {
                nav.select();
                trackArticleMetrics.init('select', nav.navTitle);
            }
            common.widget.selectedTabs = nav.thisNav.closest(".metrics-nav").querySelectorAll(".metrics-selected--js");
        },
        unSelect: function unSelect() {
            if (common.widget.selectedTabs.length <= 1) {
                return;
            }
            trackArticleMetrics.init('deselect', nav.navTitle);
            nav.thisNav.classList.remove('metrics-selected--js');
            total.remove();
        },
        select: function select() {
            nav.thisNav.classList.add('metrics-selected--js');
            total.add();
        },
        setNavIndex: function setNavIndex() {
            var navParents = Array.prototype.slice.call(common.widget.container.querySelectorAll('.metrics-nav__item')),
                selectedNav = common.widget.container.querySelector(".metrics-nav__item-link--".concat(nav.navTitle));
            nav.index = navParents.indexOf(selectedNav.parentNode);
        },
        disable: function disable() {
            var widget = common.selector === 'numeric-metrics' || 'mention-list' ? '.metrics-header' : '.sidebar-metric__content-section';
            nav.disabledNav = common.widget.container.querySelector(".".concat(common.selector, " > ").concat(widget, " .metrics-nav__item .metrics-nav__item-link--disabled"));
            if (nav.disabledNav) {
                nav.disabledNav.classList.remove('metrics-selected--js');
            }

            // if (common.widget.data.length !== 0) {
            //     const dataSections = common.widget.data[common.widget.containerIndex].dataSections;
            //
            //     common.widget.container.querySelectorAll(`.${common.selector} > ${widget} .metrics-nav__item-link`).forEach((navLink, i) => {
            //
            //
            //         if (common.isfirstNDays) {
            //             if (!dataSections[i].firstNDays || dataSections[i].firstNDays.length <= 1) {
            //                 navLink.classList.remove('metrics-selected--js');
            //                 navLink.classList.add('metrics-nav__item-link--first-month__disabled');
            //                 d3.select(navLink.parentElement).attr('title', 'This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later for the first 30 days');
            //             }
            //         } else {
            //             navLink.classList.remove(`metrics-nav__item-link--first-month__disabled`);
            //             d3.select(navLink.parentElement).attr('title', '');
            //         }
            //
            //     });
            // }
        }
    };

    var lang = document.documentElement.lang || 'en';
    var translations = {
        start: {
            en: 'Total number of',
            no: 'Totalt antall'
        },
        end: {
            text: {
                en: function en(period) {
                    return "for the most recent ".concat(period, " whole calendar months.");
                },
                no: function no(period) {
                    return "for de siste ".concat(period, " hele kalenderm\xE5nedene");
                }
            },
            fmText: {
                en: function en(period) {
                    return "for the first ".concat(period, " days after content publication");
                },
                no: function no(period) {
                    return "de f\xF8rste ".concat(period, " dagene etter publisering");
                }
            }
        },
        and: {
            en: 'and',
            no: 'og'
        },
        timeFormat: {
            en: {
                "dateTime": "%x, %X",
                "date": "%-m/%-d/%Y",
                "time": "%-I:%M:%S %p",
                "periods": ["AM", "PM"],
                "days": ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
                "shortDays": ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
                "months": ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
                "shortMonths": ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
            },
            no: {
                "dateTime": "%A den %d. %B %Y %X",
                "date": "%d.%m.%Y",
                "time": "%H:%M:%S",
                "periods": ["AM", "PM"],
                "days": ["søndag", "mandag", "tirsdag", "onsdag", "torsdag", "fredag", "lørdag"],
                "shortDays": ["søn", "man", "tir", "ons", "tor", "fre", "lør"],
                "months": ["januar", "februar", "mars", "april", "mai", "juni", "juli", "august", "september", "oktober", "november", "desember"],
                "shortMonths": ["jan", "feb", "mars", "apr", "mai", "juni", "juli", "aug", "sep", "okt", "nov", "des"]
            }
        },
        numericMap: {
            mapTitleOfWord: {
                en: ':',
                no: ''
            },
            mapTitle: {
                en: 'geographical distribution',
                no: 'geografisk fordeling'
            },
            footerTitle: {
                title: {
                    en: 'Country %',
                    no: 'Land'
                },
                topTitle: {
                    en: function en(topNLimit) {
                        return "Top ".concat(topNLimit, " country %");
                    },
                    no: function no(topNLimit) {
                        return "Topp ".concat(topNLimit);
                    }
                }
            }
        }
    };

    var common = {
        widget: {},
        selector: '',
        maxCount: 0,
        selectedPeriod: 0,
        parsedDate: timeParse('%Y-%m-%d'),
        dateBegin: '',
        dateEnd: '',
        datesTicks: 0,
        yTicks: 0,
        monthsCount: 0,
        dataPeriod: '',
        dataDays: 0,
        isSmall: false,
        isfirstNDays: false,
        isTotalTab: false,
        isEmptyData: false,
        anyHasData: false,
        icons: {},
        dateFormat: null,
        init: function init(options) {
            common.widget = options.widget;
            common.selector = options.selector;
            common.smallSize();
            common.icons = {
                share: {
                    shares: "<svg width=\"14\" height=\"12\" viewBox=\"0 0 14 12\"><path d=\"M8.5 3.8v-3L13.8 6l-5.3 5.3V8.2C4.7 8.2 2.1 9.4.2 12c.8-3.8 3-7.5 8.3-8.3z\"/></svg>",
                    comments: "<svg width=\"14\" height=\"14\" viewBox=\"0 0 14 14\"><path d=\"M13.7 1.7c0-.8-.6-1.4-1.4-1.4H1.7C.9.3.3 1 .3 1.7v8c0 .7.6 1.3 1.4 1.3H11l2.7 2.7v-12zM11 8.3H3V7h8v1.3zm0-2H3V5h8v1.3zm0-2H3V3h8v1.3z\"/></svg>",
                    likes: "<svg width=\"14\" height=\"13\" viewBox=\"0 0 14 13\"><path d=\"M.6 12.3h2.3v-7H.6v7zm12.8-6.5c0-.6-.5-1.1-1.1-1.1H8.6L9 2v-.2c0-.2 0-.4-.2-.6L8.3.6 4.4 4.4c-.2.2-.3.5-.3.9V11c0 .6.5 1.2 1.2 1.2h5.2c.5 0 .9-.3 1-.8l1.8-4 .1-.5V5.9z\"/></svg>",
                    loves: "<svg width=\"14\" height=\"13\" viewBox=\"0 0 14 13\"><path d=\"M7 12.2l-1-.8C2.6 8.2.3 6.2.3 3.7.3 1.7 2 0 4 0a4 4 0 013 1.4A4 4 0 0110 0c2 0 3.7 1.6 3.7 3.7 0 2.5-2.3 4.5-5.7 7.7l-1 .8z\"/></svg>",
                    tweets: "<svg width=\"16\" height=\"10\" viewBox=\"0 0 16 10\"><path d=\"M3.3 3.3V8h7.2l1 1.3H2v-6H0L2.7 0l2.6 3.3h-2zM12.7 6V1.3H5.5L4.5 0H14v6h2l-2.7 3.3L10.7 6h2z\"/></svg>"
                }
            };
        },
        smallSize: function smallSize() {
            if (window.screen.width < 960) {
                common.isSmall = true;
            }
        },
        setPeriod: function setPeriod() {
            var $selectedTab = common.widget.container.querySelector('.metrics-tabs__item-link.metrics-selected--js');
            common.widget.dataPeriod = $selectedTab && $selectedTab.dataset.title;
            var periods = {
                firstNDays: common.widget.dataDates.length - 1,
                last6: 5,
                last12: 11,
                total: common.widget.dataDates.length - 1
            };
            common.selectedPeriod = periods[common.widget.dataPeriod];
        },
        setMaxCount: function setMaxCount() {
            var sections = common.widget.selectedSections;
            if (!sections.length || common.isEmptyData) {
                return;
            }
            var max, dates;
            sections.forEach(function (section) {
                common.setPeriod();
                var firstNDaysSection = section.firstNDays ? section.firstNDays : [];
                common.isfirstNDays ? dates = firstNDaysSection : dates = section.months;
                // const dataDates = dates.slice(0, common.monthsCount + 1)[0];
                if (dates.length > 0) {
                    var dataDates = dates.slice(0, common.monthsCount + 1).sort(function (prevMonth, nextMonth) {
                        return prevMonth.count < nextMonth.count ? 1 : -1;
                    })[0];
                    if (max < dataDates.count || typeof max === 'undefined') {
                        max = dataDates.count;
                    }
                }
            });
            common.maxCount = max;
        },
        setStartEndDate: function setStartEndDate() {
            if (!common.widget.selectedSections.length) {
                return;
            }
            var min, max, minIndex;
            common.widget.selectedSections.forEach(function (section, index) {
                if (common.isfirstNDays && section.firstNDays && section.firstNDays.length) {
                    if (min > common.parsedDate(section.firstNDays[section.firstNDays.length - 1]) || typeof min === 'undefined') {
                        min = common.parsedDate(section.firstNDays[section.firstNDays.length - 1].day);
                        minIndex = index;
                    }
                    if (section.firstNDays.length > 0 && common.isfirstNDays && max < common.parsedDate(section.firstNDays[0].day) || common.isfirstNDays && typeof max === 'undefined') {
                        max = common.parsedDate(section.firstNDays[0].day);
                    }
                } else if (section.startDate && !common.isfirstNDays) {
                    if (min > common.parsedDate(section.startDate) || typeof min === 'undefined') {
                        min = common.parsedDate(section.startDate);
                        minIndex = index;
                    }
                }
            });
            if (common.widget.selectedSections[minIndex].months.length >= common.selectedPeriod + 1 && common.widget.dataPeriod !== 'total' && common.widget.dataPeriod !== 'firstNDays') {
                var startDate = common.parsedDate(common.widget.dataMonths[0]);
                startDate.setMonth(startDate.getMonth() - common.selectedPeriod);
                common.dateBegin = startDate;
                common.monthsCount = common.selectedPeriod + 1;
            } else {
                common.dateBegin = min;
                common.monthsCount = common.isfirstNDays ? common.widget.selectedSections[minIndex].firstNDays.length : common.widget.selectedSections[minIndex].months.length;
            }

            // Set end date for the first month
            common.isfirstNDays ? common.dateEnd = max : common.dateEnd = common.parsedDate(common.widget.dataMonths[0]);
        },
        emptyData: {
            check: function check() {
                common.dataUpdate();
                if (common.widget.dataDates.length === 0) {
                    common.isEmptyData = true;
                } else {
                    common.isEmptyData = false;
                    common.anyHasData = true;
                }
            },
            toggleMsg: function toggleMsg() {
                var emptyChart = common.widget.container.querySelector(".".concat(common.selector, " .metrics-chart__empty"));
                common.isEmptyData && !common.anyHasData ? emptyChart.classList.add('metrics-chart__empty--show') : emptyChart.classList.remove('metrics-chart__empty--show');
            }
        },
        scales: function scales() {
            common.widget.yScale = linear$2().domain([0, common.maxCount]).range([common.widget.height, 0]);
            common.widget.xScale = time().domain([common.dateBegin, common.dateEnd]).range([20, common.widget.width - 10]);
        },
        firstNDays: function firstNDays() {
            var className = '.metrics-tabs__item-link.metrics-selected--js',
                $selectedTab = common.widget.container.querySelector(className);
            common.isfirstNDays = $selectedTab && $selectedTab.dataset.title === 'firstNDays';
            common.isTotalTab = $selectedTab && $selectedTab.dataset.title === 'total';
        },
        dataUpdate: function dataUpdate() {
            var data = common.widget.data[common.widget.containerIndex];
            common.widget.dataSectionIndex = data.dataSections.map(function (a) {
                return a.id;
            }).indexOf(nav.navTitle);
            var firstNDaysData = data.dataSections[common.widget.dataSectionIndex].firstNDays || [];
            common.widget.dataDates = common.isfirstNDays ? firstNDaysData : data.dataSections[common.widget.dataSectionIndex].months;
            common.widget.dataDates.sort(function (a, b) {
                return common.parsedDate(b.month ? b.month : b.day) - common.parsedDate(a.month ? a.month : a.day);
            });
            common.widget.dataMonths = common.widget.dataDates.map(function (a) {
                return a.month ? a.month : a.day;
            });
        },
        setAxisTicks: function setAxisTicks() {
            if (common.isfirstNDays) {
                var dayBegin = common.dateBegin.getTime(),
                    dayEnd = common.dateEnd.getTime();
                common.datesTicks = parseInt((dayEnd - dayBegin) / (24 * 3600 * 1000));
            } else {
                var dateBeginYear = common.dateBegin.getFullYear(),
                    dateEndYear = common.dateEnd.getFullYear(),
                    dateBeginMonth = common.dateBegin.getMonth(),
                    dateEndMonth = common.dateEnd.getMonth();
                common.datesTicks = dateEndMonth + 12 * dateEndYear - (dateBeginMonth + 12 * dateBeginYear);
                common.datesTicks = dateEndMonth + 12 * dateEndYear === dateBeginMonth + 12 * dateBeginYear ? 1 : common.datesTicks;
            }
            if (common.datesTicks > 14) {
                common.datesTicks = 7;
            }
            common.maxCount < 4 && common.maxCount > 0 ? common.yTicks = common.maxCount : common.yTicks = 4;
        },
        setDateFormat: function () {
            var _setDateFormat = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                var formatter, timeFormatter;
                return _regeneratorRuntime().wrap(function _callee$(_context) {
                    while (1) switch (_context.prev = _context.next) {
                        case 0:
                            formatter = translations.timeFormat[lang];
                            timeFormatter = formatLocale$1(formatter);
                            common.dateFormat = timeFormatter.format('%b');
                            if (common.widget.dataPeriod === 'total') common.dateFormat = timeFormatter.format('%b %Y');
                            if (common.isfirstNDays) common.dateFormat = timeFormatter.format('%d %b %Y');
                        case 5:
                        case "end":
                            return _context.stop();
                    }
                }, _callee);
            }));
            function setDateFormat() {
                return _setDateFormat.apply(this, arguments);
            }
            return setDateFormat;
        }(),
        axises: function axises() {
            common.widget.x_axis = axisBottom(common.widget.xScale).tickFormat(common.dateFormat).scale(common.widget.xScale).ticks(common.datesTicks);
            common.widget.y_axis = axisLeft(common.widget.yScale).scale(common.widget.yScale).ticks(common.yTicks).tickFormat(function (d) {
                return d.toLocaleString(navigator.language);
            }).tickSize(-common.widget.width);
        },
        setContainers: function setContainers(thisElement) {
            var containers = document.querySelectorAll(".".concat(common.selector, "-container"));
            var allContainers = [];
            containers.forEach(function (container) {
                return allContainers.push(container);
            });
            if (thisElement) {
                common.widget.containerIndex = allContainers.indexOf(thisElement.closest(".".concat(common.selector, "-container")));
            }
            common.widget.container = containers[common.widget.containerIndex];
        },
        ajax: function ajax(url, param, callback) {
            var xhr = new XMLHttpRequest();
            xhr.onload = function (_) {
                // console.log(xhr.readyState);
                if (xhr.readyState === 4 && xhr.status === 200) {
                    //console.log('responseText:' + xhr.responseText);
                    var data;
                    try {
                        data = JSON.parse(xhr.responseText).rows;
                        // console.log(data);
                    } catch (err) {
                        //console.log(err.message + " in " + xhr.responseText);
                        return;
                    }
                    callback(data);
                }
            };
            xhr.open('POST', url);
            xhr.setRequestHeader('Content-type', 'application/json;charset=UTF-8');
            xhr.send(JSON.stringify(param));
        },
        counter: function counter(element, format$1, decimalPlace) {
            var count = element.dataset.count,
                options = {
                    useEasing: true,
                    useGrouping: true,
                    decimalPlaces: decimalPlace ? decimalPlace : 0,
                    decimal: '.',
                    formattingFn: function formattingFn(number) {
                        return format$1 || format$1 === '' ? format(format$1)(number) : number.toLocaleString(navigator.language);
                    }
                };
            var countUp = new CountUp(element, count, options);
            countUp.start();
        }
    };

    var trackArticleMetrics = {
        eventType: '',
        widgetName: '',
        doi: '',
        timeHorizon: '',
        metricId: '',
        shareTarget: '',
        init: function init(name, id, doi, timeHorizon, shareTarget) {
            if (common.selector === 'toolbar-metrics') {
                trackArticleMetrics.toolbarCaptureEvents(name, id, doi);
            } else if (common.selector === 'numeric-metrics') {
                trackArticleMetrics.numericCaptureEvents(name, id, doi, timeHorizon, shareTarget);
            } else if (common.selector === 'sidebar-metric') {
                trackArticleMetrics.sidebarCaptureEvents(name, id, doi, timeHorizon);
            }
        },
        toolbarCaptureEvents: function toolbarCaptureEvents(name, id, doi) {
            trackArticleMetrics.widgetName = 'toolbar';
            doi ? trackArticleMetrics.doi = doi : trackArticleMetrics.doi = JSON.parse(common.widget.container.querySelector(".".concat(common.selector, "__data")).value).data.doi;
            trackArticleMetrics.metricId = id;
            var toolbarEvents = {
                'close': 'EVENT_TOOLBAR_PANEL_CLOSE',
                'open': 'EVENT_TOOLBAR_PANEL_OPEN',
                'full-page': 'EVENT_TOOLBAR_GOTO_FULL_PAGE'
            };
            trackArticleMetrics.defineEventType(toolbarEvents, name);
        },
        sidebarCaptureEvents: function sidebarCaptureEvents(name, id, doi, timeHorizon) {
            trackArticleMetrics.widgetName = 'sidebar';
            doi ? trackArticleMetrics.doi = doi : trackArticleMetrics.doi = common.widget.data[common.widget.containerIndex].doi;
            trackArticleMetrics.metricId = id;
            var sidebarEvents = {
                'select': 'EVENT_SIDEBAR_SELECT',
                'deselect': 'EVENT_SIDEBAR_DESELECT',
                'point-hover': 'EVENT_SIDEBAR_DATA_POINT_HOVER',
                'chart-time': 'EVENT_SIDEBAR_CHANGE_CHART_TIME_HORIZON',
                'full-page': 'EVENT_SIDEBAR_GOTO_FULL_PAGE'
            };
            trackArticleMetrics.setTimeHorizon(timeHorizon);
            trackArticleMetrics.defineEventType(sidebarEvents, name);
        },
        numericCaptureEvents: function numericCaptureEvents(name, id, doi, timeHorizon, shareTarget) {
            trackArticleMetrics.widgetName = 'full page';
            doi ? trackArticleMetrics.doi = doi : trackArticleMetrics.doi = common.widget.data[common.widget.containerIndex].doi;
            trackArticleMetrics.metricId = id;
            var numericEvents = {
                'select': 'EVENT_NUMERIC_SELECT',
                'deselect': 'EVENT_NUMERIC_DESELECT',
                'point-hover': 'EVENT_NUMERIC_DATA_POINT_HOVER',
                'chart-time': 'EVENT_NUMERIC_CHANGE_CHART_TIME_HORIZON',
                'download': 'EVENT_NUMERIC_CLICK_ON_DOWNLOAD',
                'share': 'EVENT_NUMERIC_CLICK_ON_SHARE'
            };
            trackArticleMetrics.setTimeHorizon(timeHorizon);
            trackArticleMetrics.setShareTarget(shareTarget);
            trackArticleMetrics.defineEventType(numericEvents, name);
        },
        setTimeHorizon: function setTimeHorizon(value) {
            var timeHorizons = {
                'total': 'TIME_HORIZON_ALL',
                'last6': 'TIME_HORIZON_SIX_MONTHS',
                'last12': 'TIME_HORIZON_TWELVE_MONTHS',
                'firstNDays': 'TIME_HORIZON_FIRST_30_DAYS'
            };
            trackArticleMetrics.timeHorizon = '';
            if (value) {
                trackArticleMetrics.timeHorizon = "&timeHorizon=".concat(timeHorizons[value]);
            }
        },
        setShareTarget: function setShareTarget(value) {
            var shares = {
                'facebook': 'SHARE_TARGET_FACEBOOK',
                'twitter': 'SHARE_TARGET_TWITTER',
                'linkedin': 'SHARE_TARGET_LINKEDIN'
            };
            trackArticleMetrics.shareTarget = '';
            if (value) {
                trackArticleMetrics.shareTarget = "&shareTarget=".concat(shares[value]);
            }
        },
        defineEventType: function defineEventType(eventsType, name) {
            trackArticleMetrics.eventType = eventsType[name];
            trackArticleMetrics.sendEvents();
        },
        sendEvents: function sendEvents() {
            var dataURL = "/action/metricsAnalytics?eventType=".concat(trackArticleMetrics.eventType, "&widgetName=").concat(trackArticleMetrics.widgetName, "&doi=").concat(trackArticleMetrics.doi, "&metricId=").concat(trackArticleMetrics.metricId).concat(trackArticleMetrics.timeHorizon).concat(trackArticleMetrics.shareTarget);
            var xhr = new XMLHttpRequest();
            xhr.onload = function (_) {
            };
            xhr.open('POST', dataURL, true);
            xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');
            xhr.send();
        }
    };

    var menu = {
        viewport: 1025,
        dropdown: function dropdown(selector, container) {
            var metricLinkData = selector.getAttribute('data-metrics-target-for'),
                dropMenu = selector.closest('.metrics-menu').querySelector("[data-metrics-target-of='".concat(metricLinkData, "']"));
            setA11y('hide');
            function handler(e) {
                if (!selector.isSameNode(e.target) && e.target.closest(selector.className) === null) {
                    var toolbarMenu = common.widget.container.querySelector('.toolbar-metric__menu');
                    if (toolbarMenu && selector !== e.currentTarget && selector.getAttribute('aria-expanded') === "true") {
                        var doi = JSON.parse(toolbarMenu.closest('.toolbar-metric-container').querySelector(".toolbar-metric__data").value).data.doi;
                        common.selector = 'toolbar-metrics';
                        trackArticleMetrics.init('close', null, doi);
                    }
                    dropMenu.classList.remove('js--metrics-open');
                    setA11y('hide');
                }
            }
            window.addEventListener('click', handler);
            window.addEventListener('keydown', handleEscKeydown);
            selector.addEventListener('click', function (e) {
                common.selector = container;
                e.preventDefault();
                common.setContainers(e.currentTarget);
                var toolbarLink = selector.classList.contains('toolbar-metric__link');
                if (dropMenu.childNodes[0].innerHTML === "") {
                    return;
                }
                dropMenu.classList.toggle('js--metrics-open');
                if (selector.getAttribute("aria-expanded") === 'false') {
                    setA11y('show');
                    if (toolbarLink) {
                        trackArticleMetrics.toolbarCaptureEvents('open', null);
                    }
                } else {
                    setA11y('hide');
                    if (toolbarLink) {
                        trackArticleMetrics.toolbarCaptureEvents('close', null);
                    }
                }
            });
            function setA11y(state) {
                var hideAttrs = function hideAttrs() {
                    dropMenu.setAttribute('aria-hidden', 'true');
                    dropMenu.setAttribute('tabindex', '-1');
                    dropMenu.querySelectorAll('a, button').forEach(function (el) {
                        return el.setAttribute('tabindex', '-1');
                    });
                    selector.setAttribute('aria-expanded', 'false');
                };
                if (state === 'hide') {
                    if (dropMenu.classList.contains('metrics-tabs__list-container')) {
                        if (window.innerWidth < menu.viewport) {
                            hideAttrs();
                        }
                    } else {
                        hideAttrs();
                    }
                } else {
                    dropMenu.removeAttribute('aria-hidden');
                    dropMenu.setAttribute('tabindex', '0');
                    dropMenu.querySelectorAll('a, button').forEach(function (el) {
                        return el.removeAttribute('tabindex');
                    });
                    selector.setAttribute('aria-expanded', 'true');
                }
            }
            function handleEscKeydown(e) {
                if (e.keyCode === 27) {
                    var openedMetrics = document.querySelector('.js--metrics-open');
                    if (openedMetrics) {
                        var target = openedMetrics.previousSibling;
                        if (target) {
                            target.click();
                        }
                    }
                }
            }
        }
    };

    /*
		Based on rgbcolor.js by Stoyan Stefanov <sstoo@gmail.com>
		http://www.phpied.com/rgb-color-parser-in-javascript/
	*/

    var rgbcolor = function (color_string) {
        this.ok = false;
        this.alpha = 1.0;

        // strip any leading #
        if (color_string.charAt(0) == '#') {
            // remove # if any
            color_string = color_string.substr(1, 6);
        }
        color_string = color_string.replace(/ /g, '');
        color_string = color_string.toLowerCase();

        // before getting into regexps, try simple matches
        // and overwrite the input
        var simple_colors = {
            aliceblue: 'f0f8ff',
            antiquewhite: 'faebd7',
            aqua: '00ffff',
            aquamarine: '7fffd4',
            azure: 'f0ffff',
            beige: 'f5f5dc',
            bisque: 'ffe4c4',
            black: '000000',
            blanchedalmond: 'ffebcd',
            blue: '0000ff',
            blueviolet: '8a2be2',
            brown: 'a52a2a',
            burlywood: 'deb887',
            cadetblue: '5f9ea0',
            chartreuse: '7fff00',
            chocolate: 'd2691e',
            coral: 'ff7f50',
            cornflowerblue: '6495ed',
            cornsilk: 'fff8dc',
            crimson: 'dc143c',
            cyan: '00ffff',
            darkblue: '00008b',
            darkcyan: '008b8b',
            darkgoldenrod: 'b8860b',
            darkgray: 'a9a9a9',
            darkgreen: '006400',
            darkkhaki: 'bdb76b',
            darkmagenta: '8b008b',
            darkolivegreen: '556b2f',
            darkorange: 'ff8c00',
            darkorchid: '9932cc',
            darkred: '8b0000',
            darksalmon: 'e9967a',
            darkseagreen: '8fbc8f',
            darkslateblue: '483d8b',
            darkslategray: '2f4f4f',
            darkturquoise: '00ced1',
            darkviolet: '9400d3',
            deeppink: 'ff1493',
            deepskyblue: '00bfff',
            dimgray: '696969',
            dodgerblue: '1e90ff',
            feldspar: 'd19275',
            firebrick: 'b22222',
            floralwhite: 'fffaf0',
            forestgreen: '228b22',
            fuchsia: 'ff00ff',
            gainsboro: 'dcdcdc',
            ghostwhite: 'f8f8ff',
            gold: 'ffd700',
            goldenrod: 'daa520',
            gray: '808080',
            green: '008000',
            greenyellow: 'adff2f',
            honeydew: 'f0fff0',
            hotpink: 'ff69b4',
            indianred: 'cd5c5c',
            indigo: '4b0082',
            ivory: 'fffff0',
            khaki: 'f0e68c',
            lavender: 'e6e6fa',
            lavenderblush: 'fff0f5',
            lawngreen: '7cfc00',
            lemonchiffon: 'fffacd',
            lightblue: 'add8e6',
            lightcoral: 'f08080',
            lightcyan: 'e0ffff',
            lightgoldenrodyellow: 'fafad2',
            lightgrey: 'd3d3d3',
            lightgreen: '90ee90',
            lightpink: 'ffb6c1',
            lightsalmon: 'ffa07a',
            lightseagreen: '20b2aa',
            lightskyblue: '87cefa',
            lightslateblue: '8470ff',
            lightslategray: '778899',
            lightsteelblue: 'b0c4de',
            lightyellow: 'ffffe0',
            lime: '00ff00',
            limegreen: '32cd32',
            linen: 'faf0e6',
            magenta: 'ff00ff',
            maroon: '800000',
            mediumaquamarine: '66cdaa',
            mediumblue: '0000cd',
            mediumorchid: 'ba55d3',
            mediumpurple: '9370d8',
            mediumseagreen: '3cb371',
            mediumslateblue: '7b68ee',
            mediumspringgreen: '00fa9a',
            mediumturquoise: '48d1cc',
            mediumvioletred: 'c71585',
            midnightblue: '191970',
            mintcream: 'f5fffa',
            mistyrose: 'ffe4e1',
            moccasin: 'ffe4b5',
            navajowhite: 'ffdead',
            navy: '000080',
            oldlace: 'fdf5e6',
            olive: '808000',
            olivedrab: '6b8e23',
            orange: 'ffa500',
            orangered: 'ff4500',
            orchid: 'da70d6',
            palegoldenrod: 'eee8aa',
            palegreen: '98fb98',
            paleturquoise: 'afeeee',
            palevioletred: 'd87093',
            papayawhip: 'ffefd5',
            peachpuff: 'ffdab9',
            peru: 'cd853f',
            pink: 'ffc0cb',
            plum: 'dda0dd',
            powderblue: 'b0e0e6',
            purple: '800080',
            rebeccapurple: '663399',
            red: 'ff0000',
            rosybrown: 'bc8f8f',
            royalblue: '4169e1',
            saddlebrown: '8b4513',
            salmon: 'fa8072',
            sandybrown: 'f4a460',
            seagreen: '2e8b57',
            seashell: 'fff5ee',
            sienna: 'a0522d',
            silver: 'c0c0c0',
            skyblue: '87ceeb',
            slateblue: '6a5acd',
            slategray: '708090',
            snow: 'fffafa',
            springgreen: '00ff7f',
            steelblue: '4682b4',
            tan: 'd2b48c',
            teal: '008080',
            thistle: 'd8bfd8',
            tomato: 'ff6347',
            turquoise: '40e0d0',
            violet: 'ee82ee',
            violetred: 'd02090',
            wheat: 'f5deb3',
            white: 'ffffff',
            whitesmoke: 'f5f5f5',
            yellow: 'ffff00',
            yellowgreen: '9acd32'
        };
        color_string = simple_colors[color_string] || color_string;
        // emd of simple type-in colors

        // array of color definition objects
        var color_defs = [{
            re: /^rgba\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3}),\s*((?:\d?\.)?\d)\)$/,
            example: ['rgba(123, 234, 45, 0.8)', 'rgba(255,234,245,1.0)'],
            process: function (bits) {
                return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3]), parseFloat(bits[4])];
            }
        }, {
            re: /^rgb\((\d{1,3}),\s*(\d{1,3}),\s*(\d{1,3})\)$/,
            example: ['rgb(123, 234, 45)', 'rgb(255,234,245)'],
            process: function (bits) {
                return [parseInt(bits[1]), parseInt(bits[2]), parseInt(bits[3])];
            }
        }, {
            re: /^([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,
            example: ['#00ff00', '336699'],
            process: function (bits) {
                return [parseInt(bits[1], 16), parseInt(bits[2], 16), parseInt(bits[3], 16)];
            }
        }, {
            re: /^([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
            example: ['#fb0', 'f0f'],
            process: function (bits) {
                return [parseInt(bits[1] + bits[1], 16), parseInt(bits[2] + bits[2], 16), parseInt(bits[3] + bits[3], 16)];
            }
        }];

        // search through the definitions to find a match
        for (var i = 0; i < color_defs.length; i++) {
            var re = color_defs[i].re;
            var processor = color_defs[i].process;
            var bits = re.exec(color_string);
            if (bits) {
                var channels = processor(bits);
                this.r = channels[0];
                this.g = channels[1];
                this.b = channels[2];
                if (channels.length > 3) {
                    this.alpha = channels[3];
                }
                this.ok = true;
            }
        }

        // validate/cleanup values
        this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;
        this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;
        this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;
        this.alpha = this.alpha < 0 ? 0 : this.alpha > 1.0 || isNaN(this.alpha) ? 1.0 : this.alpha;

        // some getters
        this.toRGB = function () {
            return 'rgb(' + this.r + ', ' + this.g + ', ' + this.b + ')';
        };
        this.toRGBA = function () {
            return 'rgba(' + this.r + ', ' + this.g + ', ' + this.b + ', ' + this.alpha + ')';
        };
        this.toHex = function () {
            var r = this.r.toString(16);
            var g = this.g.toString(16);
            var b = this.b.toString(16);
            if (r.length == 1) r = '0' + r;
            if (g.length == 1) g = '0' + g;
            if (b.length == 1) b = '0' + b;
            return '#' + r + g + b;
        };

        // help
        this.getHelpXML = function () {
            var examples = new Array();
            // add regexps
            for (var i = 0; i < color_defs.length; i++) {
                var example = color_defs[i].example;
                for (var j = 0; j < example.length; j++) {
                    examples[examples.length] = example[j];
                }
            }
            // add type-in colors
            for (var sc in simple_colors) {
                examples[examples.length] = sc;
            }
            var xml = document.createElement('ul');
            xml.setAttribute('id', 'rgbcolor-examples');
            for (var i = 0; i < examples.length; i++) {
                try {
                    var list_item = document.createElement('li');
                    var list_color = new RGBColor(examples[i]);
                    var example_div = document.createElement('div');
                    example_div.style.cssText = 'margin: 3px; ' + 'border: 1px solid black; ' + 'background:' + list_color.toHex() + '; ' + 'color:' + list_color.toHex();
                    example_div.appendChild(document.createTextNode('test'));
                    var list_item_value = document.createTextNode(' ' + examples[i] + ' -> ' + list_color.toRGB() + ' -> ' + list_color.toHex());
                    list_item.appendChild(example_div);
                    list_item.appendChild(list_item_value);
                    xml.appendChild(list_item);
                } catch (e) {}
            }
            return xml;
        };
    };

    function _typeof$1(obj) {
        "@babel/helpers - typeof";

        if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
            _typeof$1 = function (obj) {
                return typeof obj;
            };
        } else {
            _typeof$1 = function (obj) {
                return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
            };
        }
        return _typeof$1(obj);
    }
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    /* eslint-disable no-bitwise -- used for calculations */

    /* eslint-disable unicorn/prefer-query-selector -- aiming at
	  backward-compatibility */

    /**
     * StackBlur - a fast almost Gaussian Blur For Canvas
     *
     * In case you find this class useful - especially in commercial projects -
     * I am not totally unhappy for a small donation to my PayPal account
     * mario@quasimondo.de
     *
     * Or support me on flattr:
     * {@link https://flattr.com/thing/72791/StackBlur-a-fast-almost-Gaussian-Blur-Effect-for-CanvasJavascript}.
     *
     * @module StackBlur
     * @author Mario Klingemann
     * Contact: mario@quasimondo.com
     * Website: {@link http://www.quasimondo.com/StackBlurForCanvas/StackBlurDemo.html}
     * Twitter: @quasimondo
     *
     * @copyright (c) 2010 Mario Klingemann
     *
     * Permission is hereby granted, free of charge, to any person
     * obtaining a copy of this software and associated documentation
     * files (the "Software"), to deal in the Software without
     * restriction, including without limitation the rights to use,
     * copy, modify, merge, publish, distribute, sublicense, and/or sell
     * copies of the Software, and to permit persons to whom the
     * Software is furnished to do so, subject to the following
     * conditions:
     *
     * The above copyright notice and this permission notice shall be
     * included in all copies or substantial portions of the Software.
     *
     * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
     * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
     * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
     * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
     * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
     * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
     * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
     * OTHER DEALINGS IN THE SOFTWARE.
     */
    var mulTable = [512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292, 512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292, 273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259, 496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292, 282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373, 364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259, 507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381, 374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292, 287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461, 454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373, 368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309, 305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259, 257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442, 437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381, 377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332, 329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292, 289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259];
    var shgTable = [9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24];
    /**
     * @param {string|HTMLImageElement} img
     * @param {string|HTMLCanvasElement} canvas
     * @param {Float} radius
     * @param {boolean} blurAlphaChannel
     * @param {boolean} useOffset
     * @param {boolean} skipStyles
     * @returns {undefined}
     */

    function processImage(img, canvas, radius, blurAlphaChannel, useOffset, skipStyles) {
        if (typeof img === 'string') {
            img = document.getElementById(img);
        }
        if (!img || Object.prototype.toString.call(img).slice(8, -1) === 'HTMLImageElement' && !('naturalWidth' in img)) {
            return;
        }
        var dimensionType = useOffset ? 'offset' : 'natural';
        var w = img[dimensionType + 'Width'];
        var h = img[dimensionType + 'Height']; // add ImageBitmap support,can blur texture source

        if (Object.prototype.toString.call(img).slice(8, -1) === 'ImageBitmap') {
            w = img.width;
            h = img.height;
        }
        if (typeof canvas === 'string') {
            canvas = document.getElementById(canvas);
        }
        if (!canvas || !('getContext' in canvas)) {
            return;
        }
        if (!skipStyles) {
            canvas.style.width = w + 'px';
            canvas.style.height = h + 'px';
        }
        canvas.width = w;
        canvas.height = h;
        var context = canvas.getContext('2d');
        context.clearRect(0, 0, w, h);
        context.drawImage(img, 0, 0, img.naturalWidth, img.naturalHeight, 0, 0, w, h);
        if (isNaN(radius) || radius < 1) {
            return;
        }
        if (blurAlphaChannel) {
            processCanvasRGBA(canvas, 0, 0, w, h, radius);
        } else {
            processCanvasRGB(canvas, 0, 0, w, h, radius);
        }
    }
    /**
     * @param {string|HTMLCanvasElement} canvas
     * @param {Integer} topX
     * @param {Integer} topY
     * @param {Integer} width
     * @param {Integer} height
     * @throws {Error|TypeError}
     * @returns {ImageData} See {@link https://html.spec.whatwg.org/multipage/canvas.html#imagedata}
     */

    function getImageDataFromCanvas(canvas, topX, topY, width, height) {
        if (typeof canvas === 'string') {
            canvas = document.getElementById(canvas);
        }
        if (!canvas || _typeof$1(canvas) !== 'object' || !('getContext' in canvas)) {
            throw new TypeError('Expecting canvas with `getContext` method ' + 'in processCanvasRGB(A) calls!');
        }
        var context = canvas.getContext('2d');
        try {
            return context.getImageData(topX, topY, width, height);
        } catch (e) {
            throw new Error('unable to access image data: ' + e);
        }
    }
    /**
     * @param {HTMLCanvasElement} canvas
     * @param {Integer} topX
     * @param {Integer} topY
     * @param {Integer} width
     * @param {Integer} height
     * @param {Float} radius
     * @returns {undefined}
     */

    function processCanvasRGBA(canvas, topX, topY, width, height, radius) {
        if (isNaN(radius) || radius < 1) {
            return;
        }
        radius |= 0;
        var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);
        imageData = processImageDataRGBA(imageData, topX, topY, width, height, radius);
        canvas.getContext('2d').putImageData(imageData, topX, topY);
    }
    /**
     * @param {ImageData} imageData
     * @param {Integer} topX
     * @param {Integer} topY
     * @param {Integer} width
     * @param {Integer} height
     * @param {Float} radius
     * @returns {ImageData}
     */

    function processImageDataRGBA(imageData, topX, topY, width, height, radius) {
        var pixels = imageData.data;
        var div = 2 * radius + 1; // const w4 = width << 2;

        var widthMinus1 = width - 1;
        var heightMinus1 = height - 1;
        var radiusPlus1 = radius + 1;
        var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
        var stackStart = new BlurStack();
        var stack = stackStart;
        var stackEnd;
        for (var i = 1; i < div; i++) {
            stack = stack.next = new BlurStack();
            if (i === radiusPlus1) {
                stackEnd = stack;
            }
        }
        stack.next = stackStart;
        var stackIn = null,
            stackOut = null,
            yw = 0,
            yi = 0;
        var mulSum = mulTable[radius];
        var shgSum = shgTable[radius];
        for (var y = 0; y < height; y++) {
            stack = stackStart;
            var pr = pixels[yi],
                pg = pixels[yi + 1],
                pb = pixels[yi + 2],
                pa = pixels[yi + 3];
            for (var _i = 0; _i < radiusPlus1; _i++) {
                stack.r = pr;
                stack.g = pg;
                stack.b = pb;
                stack.a = pa;
                stack = stack.next;
            }
            var rInSum = 0,
                gInSum = 0,
                bInSum = 0,
                aInSum = 0,
                rOutSum = radiusPlus1 * pr,
                gOutSum = radiusPlus1 * pg,
                bOutSum = radiusPlus1 * pb,
                aOutSum = radiusPlus1 * pa,
                rSum = sumFactor * pr,
                gSum = sumFactor * pg,
                bSum = sumFactor * pb,
                aSum = sumFactor * pa;
            for (var _i2 = 1; _i2 < radiusPlus1; _i2++) {
                var p = yi + ((widthMinus1 < _i2 ? widthMinus1 : _i2) << 2);
                var r = pixels[p],
                    g = pixels[p + 1],
                    b = pixels[p + 2],
                    a = pixels[p + 3];
                var rbs = radiusPlus1 - _i2;
                rSum += (stack.r = r) * rbs;
                gSum += (stack.g = g) * rbs;
                bSum += (stack.b = b) * rbs;
                aSum += (stack.a = a) * rbs;
                rInSum += r;
                gInSum += g;
                bInSum += b;
                aInSum += a;
                stack = stack.next;
            }
            stackIn = stackStart;
            stackOut = stackEnd;
            for (var x = 0; x < width; x++) {
                var paInitial = aSum * mulSum >>> shgSum;
                pixels[yi + 3] = paInitial;
                if (paInitial !== 0) {
                    var _a2 = 255 / paInitial;
                    pixels[yi] = (rSum * mulSum >>> shgSum) * _a2;
                    pixels[yi + 1] = (gSum * mulSum >>> shgSum) * _a2;
                    pixels[yi + 2] = (bSum * mulSum >>> shgSum) * _a2;
                } else {
                    pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
                }
                rSum -= rOutSum;
                gSum -= gOutSum;
                bSum -= bOutSum;
                aSum -= aOutSum;
                rOutSum -= stackIn.r;
                gOutSum -= stackIn.g;
                bOutSum -= stackIn.b;
                aOutSum -= stackIn.a;
                var _p = x + radius + 1;
                _p = yw + (_p < widthMinus1 ? _p : widthMinus1) << 2;
                rInSum += stackIn.r = pixels[_p];
                gInSum += stackIn.g = pixels[_p + 1];
                bInSum += stackIn.b = pixels[_p + 2];
                aInSum += stackIn.a = pixels[_p + 3];
                rSum += rInSum;
                gSum += gInSum;
                bSum += bInSum;
                aSum += aInSum;
                stackIn = stackIn.next;
                var _stackOut = stackOut,
                    _r = _stackOut.r,
                    _g = _stackOut.g,
                    _b = _stackOut.b,
                    _a = _stackOut.a;
                rOutSum += _r;
                gOutSum += _g;
                bOutSum += _b;
                aOutSum += _a;
                rInSum -= _r;
                gInSum -= _g;
                bInSum -= _b;
                aInSum -= _a;
                stackOut = stackOut.next;
                yi += 4;
            }
            yw += width;
        }
        for (var _x = 0; _x < width; _x++) {
            yi = _x << 2;
            var _pr = pixels[yi],
                _pg = pixels[yi + 1],
                _pb = pixels[yi + 2],
                _pa = pixels[yi + 3],
                _rOutSum = radiusPlus1 * _pr,
                _gOutSum = radiusPlus1 * _pg,
                _bOutSum = radiusPlus1 * _pb,
                _aOutSum = radiusPlus1 * _pa,
                _rSum = sumFactor * _pr,
                _gSum = sumFactor * _pg,
                _bSum = sumFactor * _pb,
                _aSum = sumFactor * _pa;
            stack = stackStart;
            for (var _i3 = 0; _i3 < radiusPlus1; _i3++) {
                stack.r = _pr;
                stack.g = _pg;
                stack.b = _pb;
                stack.a = _pa;
                stack = stack.next;
            }
            var yp = width;
            var _gInSum = 0,
                _bInSum = 0,
                _aInSum = 0,
                _rInSum = 0;
            for (var _i4 = 1; _i4 <= radius; _i4++) {
                yi = yp + _x << 2;
                var _rbs = radiusPlus1 - _i4;
                _rSum += (stack.r = _pr = pixels[yi]) * _rbs;
                _gSum += (stack.g = _pg = pixels[yi + 1]) * _rbs;
                _bSum += (stack.b = _pb = pixels[yi + 2]) * _rbs;
                _aSum += (stack.a = _pa = pixels[yi + 3]) * _rbs;
                _rInSum += _pr;
                _gInSum += _pg;
                _bInSum += _pb;
                _aInSum += _pa;
                stack = stack.next;
                if (_i4 < heightMinus1) {
                    yp += width;
                }
            }
            yi = _x;
            stackIn = stackStart;
            stackOut = stackEnd;
            for (var _y = 0; _y < height; _y++) {
                var _p2 = yi << 2;
                pixels[_p2 + 3] = _pa = _aSum * mulSum >>> shgSum;
                if (_pa > 0) {
                    _pa = 255 / _pa;
                    pixels[_p2] = (_rSum * mulSum >>> shgSum) * _pa;
                    pixels[_p2 + 1] = (_gSum * mulSum >>> shgSum) * _pa;
                    pixels[_p2 + 2] = (_bSum * mulSum >>> shgSum) * _pa;
                } else {
                    pixels[_p2] = pixels[_p2 + 1] = pixels[_p2 + 2] = 0;
                }
                _rSum -= _rOutSum;
                _gSum -= _gOutSum;
                _bSum -= _bOutSum;
                _aSum -= _aOutSum;
                _rOutSum -= stackIn.r;
                _gOutSum -= stackIn.g;
                _bOutSum -= stackIn.b;
                _aOutSum -= stackIn.a;
                _p2 = _x + ((_p2 = _y + radiusPlus1) < heightMinus1 ? _p2 : heightMinus1) * width << 2;
                _rSum += _rInSum += stackIn.r = pixels[_p2];
                _gSum += _gInSum += stackIn.g = pixels[_p2 + 1];
                _bSum += _bInSum += stackIn.b = pixels[_p2 + 2];
                _aSum += _aInSum += stackIn.a = pixels[_p2 + 3];
                stackIn = stackIn.next;
                _rOutSum += _pr = stackOut.r;
                _gOutSum += _pg = stackOut.g;
                _bOutSum += _pb = stackOut.b;
                _aOutSum += _pa = stackOut.a;
                _rInSum -= _pr;
                _gInSum -= _pg;
                _bInSum -= _pb;
                _aInSum -= _pa;
                stackOut = stackOut.next;
                yi += width;
            }
        }
        return imageData;
    }
    /**
     * @param {HTMLCanvasElement} canvas
     * @param {Integer} topX
     * @param {Integer} topY
     * @param {Integer} width
     * @param {Integer} height
     * @param {Float} radius
     * @returns {undefined}
     */

    function processCanvasRGB(canvas, topX, topY, width, height, radius) {
        if (isNaN(radius) || radius < 1) {
            return;
        }
        radius |= 0;
        var imageData = getImageDataFromCanvas(canvas, topX, topY, width, height);
        imageData = processImageDataRGB(imageData, topX, topY, width, height, radius);
        canvas.getContext('2d').putImageData(imageData, topX, topY);
    }
    /**
     * @param {ImageData} imageData
     * @param {Integer} topX
     * @param {Integer} topY
     * @param {Integer} width
     * @param {Integer} height
     * @param {Float} radius
     * @returns {ImageData}
     */

    function processImageDataRGB(imageData, topX, topY, width, height, radius) {
        var pixels = imageData.data;
        var div = 2 * radius + 1; // const w4 = width << 2;

        var widthMinus1 = width - 1;
        var heightMinus1 = height - 1;
        var radiusPlus1 = radius + 1;
        var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;
        var stackStart = new BlurStack();
        var stack = stackStart;
        var stackEnd;
        for (var i = 1; i < div; i++) {
            stack = stack.next = new BlurStack();
            if (i === radiusPlus1) {
                stackEnd = stack;
            }
        }
        stack.next = stackStart;
        var stackIn = null;
        var stackOut = null;
        var mulSum = mulTable[radius];
        var shgSum = shgTable[radius];
        var p, rbs;
        var yw = 0,
            yi = 0;
        for (var y = 0; y < height; y++) {
            var pr = pixels[yi],
                pg = pixels[yi + 1],
                pb = pixels[yi + 2],
                rOutSum = radiusPlus1 * pr,
                gOutSum = radiusPlus1 * pg,
                bOutSum = radiusPlus1 * pb,
                rSum = sumFactor * pr,
                gSum = sumFactor * pg,
                bSum = sumFactor * pb;
            stack = stackStart;
            for (var _i5 = 0; _i5 < radiusPlus1; _i5++) {
                stack.r = pr;
                stack.g = pg;
                stack.b = pb;
                stack = stack.next;
            }
            var rInSum = 0,
                gInSum = 0,
                bInSum = 0;
            for (var _i6 = 1; _i6 < radiusPlus1; _i6++) {
                p = yi + ((widthMinus1 < _i6 ? widthMinus1 : _i6) << 2);
                rSum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - _i6);
                gSum += (stack.g = pg = pixels[p + 1]) * rbs;
                bSum += (stack.b = pb = pixels[p + 2]) * rbs;
                rInSum += pr;
                gInSum += pg;
                bInSum += pb;
                stack = stack.next;
            }
            stackIn = stackStart;
            stackOut = stackEnd;
            for (var x = 0; x < width; x++) {
                pixels[yi] = rSum * mulSum >>> shgSum;
                pixels[yi + 1] = gSum * mulSum >>> shgSum;
                pixels[yi + 2] = bSum * mulSum >>> shgSum;
                rSum -= rOutSum;
                gSum -= gOutSum;
                bSum -= bOutSum;
                rOutSum -= stackIn.r;
                gOutSum -= stackIn.g;
                bOutSum -= stackIn.b;
                p = yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1) << 2;
                rInSum += stackIn.r = pixels[p];
                gInSum += stackIn.g = pixels[p + 1];
                bInSum += stackIn.b = pixels[p + 2];
                rSum += rInSum;
                gSum += gInSum;
                bSum += bInSum;
                stackIn = stackIn.next;
                rOutSum += pr = stackOut.r;
                gOutSum += pg = stackOut.g;
                bOutSum += pb = stackOut.b;
                rInSum -= pr;
                gInSum -= pg;
                bInSum -= pb;
                stackOut = stackOut.next;
                yi += 4;
            }
            yw += width;
        }
        for (var _x2 = 0; _x2 < width; _x2++) {
            yi = _x2 << 2;
            var _pr2 = pixels[yi],
                _pg2 = pixels[yi + 1],
                _pb2 = pixels[yi + 2],
                _rOutSum2 = radiusPlus1 * _pr2,
                _gOutSum2 = radiusPlus1 * _pg2,
                _bOutSum2 = radiusPlus1 * _pb2,
                _rSum2 = sumFactor * _pr2,
                _gSum2 = sumFactor * _pg2,
                _bSum2 = sumFactor * _pb2;
            stack = stackStart;
            for (var _i7 = 0; _i7 < radiusPlus1; _i7++) {
                stack.r = _pr2;
                stack.g = _pg2;
                stack.b = _pb2;
                stack = stack.next;
            }
            var _rInSum2 = 0,
                _gInSum2 = 0,
                _bInSum2 = 0;
            for (var _i8 = 1, yp = width; _i8 <= radius; _i8++) {
                yi = yp + _x2 << 2;
                _rSum2 += (stack.r = _pr2 = pixels[yi]) * (rbs = radiusPlus1 - _i8);
                _gSum2 += (stack.g = _pg2 = pixels[yi + 1]) * rbs;
                _bSum2 += (stack.b = _pb2 = pixels[yi + 2]) * rbs;
                _rInSum2 += _pr2;
                _gInSum2 += _pg2;
                _bInSum2 += _pb2;
                stack = stack.next;
                if (_i8 < heightMinus1) {
                    yp += width;
                }
            }
            yi = _x2;
            stackIn = stackStart;
            stackOut = stackEnd;
            for (var _y2 = 0; _y2 < height; _y2++) {
                p = yi << 2;
                pixels[p] = _rSum2 * mulSum >>> shgSum;
                pixels[p + 1] = _gSum2 * mulSum >>> shgSum;
                pixels[p + 2] = _bSum2 * mulSum >>> shgSum;
                _rSum2 -= _rOutSum2;
                _gSum2 -= _gOutSum2;
                _bSum2 -= _bOutSum2;
                _rOutSum2 -= stackIn.r;
                _gOutSum2 -= stackIn.g;
                _bOutSum2 -= stackIn.b;
                p = _x2 + ((p = _y2 + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width << 2;
                _rSum2 += _rInSum2 += stackIn.r = pixels[p];
                _gSum2 += _gInSum2 += stackIn.g = pixels[p + 1];
                _bSum2 += _bInSum2 += stackIn.b = pixels[p + 2];
                stackIn = stackIn.next;
                _rOutSum2 += _pr2 = stackOut.r;
                _gOutSum2 += _pg2 = stackOut.g;
                _bOutSum2 += _pb2 = stackOut.b;
                _rInSum2 -= _pr2;
                _gInSum2 -= _pg2;
                _bInSum2 -= _pb2;
                stackOut = stackOut.next;
                yi += width;
            }
        }
        return imageData;
    }
    /**
     *
     */

    var BlurStack =
        /**
         * Set properties.
         */
        function BlurStack() {
            _classCallCheck(this, BlurStack);
            this.r = 0;
            this.g = 0;
            this.b = 0;
            this.a = 0;
            this.next = null;
        };

    var stackblurEs = /*#__PURE__*/Object.freeze({
        BlurStack: BlurStack,
        canvasRGB: processCanvasRGB,
        canvasRGBA: processCanvasRGBA,
        image: processImage,
        imageDataRGB: processImageDataRGB,
        imageDataRGBA: processImageDataRGBA
    });

    var canvg = createCommonjsModule(function (module, exports) {
        /*
	   * canvg.js - Javascript SVG parser and renderer on Canvas
	   * version 2.0.0
	   * MIT Licensed
	   * Gabe Lerner (gabelerner@gmail.com)
	   * https://github.com/canvg/canvg
	   *
	   */

        (function (global, factory) {
            module.exports = factory(rgbcolor, stackblurEs);
        })(commonjsGlobal, function (rgbcolor, stackblurCanvas) {

            rgbcolor = rgbcolor && rgbcolor.hasOwnProperty('default') ? rgbcolor['default'] : rgbcolor;
            stackblurCanvas = stackblurCanvas && stackblurCanvas.hasOwnProperty('default') ? stackblurCanvas['default'] : stackblurCanvas;
            function createCommonjsModule(fn, module) {
                return module = {
                    exports: {}
                }, fn(module, module.exports), module.exports;
            }
            var canvg_1 = createCommonjsModule(function (module) {
                /* eslint-env browser, node */
                /* globals $, Sizzle, Windows, ActiveXObject */
                /* eslint-disable no-redeclare */

                var isNode = module.exports && typeof window === 'undefined',
                    nodeEnv = false;
                var windowEnv;
                {
                    windowEnv = window;
                    windowEnv.DOMParser = window.DOMParser;
                }
                var doc = windowEnv.document,
                    defaultClientWidth = 800,
                    defaultClientHeight = 600;
                function createCanvas(width, height) {
                    var c;
                    {
                        c = doc.createElement('canvas');
                        c.width = width;
                        c.height = height;
                    }
                    return c;
                }

                // canvg(target, s)
                // empty parameters: replace all 'svg' elements on page with 'canvas' elements
                // target: canvas element or the id of a canvas element
                // s: svg string, url to svg file, or xml document
                // opts: optional hash of options
                //       ignoreMouse: true => ignore mouse events
                //       ignoreAnimation: true => ignore animations
                //       ignoreDimensions: true => does not try to resize canvas
                //       ignoreClear: true => does not clear canvas
                //       offsetX: int => draws at a x offset
                //       offsetY: int => draws at a y offset
                //       scaleWidth: int => scales horizontally to width
                //       scaleHeight: int => scales vertically to height
                //       renderCallback: function => will call the function after the first render is completed
                //       enableRedraw: function => whether enable the redraw interval in node environment
                //       forceRedraw: function => will call the function on every frame, if it returns true, will redraw
                var canvg = function (target, s, opts) {
                    // no parameters
                    if (target == null && s == null && opts == null) {
                        var svgTags = doc.querySelectorAll('svg');
                        for (var i = 0; i < svgTags.length; i++) {
                            var svgTag = svgTags[i];
                            var c = doc.createElement('canvas');
                            if (typeof svgTag.clientWidth !== 'undefined' && typeof svgTag.clientHeight !== 'undefined') {
                                c.width = svgTag.clientWidth;
                                c.height = svgTag.clientHeight;
                            } else {
                                var rect = svgTag.getBoundingClientRect();
                                c.width = rect.width;
                                c.height = rect.height;
                            }
                            svgTag.parentNode.insertBefore(c, svgTag);
                            svgTag.parentNode.removeChild(svgTag);
                            var div = doc.createElement('div');
                            div.appendChild(svgTag);
                            canvg(c, div.innerHTML);
                        }
                        return;
                    }
                    var svg = build(opts || {});
                    if (typeof target == 'string') {
                        target = doc.getElementById(target);
                    }

                    // store class on canvas
                    if (target.svg != null) target.svg.stop();

                    // on i.e. 8 for flash canvas, we can't assign the property so check for it
                    if (!(target.childNodes && target.childNodes.length == 1 && target.childNodes[0].nodeName == 'OBJECT')) target.svg = svg;
                    var ctx = target.getContext('2d');
                    if (typeof s.documentElement != 'undefined') {
                        // load from xml doc
                        svg.loadXmlDoc(ctx, s);
                    } else if (s.substr(0, 1) == '<') {
                        // load from xml string
                        svg.loadXml(ctx, s);
                    } else {
                        // load from url
                        svg.load(ctx, s);
                    }
                };
                var matchesSelector;
                {
                    // see https://developer.mozilla.org/en-US/docs/Web/API/Element.matches
                    if (typeof Element == 'undefined') ;else if (typeof Element.prototype.matches != 'undefined') {
                        matchesSelector = function (node, selector) {
                            return node.matches(selector);
                        };
                    } else if (typeof Element.prototype.webkitMatchesSelector != 'undefined') {
                        matchesSelector = function (node, selector) {
                            return node.webkitMatchesSelector(selector);
                        };
                    } else if (typeof Element.prototype.mozMatchesSelector != 'undefined') {
                        matchesSelector = function (node, selector) {
                            return node.mozMatchesSelector(selector);
                        };
                    } else if (typeof Element.prototype.msMatchesSelector != 'undefined') {
                        matchesSelector = function (node, selector) {
                            return node.msMatchesSelector(selector);
                        };
                    } else if (typeof Element.prototype.oMatchesSelector != 'undefined') {
                        matchesSelector = function (node, selector) {
                            return node.oMatchesSelector(selector);
                        };
                    } else {
                        // requires Sizzle: https://github.com/jquery/sizzle/wiki/Sizzle-Documentation
                        // or jQuery: http://jquery.com/download/
                        // or Zepto: http://zeptojs.com/#
                        // without it, this is a ReferenceError

                        if (typeof jQuery === 'function' || typeof Zepto === 'function') {
                            matchesSelector = function (node, selector) {
                                return $(node).is(selector);
                            };
                        }
                        if (typeof matchesSelector === 'undefined' && typeof Sizzle !== 'undefined') {
                            matchesSelector = Sizzle.matchesSelector;
                        }
                    }
                }

                // slightly modified version of https://github.com/keeganstreet/specificity/blob/master/specificity.js
                var attributeRegex = /(\[[^\]]+\])/g;
                var idRegex = /(#[^\s\+>~\.\[:]+)/g;
                var classRegex = /(\.[^\s\+>~\.\[:]+)/g;
                var pseudoElementRegex = /(::[^\s\+>~\.\[:]+|:first-line|:first-letter|:before|:after)/gi;
                var pseudoClassWithBracketsRegex = /(:[\w-]+\([^\)]*\))/gi;
                var pseudoClassRegex = /(:[^\s\+>~\.\[:]+)/g;
                var elementRegex = /([^\s\+>~\.\[:]+)/g;
                function getSelectorSpecificity(selector) {
                    var typeCount = [0, 0, 0];
                    var findMatch = function (regex, type) {
                        var matches = selector.match(regex);
                        if (matches == null) {
                            return;
                        }
                        typeCount[type] += matches.length;
                        selector = selector.replace(regex, ' ');
                    };
                    selector = selector.replace(/:not\(([^\)]*)\)/g, '     $1 ');
                    selector = selector.replace(/{[\s\S]*/gm, ' ');
                    findMatch(attributeRegex, 1);
                    findMatch(idRegex, 0);
                    findMatch(classRegex, 1);
                    findMatch(pseudoElementRegex, 2);
                    findMatch(pseudoClassWithBracketsRegex, 1);
                    findMatch(pseudoClassRegex, 1);
                    selector = selector.replace(/[\*\s\+>~]/g, ' ');
                    selector = selector.replace(/[#\.]/g, ' ');
                    findMatch(elementRegex, 2);
                    return typeCount.join('');
                }
                function build(opts) {
                    var svg = {
                        opts: opts
                    };
                    svg.FRAMERATE = 30;
                    svg.MAX_VIRTUAL_PIXELS = 30000;
                    svg.rootEmSize = 12;
                    svg.emSize = 12;
                    svg.log = function /* msg */ () {};
                    if (svg.opts['log'] == true && typeof console != 'undefined') {
                        svg.log = function (msg) {
                            console.log(msg);
                        }; // eslint-disable-line no-console
                    }

                    // globals
                    svg.init = function (ctx) {
                        var uniqueId = 0;
                        svg.UniqueId = function () {
                            uniqueId++;
                            return 'canvg' + uniqueId;
                        };
                        svg.Definitions = {};
                        svg.Styles = {};
                        svg.StylesSpecificity = {};
                        svg.Animations = [];
                        svg.Images = [];
                        svg.ctx = ctx;
                        svg.ViewPort = new function () {
                            this.viewPorts = [];
                            this.Clear = function () {
                                this.viewPorts = [];
                            };
                            this.SetCurrent = function (width, height) {
                                this.viewPorts.push({
                                    width: width,
                                    height: height
                                });
                            };
                            this.RemoveCurrent = function () {
                                this.viewPorts.pop();
                            };
                            this.Current = function () {
                                return this.viewPorts[this.viewPorts.length - 1];
                            };
                            this.width = function () {
                                return this.Current().width;
                            };
                            this.height = function () {
                                return this.Current().height;
                            };
                            this.ComputeSize = function (d) {
                                if (d != null && typeof d == 'number') return d;
                                if (d == 'x') return this.width();
                                if (d == 'y') return this.height();
                                return Math.sqrt(Math.pow(this.width(), 2) + Math.pow(this.height(), 2)) / Math.sqrt(2);
                            };
                        }();
                    };
                    svg.init();

                    // images loaded
                    svg.ImagesLoaded = function () {
                        for (var i = 0; i < svg.Images.length; i++) {
                            if (!svg.Images[i].loaded) return false;
                        }
                        return true;
                    };

                    // trim
                    svg.trim = function (s) {
                        return s.replace(/^\s+|\s+$/g, '');
                    };

                    // compress non-ideographic spaces
                    svg.compressSpaces = function (s) {
                        return s.replace(/(?!\u3000)\s+/gm, ' ');
                    };

                    // ajax
                    svg.ajax = function (url) {
                        var AJAX;
                        if (windowEnv.XMLHttpRequest) {
                            AJAX = new windowEnv.XMLHttpRequest();
                        } else {
                            AJAX = new ActiveXObject('Microsoft.XMLHTTP');
                        }
                        if (AJAX) {
                            AJAX.open('GET', url, false);
                            AJAX.send(null);
                            return AJAX.responseText;
                        }
                        return null;
                    };

                    // parse xml
                    svg.parseXml = function (xml) {
                        if (typeof Windows != 'undefined' && typeof Windows.Data != 'undefined' && typeof Windows.Data.Xml != 'undefined') {
                            var xmlDoc = new Windows.Data.Xml.Dom.XmlDocument();
                            var settings = new Windows.Data.Xml.Dom.XmlLoadSettings();
                            settings.prohibitDtd = false;
                            xmlDoc.loadXml(xml, settings);
                            return xmlDoc;
                        } else if (windowEnv.DOMParser) {
                            try {
                                var parser = opts.xmldom ? new windowEnv.DOMParser(opts.xmldom) : new windowEnv.DOMParser();
                                return parser.parseFromString(xml, 'image/svg+xml');
                            } catch (e) {
                                parser = opts.xmldom ? new windowEnv.DOMParser(opts.xmldom) : new windowEnv.DOMParser();
                                return parser.parseFromString(xml, 'text/xml');
                            }
                        } else {
                            xml = xml.replace(/<!DOCTYPE svg[^>]*>/, '');
                            var xmlDoc = new ActiveXObject('Microsoft.XMLDOM');
                            xmlDoc.async = 'false';
                            xmlDoc.loadXML(xml);
                            return xmlDoc;
                        }
                    };
                    svg.Property = function (name, value) {
                        this.name = name;
                        this.value = value;
                    };
                    svg.Property.prototype.getValue = function () {
                        return this.value;
                    };
                    svg.Property.prototype.hasValue = function () {
                        return this.value != null && this.value !== '';
                    };

                    // return the numerical value of the property
                    svg.Property.prototype.numValue = function () {
                        if (!this.hasValue()) return 0;
                        var n = parseFloat(this.value);
                        if ((this.value + '').match(/%$/)) {
                            n = n / 100.0;
                        }
                        return n;
                    };
                    svg.Property.prototype.valueOrDefault = function (def) {
                        if (this.hasValue()) return this.value;
                        return def;
                    };
                    svg.Property.prototype.numValueOrDefault = function (def) {
                        if (this.hasValue()) return this.numValue();
                        return parseFloat(def);
                    };

                    // color extensions
                    // augment the current color value with the opacity
                    svg.Property.prototype.addOpacity = function (opacityProp) {
                        var newValue = this.value;
                        if (opacityProp.value != null && opacityProp.value != '' && typeof this.value == 'string') {
                            // can only add opacity to colors, not patterns
                            var color = new rgbcolor(this.value);
                            if (color.ok) {
                                newValue = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + opacityProp.numValue() + ')';
                            }
                        }
                        return new svg.Property(this.name, newValue);
                    };

                    // definition extensions
                    // get the definition from the definitions table
                    svg.Property.prototype.getDefinition = function () {
                        var name = this.value.match(/#([^\)'"]+)/);
                        if (name) {
                            name = name[1];
                        }
                        if (!name) {
                            name = this.value;
                        }
                        return svg.Definitions[name];
                    };
                    svg.Property.prototype.isUrlDefinition = function () {
                        return this.value.indexOf('url(') == 0;
                    };
                    svg.Property.prototype.getFillStyleDefinition = function (e, opacityProp) {
                        var def = this.getDefinition();

                        // gradient
                        if (def != null && def.createGradient) {
                            return def.createGradient(svg.ctx, e, opacityProp);
                        }

                        // pattern
                        if (def != null && def.createPattern) {
                            if (def.getHrefAttribute().hasValue()) {
                                var pt = def.attribute('patternTransform');
                                def = def.getHrefAttribute().getDefinition();
                                if (pt.hasValue()) {
                                    def.attribute('patternTransform', true).value = pt.value;
                                }
                            }
                            return def.createPattern(svg.ctx, e, opacityProp);
                        }
                        return null;
                    };

                    // length extensions
                    svg.Property.prototype.getDPI = function /* viewPort */
                        () {
                        return 96.0; // TODO: compute?
                    };
                    svg.Property.prototype.getREM = function /* viewPort */
                        () {
                        return svg.rootEmSize;
                    };
                    svg.Property.prototype.getEM = function /* viewPort */
                        () {
                        return svg.emSize;
                    };
                    svg.Property.prototype.getUnits = function () {
                        var s = this.value + '';
                        return s.replace(/[0-9\.\-]/g, '');
                    };
                    svg.Property.prototype.isPixels = function () {
                        if (!this.hasValue()) return false;
                        var s = this.value + '';
                        if (s.match(/px$/)) return true;
                        if (s.match(/^[0-9]+$/)) return true;
                        return false;
                    };

                    // get the length as pixels
                    svg.Property.prototype.toPixels = function (viewPort, processPercent) {
                        if (!this.hasValue()) return 0;
                        var s = this.value + '';
                        if (s.match(/rem$/)) return this.numValue() * this.getREM(viewPort);
                        if (s.match(/em$/)) return this.numValue() * this.getEM(viewPort);
                        if (s.match(/ex$/)) return this.numValue() * this.getEM(viewPort) / 2.0;
                        if (s.match(/px$/)) return this.numValue();
                        if (s.match(/pt$/)) return this.numValue() * this.getDPI(viewPort) * (1.0 / 72.0);
                        if (s.match(/pc$/)) return this.numValue() * 15;
                        if (s.match(/cm$/)) return this.numValue() * this.getDPI(viewPort) / 2.54;
                        if (s.match(/mm$/)) return this.numValue() * this.getDPI(viewPort) / 25.4;
                        if (s.match(/in$/)) return this.numValue() * this.getDPI(viewPort);
                        if (s.match(/%$/)) return this.numValue() * svg.ViewPort.ComputeSize(viewPort);
                        var n = this.numValue();
                        if (processPercent && n < 1.0) return n * svg.ViewPort.ComputeSize(viewPort);
                        return n;
                    };

                    // time extensions
                    // get the time as milliseconds
                    // https://svgwg.org/specs/animations/#ClockValueSyntax
                    svg.Property.prototype.toMilliseconds = function () {
                        if (!this.hasValue()) return 0;
                        var s = this.value + '';
                        if (s.match(/ms$/)) return this.numValue();
                        return this.numValue() * 1000;
                    };

                    // angle extensions
                    // get the angle as radians
                    svg.Property.prototype.toRadians = function () {
                        if (!this.hasValue()) return 0;
                        var s = this.value + '';
                        if (s.match(/deg$/)) return this.numValue() * (Math.PI / 180.0);
                        if (s.match(/grad$/)) return this.numValue() * (Math.PI / 200.0);
                        if (s.match(/rad$/)) return this.numValue();
                        return this.numValue() * (Math.PI / 180.0);
                    };

                    // text extensions
                    // get the text baseline
                    var textBaselineMapping = {
                        'baseline': 'alphabetic',
                        'before-edge': 'top',
                        'text-before-edge': 'top',
                        'middle': 'middle',
                        'central': 'middle',
                        'after-edge': 'bottom',
                        'text-after-edge': 'bottom',
                        'ideographic': 'ideographic',
                        'alphabetic': 'alphabetic',
                        'hanging': 'hanging',
                        'mathematical': 'alphabetic'
                    };
                    svg.Property.prototype.toTextBaseline = function () {
                        if (!this.hasValue()) return null;
                        return textBaselineMapping[this.value];
                    };

                    // fonts
                    svg.Font = new function () {
                        this.Styles = 'normal|italic|oblique|inherit';
                        this.Variants = 'normal|small-caps|inherit';
                        this.Weights = 'normal|bold|bolder|lighter|100|200|300|400|500|600|700|800|900|inherit';
                        this.CreateFont = function (fontStyle, fontVariant, fontWeight, fontSize, fontFamily, inherit) {
                            var f = inherit != null ? this.Parse(inherit) : this.CreateFont('', '', '', '', '', svg.ctx.font);
                            fontFamily = fontFamily || f.fontFamily;
                            return {
                                fontFamily: fontFamily,
                                fontSize: fontSize || f.fontSize,
                                fontStyle: fontStyle || f.fontStyle,
                                fontWeight: fontWeight || f.fontWeight,
                                fontVariant: fontVariant || f.fontVariant,
                                toString: function () {
                                    return [this.fontStyle, this.fontVariant, this.fontWeight, this.fontSize, this.fontFamily].join(' ');
                                }
                            };
                        };
                        var that = this;
                        this.Parse = function (s) {
                            var f = {};
                            var d = svg.trim(svg.compressSpaces(s || '')).split(' ');
                            var set = {
                                fontSize: false,
                                fontStyle: false,
                                fontWeight: false,
                                fontVariant: false
                            };
                            var ff = '';
                            for (var i = 0; i < d.length; i++) {
                                if (!set.fontStyle && that.Styles.indexOf(d[i]) != -1) {
                                    if (d[i] != 'inherit') f.fontStyle = d[i];
                                    set.fontStyle = true;
                                } else if (!set.fontVariant && that.Variants.indexOf(d[i]) != -1) {
                                    if (d[i] != 'inherit') f.fontVariant = d[i];
                                    set.fontStyle = set.fontVariant = true;
                                } else if (!set.fontWeight && that.Weights.indexOf(d[i]) != -1) {
                                    if (d[i] != 'inherit') f.fontWeight = d[i];
                                    set.fontStyle = set.fontVariant = set.fontWeight = true;
                                } else if (!set.fontSize) {
                                    if (d[i] != 'inherit') f.fontSize = d[i].split('/')[0];
                                    set.fontStyle = set.fontVariant = set.fontWeight = set.fontSize = true;
                                } else {
                                    if (d[i] != 'inherit') ff += d[i];
                                }
                            }
                            if (ff != '') f.fontFamily = ff;
                            return f;
                        };
                    }();

                    // points and paths
                    svg.ToNumberArray = function (s) {
                        var a = (s || '').match(/-?(\d+(?:\.\d*(?:[eE][+-]?\d+)?)?|\.\d+)(?=\D|$)/gm) || [];
                        for (var i = 0; i < a.length; i++) {
                            a[i] = parseFloat(a[i]);
                        }
                        return a;
                    };
                    svg.Point = function (x, y) {
                        this.x = x;
                        this.y = y;
                    };
                    svg.Point.prototype.angleTo = function (p) {
                        return Math.atan2(p.y - this.y, p.x - this.x);
                    };
                    svg.Point.prototype.applyTransform = function (v) {
                        var xp = this.x * v[0] + this.y * v[2] + v[4];
                        var yp = this.x * v[1] + this.y * v[3] + v[5];
                        this.x = xp;
                        this.y = yp;
                    };
                    svg.CreatePoint = function (s) {
                        var a = svg.ToNumberArray(s);
                        return new svg.Point(a[0], a[1]);
                    };
                    svg.CreatePath = function (s) {
                        var a = svg.ToNumberArray(s);
                        var path = [];
                        for (var i = 0; i < a.length; i += 2) {
                            path.push(new svg.Point(a[i], a[i + 1]));
                        }
                        return path;
                    };

                    // bounding box
                    svg.BoundingBox = function (x1, y1, x2, y2) {
                        // pass in initial points if you want
                        this.x1 = Number.NaN;
                        this.y1 = Number.NaN;
                        this.x2 = Number.NaN;
                        this.y2 = Number.NaN;
                        this.x = function () {
                            return this.x1;
                        };
                        this.y = function () {
                            return this.y1;
                        };
                        this.width = function () {
                            return this.x2 - this.x1;
                        };
                        this.height = function () {
                            return this.y2 - this.y1;
                        };
                        this.addPoint = function (x, y) {
                            if (x != null) {
                                if (isNaN(this.x1) || isNaN(this.x2)) {
                                    this.x1 = x;
                                    this.x2 = x;
                                }
                                if (x < this.x1) this.x1 = x;
                                if (x > this.x2) this.x2 = x;
                            }
                            if (y != null) {
                                if (isNaN(this.y1) || isNaN(this.y2)) {
                                    this.y1 = y;
                                    this.y2 = y;
                                }
                                if (y < this.y1) this.y1 = y;
                                if (y > this.y2) this.y2 = y;
                            }
                        };
                        this.addX = function (x) {
                            this.addPoint(x, null);
                        };
                        this.addY = function (y) {
                            this.addPoint(null, y);
                        };
                        this.addBoundingBox = function (bb) {
                            this.addPoint(bb.x1, bb.y1);
                            this.addPoint(bb.x2, bb.y2);
                        };
                        this.addQuadraticCurve = function (p0x, p0y, p1x, p1y, p2x, p2y) {
                            var cp1x = p0x + 2 / 3 * (p1x - p0x); // CP1 = QP0 + 2/3 *(QP1-QP0)
                            var cp1y = p0y + 2 / 3 * (p1y - p0y); // CP1 = QP0 + 2/3 *(QP1-QP0)
                            var cp2x = cp1x + 1 / 3 * (p2x - p0x); // CP2 = CP1 + 1/3 *(QP2-QP0)
                            var cp2y = cp1y + 1 / 3 * (p2y - p0y); // CP2 = CP1 + 1/3 *(QP2-QP0)
                            this.addBezierCurve(p0x, p0y, cp1x, cp2x, cp1y, cp2y, p2x, p2y);
                        };
                        this.addBezierCurve = function (p0x, p0y, p1x, p1y, p2x, p2y, p3x, p3y) {
                            // from http://blog.hackers-cafe.net/2009/06/how-to-calculate-bezier-curves-bounding.html
                            var p0 = [p0x, p0y],
                                p1 = [p1x, p1y],
                                p2 = [p2x, p2y],
                                p3 = [p3x, p3y];
                            this.addPoint(p0[0], p0[1]);
                            this.addPoint(p3[0], p3[1]);
                            for (var i = 0; i <= 1; i++) {
                                var f = function (t) {
                                    return Math.pow(1 - t, 3) * p0[i] + 3 * Math.pow(1 - t, 2) * t * p1[i] + 3 * (1 - t) * Math.pow(t, 2) * p2[i] + Math.pow(t, 3) * p3[i];
                                };
                                var b = 6 * p0[i] - 12 * p1[i] + 6 * p2[i];
                                var a = -3 * p0[i] + 9 * p1[i] - 9 * p2[i] + 3 * p3[i];
                                var c = 3 * p1[i] - 3 * p0[i];
                                if (a == 0) {
                                    if (b == 0) continue;
                                    var t = -c / b;
                                    if (0 < t && t < 1) {
                                        if (i == 0) this.addX(f(t));
                                        if (i == 1) this.addY(f(t));
                                    }
                                    continue;
                                }
                                var b2ac = Math.pow(b, 2) - 4 * c * a;
                                if (b2ac < 0) continue;
                                var t1 = (-b + Math.sqrt(b2ac)) / (2 * a);
                                if (0 < t1 && t1 < 1) {
                                    if (i == 0) this.addX(f(t1));
                                    if (i == 1) this.addY(f(t1));
                                }
                                var t2 = (-b - Math.sqrt(b2ac)) / (2 * a);
                                if (0 < t2 && t2 < 1) {
                                    if (i == 0) this.addX(f(t2));
                                    if (i == 1) this.addY(f(t2));
                                }
                            }
                        };
                        this.isPointInBox = function (x, y) {
                            return this.x1 <= x && x <= this.x2 && this.y1 <= y && y <= this.y2;
                        };
                        this.addPoint(x1, y1);
                        this.addPoint(x2, y2);
                    };

                    // transforms
                    svg.Transform = function (v) {
                        var that = this;
                        this.Type = {};

                        // translate
                        this.Type.translate = function (s) {
                            this.p = svg.CreatePoint(s);
                            this.apply = function (ctx) {
                                ctx.translate(this.p.x || 0.0, this.p.y || 0.0);
                            };
                            this.unapply = function (ctx) {
                                ctx.translate(-1.0 * this.p.x || 0.0, -1.0 * this.p.y || 0.0);
                            };
                            this.applyToPoint = function (p) {
                                p.applyTransform([1, 0, 0, 1, this.p.x || 0.0, this.p.y || 0.0]);
                            };
                        };

                        // rotate
                        this.Type.rotate = function (s) {
                            var a = svg.ToNumberArray(s);
                            this.angle = new svg.Property('angle', a[0]);
                            this.cx = a[1] || 0;
                            this.cy = a[2] || 0;
                            this.apply = function (ctx) {
                                ctx.translate(this.cx, this.cy);
                                ctx.rotate(this.angle.toRadians());
                                ctx.translate(-this.cx, -this.cy);
                            };
                            this.unapply = function (ctx) {
                                ctx.translate(this.cx, this.cy);
                                ctx.rotate(-1.0 * this.angle.toRadians());
                                ctx.translate(-this.cx, -this.cy);
                            };
                            this.applyToPoint = function (p) {
                                var a = this.angle.toRadians();
                                p.applyTransform([1, 0, 0, 1, this.p.x || 0.0, this.p.y || 0.0]);
                                p.applyTransform([Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0]);
                                p.applyTransform([1, 0, 0, 1, -this.p.x || 0.0, -this.p.y || 0.0]);
                            };
                        };
                        this.Type.scale = function (s) {
                            this.p = svg.CreatePoint(s);
                            this.apply = function (ctx) {
                                ctx.scale(this.p.x || 1.0, this.p.y || this.p.x || 1.0);
                            };
                            this.unapply = function (ctx) {
                                ctx.scale(1.0 / this.p.x || 1.0, 1.0 / this.p.y || this.p.x || 1.0);
                            };
                            this.applyToPoint = function (p) {
                                p.applyTransform([this.p.x || 0.0, 0, 0, this.p.y || 0.0, 0, 0]);
                            };
                        };
                        this.Type.matrix = function (s) {
                            this.m = svg.ToNumberArray(s);
                            this.apply = function (ctx) {
                                ctx.transform(this.m[0], this.m[1], this.m[2], this.m[3], this.m[4], this.m[5]);
                            };
                            this.unapply = function (ctx) {
                                var a = this.m[0];
                                var b = this.m[2];
                                var c = this.m[4];
                                var d = this.m[1];
                                var e = this.m[3];
                                var f = this.m[5];
                                var g = 0.0;
                                var h = 0.0;
                                var i = 1.0;
                                var det = 1 / (a * (e * i - f * h) - b * (d * i - f * g) + c * (d * h - e * g));
                                ctx.transform(det * (e * i - f * h), det * (f * g - d * i), det * (c * h - b * i), det * (a * i - c * g), det * (b * f - c * e), det * (c * d - a * f));
                            };
                            this.applyToPoint = function (p) {
                                p.applyTransform(this.m);
                            };
                        };
                        this.Type.SkewBase = function (s) {
                            this.base = that.Type.matrix;
                            this.base(s);
                            this.angle = new svg.Property('angle', s);
                        };
                        this.Type.SkewBase.prototype = new this.Type.matrix();
                        this.Type.skewX = function (s) {
                            this.base = that.Type.SkewBase;
                            this.base(s);
                            this.m = [1, 0, Math.tan(this.angle.toRadians()), 1, 0, 0];
                        };
                        this.Type.skewX.prototype = new this.Type.SkewBase();
                        this.Type.skewY = function (s) {
                            this.base = that.Type.SkewBase;
                            this.base(s);
                            this.m = [1, Math.tan(this.angle.toRadians()), 0, 1, 0, 0];
                        };
                        this.Type.skewY.prototype = new this.Type.SkewBase();
                        this.transforms = [];
                        this.apply = function (ctx) {
                            for (var i = 0; i < this.transforms.length; i++) {
                                this.transforms[i].apply(ctx);
                            }
                        };
                        this.unapply = function (ctx) {
                            for (var i = this.transforms.length - 1; i >= 0; i--) {
                                this.transforms[i].unapply(ctx);
                            }
                        };

                        // TODO: applyToPoint unused ... remove?
                        this.applyToPoint = function (p) {
                            for (var i = 0; i < this.transforms.length; i++) {
                                this.transforms[i].applyToPoint(p);
                            }
                        };
                        var data = svg.trim(svg.compressSpaces(v)).replace(/\)([a-zA-Z])/g, ') $1').replace(/\)(\s?,\s?)/g, ') ').split(/\s(?=[a-z])/);
                        for (var i = 0; i < data.length; i++) {
                            if (data[i] === 'none') {
                                continue;
                            }
                            var type = svg.trim(data[i].split('(')[0]);
                            var s = data[i].split('(')[1].replace(')', '');
                            var transformType = this.Type[type];
                            if (typeof transformType != 'undefined') {
                                var transform = new transformType(s);
                                transform.type = type;
                                this.transforms.push(transform);
                            }
                        }
                    };

                    // aspect ratio
                    svg.AspectRatio = function (ctx, aspectRatio, width, desiredWidth, height, desiredHeight, minX, minY, refX, refY) {
                        // aspect ratio - http://www.w3.org/TR/SVG/coords.html#PreserveAspectRatioAttribute
                        aspectRatio = svg.compressSpaces(aspectRatio);
                        aspectRatio = aspectRatio.replace(/^defer\s/, ''); // ignore defer
                        var align = aspectRatio.split(' ')[0] || 'xMidYMid';
                        var meetOrSlice = aspectRatio.split(' ')[1] || 'meet';

                        // calculate scale
                        var scaleX = width / desiredWidth;
                        var scaleY = height / desiredHeight;
                        var scaleMin = Math.min(scaleX, scaleY);
                        var scaleMax = Math.max(scaleX, scaleY);
                        if (meetOrSlice == 'meet') {
                            desiredWidth *= scaleMin;
                            desiredHeight *= scaleMin;
                        }
                        if (meetOrSlice == 'slice') {
                            desiredWidth *= scaleMax;
                            desiredHeight *= scaleMax;
                        }
                        refX = new svg.Property('refX', refX);
                        refY = new svg.Property('refY', refY);
                        if (refX.hasValue() && refY.hasValue()) {
                            ctx.translate(-scaleMin * refX.toPixels('x'), -scaleMin * refY.toPixels('y'));
                        } else {
                            // align
                            if (align.match(/^xMid/) && (meetOrSlice == 'meet' && scaleMin == scaleY || meetOrSlice == 'slice' && scaleMax == scaleY)) ctx.translate(width / 2.0 - desiredWidth / 2.0, 0);
                            if (align.match(/YMid$/) && (meetOrSlice == 'meet' && scaleMin == scaleX || meetOrSlice == 'slice' && scaleMax == scaleX)) ctx.translate(0, height / 2.0 - desiredHeight / 2.0);
                            if (align.match(/^xMax/) && (meetOrSlice == 'meet' && scaleMin == scaleY || meetOrSlice == 'slice' && scaleMax == scaleY)) ctx.translate(width - desiredWidth, 0);
                            if (align.match(/YMax$/) && (meetOrSlice == 'meet' && scaleMin == scaleX || meetOrSlice == 'slice' && scaleMax == scaleX)) ctx.translate(0, height - desiredHeight);
                        }

                        // scale
                        if (align == 'none') ctx.scale(scaleX, scaleY);else if (meetOrSlice == 'meet') ctx.scale(scaleMin, scaleMin);else if (meetOrSlice == 'slice') ctx.scale(scaleMax, scaleMax);

                        // translate
                        ctx.translate(minX == null ? 0 : -minX, minY == null ? 0 : -minY);
                    };

                    // elements
                    svg.Element = {};
                    svg.EmptyProperty = new svg.Property('EMPTY', '');
                    svg.Element.ElementBase = function (node) {
                        this.attributes = {};
                        this.styles = {};
                        this.stylesSpecificity = {};
                        this.children = [];

                        // get or create attribute
                        this.attribute = function (name, createIfNotExists) {
                            var a = this.attributes[name];
                            if (a != null) return a;
                            if (createIfNotExists == true) {
                                a = new svg.Property(name, '');
                                this.attributes[name] = a;
                            }
                            return a || svg.EmptyProperty;
                        };
                        this.getHrefAttribute = function () {
                            for (var a in this.attributes) {
                                if (a == 'href' || a.match(/:href$/)) {
                                    return this.attributes[a];
                                }
                            }
                            return svg.EmptyProperty;
                        };

                        // get or create style, crawls up node tree
                        this.style = function (name, createIfNotExists, skipAncestors) {
                            var s = this.styles[name];
                            if (s != null) return s;
                            var a = this.attribute(name);
                            if (a != null && a.hasValue()) {
                                this.styles[name] = a; // move up to me to cache
                                return a;
                            }
                            if (skipAncestors != true) {
                                var p = this.parent;
                                if (p != null) {
                                    var ps = p.style(name);
                                    if (ps != null && ps.hasValue()) {
                                        return ps;
                                    }
                                }
                            }
                            if (createIfNotExists == true) {
                                s = new svg.Property(name, '');
                                this.styles[name] = s;
                            }
                            return s || svg.EmptyProperty;
                        };

                        // base render
                        this.render = function (ctx) {
                            // don't render display=none
                            if (this.style('display').value == 'none') return;

                            // don't render visibility=hidden
                            if (this.style('visibility').value == 'hidden') return;
                            ctx.save();
                            if (this.style('mask').hasValue()) {
                                // mask
                                var mask = this.style('mask').getDefinition();
                                if (mask != null) mask.apply(ctx, this);
                            } else if (this.style('filter').hasValue()) {
                                // filter
                                var filter = this.style('filter').getDefinition();
                                if (filter != null) filter.apply(ctx, this);
                            } else {
                                this.setContext(ctx);
                                this.renderChildren(ctx);
                                this.clearContext(ctx);
                            }
                            ctx.restore();
                        };

                        // base set context
                        this.setContext = function /* ctx */
                            () {
                            // OVERRIDE ME!
                        };

                        // base clear context
                        this.clearContext = function /* ctx */
                            () {
                            // OVERRIDE ME!
                        };

                        // base render children
                        this.renderChildren = function (ctx) {
                            for (var i = 0; i < this.children.length; i++) {
                                this.children[i].render(ctx);
                            }
                        };
                        this.addChild = function (childNode, create) {
                            var child = childNode;
                            if (create) child = svg.CreateElement(childNode);
                            child.parent = this;
                            if (child.type != 'title') {
                                this.children.push(child);
                            }
                        };
                        this.addStylesFromStyleDefinition = function () {
                            // add styles
                            for (var selector in svg.Styles) {
                                if (selector[0] != '@' && matchesSelector(node, selector)) {
                                    var styles = svg.Styles[selector];
                                    var specificity = svg.StylesSpecificity[selector];
                                    if (styles != null) {
                                        for (var name in styles) {
                                            var existingSpecificity = this.stylesSpecificity[name];
                                            if (typeof existingSpecificity == 'undefined') {
                                                existingSpecificity = '000';
                                            }
                                            if (specificity >= existingSpecificity) {
                                                this.styles[name] = styles[name];
                                                this.stylesSpecificity[name] = specificity;
                                            }
                                        }
                                    }
                                }
                            }
                        };

                        // Microsoft Edge fix
                        var allUppercase = new RegExp('^[A-Z\-]+$');
                        var normalizeAttributeName = function (name) {
                            if (allUppercase.test(name)) {
                                return name.toLowerCase();
                            }
                            return name;
                        };
                        if (node != null && node.nodeType == 1) {
                            //ELEMENT_NODE
                            // add attributes
                            for (var i = 0; i < node.attributes.length; i++) {
                                var attribute = node.attributes[i];
                                var nodeName = normalizeAttributeName(attribute.nodeName);
                                this.attributes[nodeName] = new svg.Property(nodeName, attribute.value);
                            }
                            this.addStylesFromStyleDefinition();

                            // add inline styles
                            if (this.attribute('style').hasValue()) {
                                var styles = this.attribute('style').value.split(';');
                                for (var i = 0; i < styles.length; i++) {
                                    if (svg.trim(styles[i]) != '') {
                                        var style = styles[i].split(':');
                                        var name = svg.trim(style[0]);
                                        var value = svg.trim(style[1]);
                                        this.styles[name] = new svg.Property(name, value);
                                    }
                                }
                            }

                            // add id
                            if (this.attribute('id').hasValue()) {
                                if (svg.Definitions[this.attribute('id').value] == null) {
                                    svg.Definitions[this.attribute('id').value] = this;
                                }
                            }

                            // add children
                            for (var i = 0; i < node.childNodes.length; i++) {
                                var childNode = node.childNodes[i];
                                if (childNode.nodeType == 1) this.addChild(childNode, true); //ELEMENT_NODE
                                if (this.captureTextNodes && (childNode.nodeType == 3 || childNode.nodeType == 4)) {
                                    var text = childNode.value || childNode.text || childNode.textContent || '';
                                    if (svg.compressSpaces(text) != '') {
                                        this.addChild(new svg.Element.tspan(childNode), false); // TEXT_NODE
                                    }
                                }
                            }
                        }
                    };
                    svg.Element.RenderedElementBase = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.calculateOpacity = function () {
                            var opacity = 1.0;
                            var el = this;
                            while (el != null) {
                                var opacityStyle = el.style('opacity', false, true); // no ancestors on style call
                                if (opacityStyle.hasValue()) {
                                    opacity = opacity * opacityStyle.numValue();
                                }
                                el = el.parent;
                            }
                            return opacity;
                        };
                        this.setContext = function (ctx, fromMeasure) {
                            if (!fromMeasure) {
                                // causes stack overflow when measuring text with gradients
                                // fill
                                if (this.style('fill').isUrlDefinition()) {
                                    var fs = this.style('fill').getFillStyleDefinition(this, this.style('fill-opacity'));
                                    if (fs != null) ctx.fillStyle = fs;
                                } else if (this.style('fill').hasValue()) {
                                    var fillStyle = this.style('fill');
                                    if (fillStyle.value == 'currentColor') fillStyle.value = this.style('color').value;
                                    if (fillStyle.value != 'inherit') ctx.fillStyle = fillStyle.value == 'none' ? 'rgba(0,0,0,0)' : fillStyle.value;
                                }
                                if (this.style('fill-opacity').hasValue()) {
                                    var fillStyle = new svg.Property('fill', ctx.fillStyle);
                                    fillStyle = fillStyle.addOpacity(this.style('fill-opacity'));
                                    ctx.fillStyle = fillStyle.value;
                                }

                                // stroke
                                if (this.style('stroke').isUrlDefinition()) {
                                    var fs = this.style('stroke').getFillStyleDefinition(this, this.style('stroke-opacity'));
                                    if (fs != null) ctx.strokeStyle = fs;
                                } else if (this.style('stroke').hasValue()) {
                                    var strokeStyle = this.style('stroke');
                                    if (strokeStyle.value == 'currentColor') strokeStyle.value = this.style('color').value;
                                    if (strokeStyle.value != 'inherit') ctx.strokeStyle = strokeStyle.value == 'none' ? 'rgba(0,0,0,0)' : strokeStyle.value;
                                }
                                if (this.style('stroke-opacity').hasValue()) {
                                    var strokeStyle = new svg.Property('stroke', ctx.strokeStyle);
                                    strokeStyle = strokeStyle.addOpacity(this.style('stroke-opacity'));
                                    ctx.strokeStyle = strokeStyle.value;
                                }
                                if (this.style('stroke-width').hasValue()) {
                                    var newLineWidth = this.style('stroke-width').toPixels();
                                    ctx.lineWidth = newLineWidth == 0 ? 0.001 : newLineWidth; // browsers don't respect 0
                                }
                                if (this.style('stroke-linecap').hasValue()) ctx.lineCap = this.style('stroke-linecap').value;
                                if (this.style('stroke-linejoin').hasValue()) ctx.lineJoin = this.style('stroke-linejoin').value;
                                if (this.style('stroke-miterlimit').hasValue()) ctx.miterLimit = this.style('stroke-miterlimit').value;
                                if (this.style('paint-order').hasValue()) ctx.paintOrder = this.style('paint-order').value;
                                if (this.style('stroke-dasharray').hasValue() && this.style('stroke-dasharray').value != 'none') {
                                    var gaps = svg.ToNumberArray(this.style('stroke-dasharray').value);
                                    if (typeof ctx.setLineDash != 'undefined') {
                                        ctx.setLineDash(gaps);
                                    } else if (typeof ctx.webkitLineDash != 'undefined') {
                                        ctx.webkitLineDash = gaps;
                                    } else if (typeof ctx.mozDash != 'undefined' && !(gaps.length == 1 && gaps[0] == 0)) {
                                        ctx.mozDash = gaps;
                                    }
                                    var offset = this.style('stroke-dashoffset').toPixels();
                                    if (typeof ctx.lineDashOffset != 'undefined') {
                                        ctx.lineDashOffset = offset;
                                    } else if (typeof ctx.webkitLineDashOffset != 'undefined') {
                                        ctx.webkitLineDashOffset = offset;
                                    } else if (typeof ctx.mozDashOffset != 'undefined') {
                                        ctx.mozDashOffset = offset;
                                    }
                                }
                            }

                            // font
                            if (typeof ctx.font != 'undefined') {
                                if (this.style('font').hasValue()) {
                                    ctx.font = this.style('font').value;
                                } else {
                                    ctx.font = svg.Font.CreateFont(this.style('font-style').value, this.style('font-variant').value, this.style('font-weight').value, this.style('font-size').hasValue() ? this.style('font-size').toPixels() + 'px' : '', this.style('font-family').value).toString();

                                    // update em size if needed
                                    var currentFontSize = this.style('font-size', false, false);
                                    if (currentFontSize.isPixels()) {
                                        svg.emSize = currentFontSize.toPixels();
                                    }
                                }
                            }

                            // transform
                            if (this.style('transform', false, true).hasValue()) {
                                var transform = new svg.Transform(this.style('transform', false, true).value);
                                transform.apply(ctx);
                            }

                            // clip
                            if (this.style('clip-path', false, true).hasValue()) {
                                var clip = this.style('clip-path', false, true).getDefinition();
                                if (clip != null) clip.apply(ctx);
                            }

                            // opacity
                            ctx.globalAlpha = this.calculateOpacity();
                        };
                    };
                    svg.Element.RenderedElementBase.prototype = new svg.Element.ElementBase();
                    svg.Element.PathElementBase = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.path = function (ctx) {
                            if (ctx != null) ctx.beginPath();
                            return new svg.BoundingBox();
                        };
                        this.renderChildren = function (ctx) {
                            this.path(ctx);
                            svg.Mouse.checkPath(this, ctx);
                            if (ctx.fillStyle != '') {
                                if (this.style('fill-rule').valueOrDefault('inherit') != 'inherit') {
                                    ctx.fill(this.style('fill-rule').value);
                                } else {
                                    ctx.fill();
                                }
                            }
                            if (ctx.strokeStyle != '') ctx.stroke();
                            var markers = this.getMarkers();
                            if (markers != null) {
                                if (this.style('marker-start').isUrlDefinition()) {
                                    var marker = this.style('marker-start').getDefinition();
                                    marker.render(ctx, markers[0][0], markers[0][1]);
                                }
                                if (this.style('marker-mid').isUrlDefinition()) {
                                    var marker = this.style('marker-mid').getDefinition();
                                    for (var i = 1; i < markers.length - 1; i++) {
                                        marker.render(ctx, markers[i][0], markers[i][1]);
                                    }
                                }
                                if (this.style('marker-end').isUrlDefinition()) {
                                    var marker = this.style('marker-end').getDefinition();
                                    marker.render(ctx, markers[markers.length - 1][0], markers[markers.length - 1][1]);
                                }
                            }
                        };
                        this.getBoundingBox = function () {
                            return this.path();
                        };
                        this.getMarkers = function () {
                            return null;
                        };
                    };
                    svg.Element.PathElementBase.prototype = new svg.Element.RenderedElementBase();
                    svg.SetDefaults = function (ctx) {
                        // initial values and defaults
                        ctx.strokeStyle = 'rgba(0,0,0,0)';
                        ctx.lineCap = 'butt';
                        ctx.lineJoin = 'miter';
                        ctx.miterLimit = 4;
                    };

                    // svg element
                    svg.Element.svg = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.baseClearContext = this.clearContext;
                        this.clearContext = function (ctx) {
                            this.baseClearContext(ctx);
                            svg.ViewPort.RemoveCurrent();
                        };
                        this.baseSetContext = this.setContext;
                        this.setContext = function (ctx) {
                            svg.SetDefaults(ctx);
                            if (ctx.canvas.style && typeof ctx.font != 'undefined' && typeof windowEnv.getComputedStyle != 'undefined') {
                                ctx.font = windowEnv.getComputedStyle(ctx.canvas).getPropertyValue('font');
                                var fontSize = new svg.Property('fontSize', svg.Font.Parse(ctx.font).fontSize);
                                if (fontSize.hasValue()) svg.rootEmSize = svg.emSize = fontSize.toPixels('y');
                            }
                            this.baseSetContext(ctx);

                            // create new view port
                            if (!this.attribute('x').hasValue()) this.attribute('x', true).value = 0;
                            if (!this.attribute('y').hasValue()) this.attribute('y', true).value = 0;
                            ctx.translate(this.attribute('x').toPixels('x'), this.attribute('y').toPixels('y'));
                            var width = svg.ViewPort.width();
                            var height = svg.ViewPort.height();
                            if (!this.attribute('width').hasValue()) this.attribute('width', true).value = '100%';
                            if (!this.attribute('height').hasValue()) this.attribute('height', true).value = '100%';
                            if (typeof this.root == 'undefined') {
                                width = this.attribute('width').toPixels('x');
                                height = this.attribute('height').toPixels('y');
                                var x = 0;
                                var y = 0;
                                if (this.attribute('refX').hasValue() && this.attribute('refY').hasValue()) {
                                    x = -this.attribute('refX').toPixels('x');
                                    y = -this.attribute('refY').toPixels('y');
                                }
                                if (this.attribute('overflow').valueOrDefault('hidden') != 'visible') {
                                    ctx.beginPath();
                                    ctx.moveTo(x, y);
                                    ctx.lineTo(width, y);
                                    ctx.lineTo(width, height);
                                    ctx.lineTo(x, height);
                                    ctx.closePath();
                                    ctx.clip();
                                }
                            }
                            svg.ViewPort.SetCurrent(width, height);

                            // viewbox
                            if (this.attribute('viewBox').hasValue()) {
                                var viewBox = svg.ToNumberArray(this.attribute('viewBox').value);
                                var minX = viewBox[0];
                                var minY = viewBox[1];
                                width = viewBox[2];
                                height = viewBox[3];
                                svg.AspectRatio(ctx, this.attribute('preserveAspectRatio').value, svg.ViewPort.width(), width, svg.ViewPort.height(), height, minX, minY, this.attribute('refX').value, this.attribute('refY').value);
                                svg.ViewPort.RemoveCurrent();
                                svg.ViewPort.SetCurrent(viewBox[2], viewBox[3]);
                            }
                        };
                    };
                    svg.Element.svg.prototype = new svg.Element.RenderedElementBase();

                    // rect element
                    svg.Element.rect = function (node) {
                        this.base = svg.Element.PathElementBase;
                        this.base(node);
                        this.path = function (ctx) {
                            var x = this.attribute('x').toPixels('x');
                            var y = this.attribute('y').toPixels('y');
                            var width = this.attribute('width').toPixels('x');
                            var height = this.attribute('height').toPixels('y');
                            var rx = this.attribute('rx').toPixels('x');
                            var ry = this.attribute('ry').toPixels('y');
                            if (this.attribute('rx').hasValue() && !this.attribute('ry').hasValue()) ry = rx;
                            if (this.attribute('ry').hasValue() && !this.attribute('rx').hasValue()) rx = ry;
                            rx = Math.min(rx, width / 2.0);
                            ry = Math.min(ry, height / 2.0);
                            if (ctx != null) {
                                var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
                                ctx.beginPath(); // always start the path so we don't fill prior paths
                                if (height > 0 && width > 0) {
                                    ctx.moveTo(x + rx, y);
                                    ctx.lineTo(x + width - rx, y);
                                    ctx.bezierCurveTo(x + width - rx + KAPPA * rx, y, x + width, y + ry - KAPPA * ry, x + width, y + ry);
                                    ctx.lineTo(x + width, y + height - ry);
                                    ctx.bezierCurveTo(x + width, y + height - ry + KAPPA * ry, x + width - rx + KAPPA * rx, y + height, x + width - rx, y + height);
                                    ctx.lineTo(x + rx, y + height);
                                    ctx.bezierCurveTo(x + rx - KAPPA * rx, y + height, x, y + height - ry + KAPPA * ry, x, y + height - ry);
                                    ctx.lineTo(x, y + ry);
                                    ctx.bezierCurveTo(x, y + ry - KAPPA * ry, x + rx - KAPPA * rx, y, x + rx, y);
                                    ctx.closePath();
                                }
                            }
                            return new svg.BoundingBox(x, y, x + width, y + height);
                        };
                    };
                    svg.Element.rect.prototype = new svg.Element.PathElementBase();

                    // circle element
                    svg.Element.circle = function (node) {
                        this.base = svg.Element.PathElementBase;
                        this.base(node);
                        this.path = function (ctx) {
                            var cx = this.attribute('cx').toPixels('x');
                            var cy = this.attribute('cy').toPixels('y');
                            var r = this.attribute('r').toPixels();
                            if (ctx != null && r > 0) {
                                ctx.beginPath();
                                ctx.arc(cx, cy, r, 0, Math.PI * 2, false);
                                ctx.closePath();
                            }
                            return new svg.BoundingBox(cx - r, cy - r, cx + r, cy + r);
                        };
                    };
                    svg.Element.circle.prototype = new svg.Element.PathElementBase();

                    // ellipse element
                    svg.Element.ellipse = function (node) {
                        this.base = svg.Element.PathElementBase;
                        this.base(node);
                        this.path = function (ctx) {
                            var KAPPA = 4 * ((Math.sqrt(2) - 1) / 3);
                            var rx = this.attribute('rx').toPixels('x');
                            var ry = this.attribute('ry').toPixels('y');
                            var cx = this.attribute('cx').toPixels('x');
                            var cy = this.attribute('cy').toPixels('y');
                            if (ctx != null) {
                                ctx.beginPath();
                                ctx.moveTo(cx + rx, cy);
                                ctx.bezierCurveTo(cx + rx, cy + KAPPA * ry, cx + KAPPA * rx, cy + ry, cx, cy + ry);
                                ctx.bezierCurveTo(cx - KAPPA * rx, cy + ry, cx - rx, cy + KAPPA * ry, cx - rx, cy);
                                ctx.bezierCurveTo(cx - rx, cy - KAPPA * ry, cx - KAPPA * rx, cy - ry, cx, cy - ry);
                                ctx.bezierCurveTo(cx + KAPPA * rx, cy - ry, cx + rx, cy - KAPPA * ry, cx + rx, cy);
                                ctx.closePath();
                            }
                            return new svg.BoundingBox(cx - rx, cy - ry, cx + rx, cy + ry);
                        };
                    };
                    svg.Element.ellipse.prototype = new svg.Element.PathElementBase();

                    // line element
                    svg.Element.line = function (node) {
                        this.base = svg.Element.PathElementBase;
                        this.base(node);
                        this.getPoints = function () {
                            return [new svg.Point(this.attribute('x1').toPixels('x'), this.attribute('y1').toPixels('y')), new svg.Point(this.attribute('x2').toPixels('x'), this.attribute('y2').toPixels('y'))];
                        };
                        this.path = function (ctx) {
                            var points = this.getPoints();
                            if (ctx != null) {
                                ctx.beginPath();
                                ctx.moveTo(points[0].x, points[0].y);
                                ctx.lineTo(points[1].x, points[1].y);
                            }
                            return new svg.BoundingBox(points[0].x, points[0].y, points[1].x, points[1].y);
                        };
                        this.getMarkers = function () {
                            var points = this.getPoints();
                            var a = points[0].angleTo(points[1]);
                            return [[points[0], a], [points[1], a]];
                        };
                    };
                    svg.Element.line.prototype = new svg.Element.PathElementBase();

                    // polyline element
                    svg.Element.polyline = function (node) {
                        this.base = svg.Element.PathElementBase;
                        this.base(node);
                        this.points = svg.CreatePath(this.attribute('points').value);
                        this.path = function (ctx) {
                            var bb = new svg.BoundingBox(this.points[0].x, this.points[0].y);
                            if (ctx != null) {
                                ctx.beginPath();
                                ctx.moveTo(this.points[0].x, this.points[0].y);
                            }
                            for (var i = 1; i < this.points.length; i++) {
                                bb.addPoint(this.points[i].x, this.points[i].y);
                                if (ctx != null) ctx.lineTo(this.points[i].x, this.points[i].y);
                            }
                            return bb;
                        };
                        this.getMarkers = function () {
                            var markers = [];
                            for (var i = 0; i < this.points.length - 1; i++) {
                                markers.push([this.points[i], this.points[i].angleTo(this.points[i + 1])]);
                            }
                            if (markers.length > 0) {
                                markers.push([this.points[this.points.length - 1], markers[markers.length - 1][1]]);
                            }
                            return markers;
                        };
                    };
                    svg.Element.polyline.prototype = new svg.Element.PathElementBase();

                    // polygon element
                    svg.Element.polygon = function (node) {
                        this.base = svg.Element.polyline;
                        this.base(node);
                        this.basePath = this.path;
                        this.path = function (ctx) {
                            var bb = this.basePath(ctx);
                            if (ctx != null) {
                                ctx.lineTo(this.points[0].x, this.points[0].y);
                                ctx.closePath();
                            }
                            return bb;
                        };
                    };
                    svg.Element.polygon.prototype = new svg.Element.polyline();

                    // path element
                    svg.Element.path = function (node) {
                        this.base = svg.Element.PathElementBase;
                        this.base(node);
                        var d = this.attribute('d').value;
                        // TODO: convert to real lexer based on http://www.w3.org/TR/SVG11/paths.html#PathDataBNF
                        d = d.replace(/,/gm, ' '); // get rid of all commas
                        // As the end of a match can also be the start of the next match, we need to run this replace twice.
                        for (var i = 0; i < 2; i++) d = d.replace(/([MmZzLlHhVvCcSsQqTtAa])([^\s])/gm, '$1 $2'); // suffix commands with spaces
                        d = d.replace(/([^\s])([MmZzLlHhVvCcSsQqTtAa])/gm, '$1 $2'); // prefix commands with spaces
                        d = d.replace(/([0-9])([+\-])/gm, '$1 $2'); // separate digits on +- signs
                        // Again, we need to run this twice to find all occurances
                        for (var i = 0; i < 2; i++) d = d.replace(/(\.[0-9]*)(\.)/gm, '$1 $2'); // separate digits when they start with a comma
                        d = d.replace(/([Aa](\s+[0-9]+){3})\s+([01])\s*([01])/gm, '$1 $3 $4 '); // shorthand elliptical arc path syntax
                        d = svg.compressSpaces(d); // compress multiple spaces
                        d = svg.trim(d);
                        this.PathParser = new function (d) {
                            this.tokens = d.split(' ');
                            this.reset = function () {
                                this.i = -1;
                                this.command = '';
                                this.previousCommand = '';
                                this.start = new svg.Point(0, 0);
                                this.control = new svg.Point(0, 0);
                                this.current = new svg.Point(0, 0);
                                this.points = [];
                                this.angles = [];
                            };
                            this.isEnd = function () {
                                return this.i >= this.tokens.length - 1;
                            };
                            this.isCommandOrEnd = function () {
                                if (this.isEnd()) return true;
                                return this.tokens[this.i + 1].match(/^[A-Za-z]$/) != null;
                            };
                            this.isRelativeCommand = function () {
                                switch (this.command) {
                                    case 'm':
                                    case 'l':
                                    case 'h':
                                    case 'v':
                                    case 'c':
                                    case 's':
                                    case 'q':
                                    case 't':
                                    case 'a':
                                    case 'z':
                                        return true;
                                }
                                return false;
                            };
                            this.getToken = function () {
                                this.i++;
                                return this.tokens[this.i];
                            };
                            this.getScalar = function () {
                                return parseFloat(this.getToken());
                            };
                            this.nextCommand = function () {
                                this.previousCommand = this.command;
                                this.command = this.getToken();
                            };
                            this.getPoint = function () {
                                var p = new svg.Point(this.getScalar(), this.getScalar());
                                return this.makeAbsolute(p);
                            };
                            this.getAsControlPoint = function () {
                                var p = this.getPoint();
                                this.control = p;
                                return p;
                            };
                            this.getAsCurrentPoint = function () {
                                var p = this.getPoint();
                                this.current = p;
                                return p;
                            };
                            this.getReflectedControlPoint = function () {
                                if (this.previousCommand.toLowerCase() != 'c' && this.previousCommand.toLowerCase() != 's' && this.previousCommand.toLowerCase() != 'q' && this.previousCommand.toLowerCase() != 't') {
                                    return this.current;
                                }

                                // reflect point
                                var p = new svg.Point(2 * this.current.x - this.control.x, 2 * this.current.y - this.control.y);
                                return p;
                            };
                            this.makeAbsolute = function (p) {
                                if (this.isRelativeCommand()) {
                                    p.x += this.current.x;
                                    p.y += this.current.y;
                                }
                                return p;
                            };
                            this.addMarker = function (p, from, priorTo) {
                                // if the last angle isn't filled in because we didn't have this point yet ...
                                if (priorTo != null && this.angles.length > 0 && this.angles[this.angles.length - 1] == null) {
                                    this.angles[this.angles.length - 1] = this.points[this.points.length - 1].angleTo(priorTo);
                                }
                                this.addMarkerAngle(p, from == null ? null : from.angleTo(p));
                            };
                            this.addMarkerAngle = function (p, a) {
                                this.points.push(p);
                                this.angles.push(a);
                            };
                            this.getMarkerPoints = function () {
                                return this.points;
                            };
                            this.getMarkerAngles = function () {
                                for (var i = 0; i < this.angles.length; i++) {
                                    if (this.angles[i] == null) {
                                        for (var j = i + 1; j < this.angles.length; j++) {
                                            if (this.angles[j] != null) {
                                                this.angles[i] = this.angles[j];
                                                break;
                                            }
                                        }
                                    }
                                }
                                return this.angles;
                            };
                        }(d);
                        this.path = function (ctx) {
                            var pp = this.PathParser;
                            pp.reset();
                            var bb = new svg.BoundingBox();
                            if (ctx != null) ctx.beginPath();
                            while (!pp.isEnd()) {
                                pp.nextCommand();
                                switch (pp.command) {
                                    case 'M':
                                    case 'm':
                                        var p = pp.getAsCurrentPoint();
                                        pp.addMarker(p);
                                        bb.addPoint(p.x, p.y);
                                        if (ctx != null) ctx.moveTo(p.x, p.y);
                                        pp.start = pp.current;
                                        while (!pp.isCommandOrEnd()) {
                                            var p = pp.getAsCurrentPoint();
                                            pp.addMarker(p, pp.start);
                                            bb.addPoint(p.x, p.y);
                                            if (ctx != null) ctx.lineTo(p.x, p.y);
                                        }
                                        break;
                                    case 'L':
                                    case 'l':
                                        while (!pp.isCommandOrEnd()) {
                                            var c = pp.current;
                                            var p = pp.getAsCurrentPoint();
                                            pp.addMarker(p, c);
                                            bb.addPoint(p.x, p.y);
                                            if (ctx != null) ctx.lineTo(p.x, p.y);
                                        }
                                        break;
                                    case 'H':
                                    case 'h':
                                        while (!pp.isCommandOrEnd()) {
                                            var newP = new svg.Point((pp.isRelativeCommand() ? pp.current.x : 0) + pp.getScalar(), pp.current.y);
                                            pp.addMarker(newP, pp.current);
                                            pp.current = newP;
                                            bb.addPoint(pp.current.x, pp.current.y);
                                            if (ctx != null) ctx.lineTo(pp.current.x, pp.current.y);
                                        }
                                        break;
                                    case 'V':
                                    case 'v':
                                        while (!pp.isCommandOrEnd()) {
                                            var newP = new svg.Point(pp.current.x, (pp.isRelativeCommand() ? pp.current.y : 0) + pp.getScalar());
                                            pp.addMarker(newP, pp.current);
                                            pp.current = newP;
                                            bb.addPoint(pp.current.x, pp.current.y);
                                            if (ctx != null) ctx.lineTo(pp.current.x, pp.current.y);
                                        }
                                        break;
                                    case 'C':
                                    case 'c':
                                        while (!pp.isCommandOrEnd()) {
                                            var curr = pp.current;
                                            var p1 = pp.getPoint();
                                            var cntrl = pp.getAsControlPoint();
                                            var cp = pp.getAsCurrentPoint();
                                            pp.addMarker(cp, cntrl, p1);
                                            bb.addBezierCurve(curr.x, curr.y, p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                            if (ctx != null) ctx.bezierCurveTo(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        break;
                                    case 'S':
                                    case 's':
                                        while (!pp.isCommandOrEnd()) {
                                            var curr = pp.current;
                                            var p1 = pp.getReflectedControlPoint();
                                            var cntrl = pp.getAsControlPoint();
                                            var cp = pp.getAsCurrentPoint();
                                            pp.addMarker(cp, cntrl, p1);
                                            bb.addBezierCurve(curr.x, curr.y, p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                            if (ctx != null) ctx.bezierCurveTo(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        break;
                                    case 'Q':
                                    case 'q':
                                        while (!pp.isCommandOrEnd()) {
                                            var curr = pp.current;
                                            var cntrl = pp.getAsControlPoint();
                                            var cp = pp.getAsCurrentPoint();
                                            pp.addMarker(cp, cntrl, cntrl);
                                            bb.addQuadraticCurve(curr.x, curr.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                            if (ctx != null) ctx.quadraticCurveTo(cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        break;
                                    case 'T':
                                    case 't':
                                        while (!pp.isCommandOrEnd()) {
                                            var curr = pp.current;
                                            var cntrl = pp.getReflectedControlPoint();
                                            pp.control = cntrl;
                                            var cp = pp.getAsCurrentPoint();
                                            pp.addMarker(cp, cntrl, cntrl);
                                            bb.addQuadraticCurve(curr.x, curr.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                            if (ctx != null) ctx.quadraticCurveTo(cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        break;
                                    case 'A':
                                    case 'a':
                                        while (!pp.isCommandOrEnd()) {
                                            var curr = pp.current;
                                            var rx = pp.getScalar();
                                            var ry = pp.getScalar();
                                            var xAxisRotation = pp.getScalar() * (Math.PI / 180.0);
                                            var largeArcFlag = pp.getScalar();
                                            var sweepFlag = pp.getScalar();
                                            var cp = pp.getAsCurrentPoint();

                                            // Conversion from endpoint to center parameterization
                                            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
                                            // x1', y1'
                                            var currp = new svg.Point(Math.cos(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.sin(xAxisRotation) * (curr.y - cp.y) / 2.0, -Math.sin(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.cos(xAxisRotation) * (curr.y - cp.y) / 2.0);
                                            // adjust radii
                                            var l = Math.pow(currp.x, 2) / Math.pow(rx, 2) + Math.pow(currp.y, 2) / Math.pow(ry, 2);
                                            if (l > 1) {
                                                rx *= Math.sqrt(l);
                                                ry *= Math.sqrt(l);
                                            }
                                            // cx', cy'
                                            var s = (largeArcFlag == sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rx, 2) * Math.pow(ry, 2) - Math.pow(rx, 2) * Math.pow(currp.y, 2) - Math.pow(ry, 2) * Math.pow(currp.x, 2)) / (Math.pow(rx, 2) * Math.pow(currp.y, 2) + Math.pow(ry, 2) * Math.pow(currp.x, 2)));
                                            if (isNaN(s)) s = 0;
                                            var cpp = new svg.Point(s * rx * currp.y / ry, s * -ry * currp.x / rx);
                                            // cx, cy
                                            var centp = new svg.Point((curr.x + cp.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (curr.y + cp.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y);
                                            // vector magnitude
                                            var m = function (v) {
                                                return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
                                            };
                                            // ratio between two vectors
                                            var r = function (u, v) {
                                                return (u[0] * v[0] + u[1] * v[1]) / (m(u) * m(v));
                                            };
                                            // angle between two vectors
                                            var a = function (u, v) {
                                                return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(r(u, v));
                                            };
                                            // initial angle
                                            var a1 = a([1, 0], [(currp.x - cpp.x) / rx, (currp.y - cpp.y) / ry]);
                                            // angle delta
                                            var u = [(currp.x - cpp.x) / rx, (currp.y - cpp.y) / ry];
                                            var v = [(-currp.x - cpp.x) / rx, (-currp.y - cpp.y) / ry];
                                            var ad = a(u, v);
                                            if (r(u, v) <= -1) ad = Math.PI;
                                            if (r(u, v) >= 1) ad = 0;

                                            // for markers
                                            var dir = 1 - sweepFlag ? 1.0 : -1.0;
                                            var ah = a1 + dir * (ad / 2.0);
                                            var halfWay = new svg.Point(centp.x + rx * Math.cos(ah), centp.y + ry * Math.sin(ah));
                                            pp.addMarkerAngle(halfWay, ah - dir * Math.PI / 2);
                                            pp.addMarkerAngle(cp, ah - dir * Math.PI);
                                            bb.addPoint(cp.x, cp.y); // TODO: this is too naive, make it better
                                            if (ctx != null && !isNaN(a1) && !isNaN(ad)) {
                                                var r = rx > ry ? rx : ry;
                                                var sx = rx > ry ? 1 : rx / ry;
                                                var sy = rx > ry ? ry / rx : 1;
                                                ctx.translate(centp.x, centp.y);
                                                ctx.rotate(xAxisRotation);
                                                ctx.scale(sx, sy);
                                                ctx.arc(0, 0, r, a1, a1 + ad, 1 - sweepFlag);
                                                ctx.scale(1 / sx, 1 / sy);
                                                ctx.rotate(-xAxisRotation);
                                                ctx.translate(-centp.x, -centp.y);
                                            }
                                        }
                                        break;
                                    case 'Z':
                                    case 'z':
                                        if (ctx != null) {
                                            // only close path if it is not a straight line
                                            if (bb.x1 !== bb.x2 && bb.y1 !== bb.y2) {
                                                ctx.closePath();
                                            }
                                        }
                                        pp.current = pp.start;
                                }
                            }
                            return bb;
                        };
                        this.getMarkers = function () {
                            var points = this.PathParser.getMarkerPoints();
                            var angles = this.PathParser.getMarkerAngles();
                            var markers = [];
                            for (var i = 0; i < points.length; i++) {
                                markers.push([points[i], angles[i]]);
                            }
                            return markers;
                        };
                    };
                    svg.Element.path.prototype = new svg.Element.PathElementBase();

                    // pattern element
                    svg.Element.pattern = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.createPattern = function (ctx, element, parentOpacityProp) {
                            var width = this.attribute('width').toPixels('x', true);
                            var height = this.attribute('height').toPixels('y', true);

                            // render me using a temporary svg element
                            var tempSvg = new svg.Element.svg();
                            tempSvg.attributes['viewBox'] = new svg.Property('viewBox', this.attribute('viewBox').value);
                            tempSvg.attributes['width'] = new svg.Property('width', width + 'px');
                            tempSvg.attributes['height'] = new svg.Property('height', height + 'px');
                            tempSvg.attributes['transform'] = new svg.Property('transform', this.attribute('patternTransform').value);
                            tempSvg.children = this.children;
                            var c = createCanvas(width, height);
                            var cctx = c.getContext('2d');
                            if (this.attribute('x').hasValue() && this.attribute('y').hasValue()) {
                                cctx.translate(this.attribute('x').toPixels('x', true), this.attribute('y').toPixels('y', true));
                            }
                            if (parentOpacityProp.hasValue()) {
                                this.styles['fill-opacity'] = parentOpacityProp;
                            } else {
                                delete this.styles['fill-opacity'];
                            }

                            // render 3x3 grid so when we transform there's no white space on edges
                            for (var x = -1; x <= 1; x++) {
                                for (var y = -1; y <= 1; y++) {
                                    cctx.save();
                                    tempSvg.attributes['x'] = new svg.Property('x', x * c.width);
                                    tempSvg.attributes['y'] = new svg.Property('y', y * c.height);
                                    tempSvg.render(cctx);
                                    cctx.restore();
                                }
                            }
                            var pattern = ctx.createPattern(c, 'repeat');
                            return pattern;
                        };
                    };
                    svg.Element.pattern.prototype = new svg.Element.ElementBase();

                    // marker element
                    svg.Element.marker = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.baseRender = this.render;
                        this.render = function (ctx, point, angle) {
                            if (!point) {
                                return;
                            }
                            ctx.translate(point.x, point.y);
                            if (this.attribute('orient').valueOrDefault('auto') == 'auto') ctx.rotate(angle);
                            if (this.attribute('markerUnits').valueOrDefault('strokeWidth') == 'strokeWidth') ctx.scale(ctx.lineWidth, ctx.lineWidth);
                            ctx.save();

                            // render me using a temporary svg element
                            var tempSvg = new svg.Element.svg();
                            tempSvg.attributes['viewBox'] = new svg.Property('viewBox', this.attribute('viewBox').value);
                            tempSvg.attributes['refX'] = new svg.Property('refX', this.attribute('refX').value);
                            tempSvg.attributes['refY'] = new svg.Property('refY', this.attribute('refY').value);
                            tempSvg.attributes['width'] = new svg.Property('width', this.attribute('markerWidth').value);
                            tempSvg.attributes['height'] = new svg.Property('height', this.attribute('markerHeight').value);
                            tempSvg.attributes['fill'] = new svg.Property('fill', this.attribute('fill').valueOrDefault('black'));
                            tempSvg.attributes['stroke'] = new svg.Property('stroke', this.attribute('stroke').valueOrDefault('none'));
                            tempSvg.children = this.children;
                            tempSvg.render(ctx);
                            ctx.restore();
                            if (this.attribute('markerUnits').valueOrDefault('strokeWidth') == 'strokeWidth') ctx.scale(1 / ctx.lineWidth, 1 / ctx.lineWidth);
                            if (this.attribute('orient').valueOrDefault('auto') == 'auto') ctx.rotate(-angle);
                            ctx.translate(-point.x, -point.y);
                        };
                    };
                    svg.Element.marker.prototype = new svg.Element.ElementBase();

                    // definitions element
                    svg.Element.defs = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.render = function /* ctx */
                            () {
                            // NOOP
                        };
                    };
                    svg.Element.defs.prototype = new svg.Element.ElementBase();

                    // base for gradients
                    svg.Element.GradientBase = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.stops = [];
                        for (var i = 0; i < this.children.length; i++) {
                            var child = this.children[i];
                            if (child.type == 'stop') this.stops.push(child);
                        }
                        this.getGradient = function () {
                            // OVERRIDE ME!
                        };
                        this.gradientUnits = function () {
                            return this.attribute('gradientUnits').valueOrDefault('objectBoundingBox');
                        };
                        this.attributesToInherit = ['gradientUnits'];
                        this.inheritStopContainer = function (stopsContainer) {
                            for (var i = 0; i < this.attributesToInherit.length; i++) {
                                var attributeToInherit = this.attributesToInherit[i];
                                if (!this.attribute(attributeToInherit).hasValue() && stopsContainer.attribute(attributeToInherit).hasValue()) {
                                    this.attribute(attributeToInherit, true).value = stopsContainer.attribute(attributeToInherit).value;
                                }
                            }
                        };
                        this.createGradient = function (ctx, element, parentOpacityProp) {
                            var stopsContainer = this;
                            if (this.getHrefAttribute().hasValue()) {
                                stopsContainer = this.getHrefAttribute().getDefinition();
                                this.inheritStopContainer(stopsContainer);
                            }
                            var addParentOpacity = function (color) {
                                if (parentOpacityProp.hasValue()) {
                                    var p = new svg.Property('color', color);
                                    return p.addOpacity(parentOpacityProp).value;
                                }
                                return color;
                            };
                            var g = this.getGradient(ctx, element);
                            if (g == null) return addParentOpacity(stopsContainer.stops[stopsContainer.stops.length - 1].color);
                            for (var i = 0; i < stopsContainer.stops.length; i++) {
                                g.addColorStop(stopsContainer.stops[i].offset, addParentOpacity(stopsContainer.stops[i].color));
                            }
                            if (this.attribute('gradientTransform').hasValue()) {
                                // render as transformed pattern on temporary canvas
                                var rootView = svg.ViewPort.viewPorts[0];
                                var rect = new svg.Element.rect();
                                rect.attributes['x'] = new svg.Property('x', -svg.MAX_VIRTUAL_PIXELS / 3.0);
                                rect.attributes['y'] = new svg.Property('y', -svg.MAX_VIRTUAL_PIXELS / 3.0);
                                rect.attributes['width'] = new svg.Property('width', svg.MAX_VIRTUAL_PIXELS);
                                rect.attributes['height'] = new svg.Property('height', svg.MAX_VIRTUAL_PIXELS);
                                var group = new svg.Element.g();
                                group.attributes['transform'] = new svg.Property('transform', this.attribute('gradientTransform').value);
                                group.children = [rect];
                                var tempSvg = new svg.Element.svg();
                                tempSvg.attributes['x'] = new svg.Property('x', 0);
                                tempSvg.attributes['y'] = new svg.Property('y', 0);
                                tempSvg.attributes['width'] = new svg.Property('width', rootView.width);
                                tempSvg.attributes['height'] = new svg.Property('height', rootView.height);
                                tempSvg.children = [group];
                                var c = createCanvas(rootView.width, rootView.height);
                                var tempCtx = c.getContext('2d');
                                tempCtx.fillStyle = g;
                                tempSvg.render(tempCtx);
                                return tempCtx.createPattern(c, 'no-repeat');
                            }
                            return g;
                        };
                    };
                    svg.Element.GradientBase.prototype = new svg.Element.ElementBase();

                    // linear gradient element
                    svg.Element.linearGradient = function (node) {
                        this.base = svg.Element.GradientBase;
                        this.base(node);
                        this.attributesToInherit.push('x1');
                        this.attributesToInherit.push('y1');
                        this.attributesToInherit.push('x2');
                        this.attributesToInherit.push('y2');
                        this.getGradient = function (ctx, element) {
                            var bb = this.gradientUnits() == 'objectBoundingBox' ? element.getBoundingBox(ctx) : null;
                            if (!this.attribute('x1').hasValue() && !this.attribute('y1').hasValue() && !this.attribute('x2').hasValue() && !this.attribute('y2').hasValue()) {
                                this.attribute('x1', true).value = 0;
                                this.attribute('y1', true).value = 0;
                                this.attribute('x2', true).value = 1;
                                this.attribute('y2', true).value = 0;
                            }
                            var x1 = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('x1').numValue() : this.attribute('x1').toPixels('x');
                            var y1 = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('y1').numValue() : this.attribute('y1').toPixels('y');
                            var x2 = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('x2').numValue() : this.attribute('x2').toPixels('x');
                            var y2 = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('y2').numValue() : this.attribute('y2').toPixels('y');
                            if (x1 == x2 && y1 == y2) return null;
                            return ctx.createLinearGradient(x1, y1, x2, y2);
                        };
                    };
                    svg.Element.linearGradient.prototype = new svg.Element.GradientBase();

                    // radial gradient element
                    svg.Element.radialGradient = function (node) {
                        this.base = svg.Element.GradientBase;
                        this.base(node);
                        this.attributesToInherit.push('cx');
                        this.attributesToInherit.push('cy');
                        this.attributesToInherit.push('r');
                        this.attributesToInherit.push('fx');
                        this.attributesToInherit.push('fy');
                        this.attributesToInherit.push('fr');
                        this.getGradient = function (ctx, element) {
                            var bb = element.getBoundingBox(ctx);
                            if (!this.attribute('cx').hasValue()) this.attribute('cx', true).value = '50%';
                            if (!this.attribute('cy').hasValue()) this.attribute('cy', true).value = '50%';
                            if (!this.attribute('r').hasValue()) this.attribute('r', true).value = '50%';
                            var cx = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('cx').numValue() : this.attribute('cx').toPixels('x');
                            var cy = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('cy').numValue() : this.attribute('cy').toPixels('y');
                            var fx = cx;
                            var fy = cy;
                            if (this.attribute('fx').hasValue()) {
                                fx = this.gradientUnits() == 'objectBoundingBox' ? bb.x() + bb.width() * this.attribute('fx').numValue() : this.attribute('fx').toPixels('x');
                            }
                            if (this.attribute('fy').hasValue()) {
                                fy = this.gradientUnits() == 'objectBoundingBox' ? bb.y() + bb.height() * this.attribute('fy').numValue() : this.attribute('fy').toPixels('y');
                            }
                            var r = this.gradientUnits() == 'objectBoundingBox' ? (bb.width() + bb.height()) / 2.0 * this.attribute('r').numValue() : this.attribute('r').toPixels();
                            var fr = this.attribute('fr').toPixels();
                            return ctx.createRadialGradient(fx, fy, fr, cx, cy, r);
                        };
                    };
                    svg.Element.radialGradient.prototype = new svg.Element.GradientBase();

                    // gradient stop element
                    svg.Element.stop = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.offset = this.attribute('offset').numValue();
                        if (this.offset < 0) this.offset = 0;
                        if (this.offset > 1) this.offset = 1;
                        var stopColor = this.style('stop-color', true);
                        if (stopColor.value === '') stopColor.value = '#000';
                        if (this.style('stop-opacity').hasValue()) stopColor = stopColor.addOpacity(this.style('stop-opacity'));
                        this.color = stopColor.value;
                    };
                    svg.Element.stop.prototype = new svg.Element.ElementBase();

                    // animation base element
                    svg.Element.AnimateBase = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        svg.Animations.push(this);
                        this.duration = 0.0;
                        this.begin = this.attribute('begin').toMilliseconds();
                        this.maxDuration = this.begin + this.attribute('dur').toMilliseconds();
                        this.getProperty = function () {
                            var attributeType = this.attribute('attributeType').value;
                            var attributeName = this.attribute('attributeName').value;
                            if (attributeType == 'CSS') {
                                return this.parent.style(attributeName, true);
                            }
                            return this.parent.attribute(attributeName, true);
                        };
                        this.initialValue = null;
                        this.initialUnits = '';
                        this.removed = false;
                        this.calcValue = function () {
                            // OVERRIDE ME!
                            return '';
                        };
                        this.update = function (delta) {
                            // set initial value
                            if (this.initialValue == null) {
                                this.initialValue = this.getProperty().value;
                                this.initialUnits = this.getProperty().getUnits();
                            }

                            // if we're past the end time
                            if (this.duration > this.maxDuration) {
                                // loop for indefinitely repeating animations
                                if (this.attribute('repeatCount').value == 'indefinite' || this.attribute('repeatDur').value == 'indefinite') {
                                    this.duration = 0.0;
                                } else if (this.attribute('fill').valueOrDefault('remove') == 'freeze' && !this.frozen) {
                                    this.frozen = true;
                                    this.parent.animationFrozen = true;
                                    this.parent.animationFrozenValue = this.getProperty().value;
                                } else if (this.attribute('fill').valueOrDefault('remove') == 'remove' && !this.removed) {
                                    this.removed = true;
                                    this.getProperty().value = this.parent.animationFrozen ? this.parent.animationFrozenValue : this.initialValue;
                                    return true;
                                }
                                return false;
                            }
                            this.duration = this.duration + delta;

                            // if we're past the begin time
                            var updated = false;
                            if (this.begin < this.duration) {
                                var newValue = this.calcValue(); // tween

                                if (this.attribute('type').hasValue()) {
                                    // for transform, etc.
                                    var type = this.attribute('type').value;
                                    newValue = type + '(' + newValue + ')';
                                }
                                this.getProperty().value = newValue;
                                updated = true;
                            }
                            return updated;
                        };
                        this.from = this.attribute('from');
                        this.to = this.attribute('to');
                        this.values = this.attribute('values');
                        if (this.values.hasValue()) this.values.value = this.values.value.split(';');

                        // fraction of duration we've covered
                        this.progress = function () {
                            var ret = {
                                progress: (this.duration - this.begin) / (this.maxDuration - this.begin)
                            };
                            if (this.values.hasValue()) {
                                var p = ret.progress * (this.values.value.length - 1);
                                var lb = Math.floor(p),
                                    ub = Math.ceil(p);
                                ret.from = new svg.Property('from', parseFloat(this.values.value[lb]));
                                ret.to = new svg.Property('to', parseFloat(this.values.value[ub]));
                                ret.progress = (p - lb) / (ub - lb);
                            } else {
                                ret.from = this.from;
                                ret.to = this.to;
                            }
                            return ret;
                        };
                    };
                    svg.Element.AnimateBase.prototype = new svg.Element.ElementBase();

                    // animate element
                    svg.Element.animate = function (node) {
                        this.base = svg.Element.AnimateBase;
                        this.base(node);
                        this.calcValue = function () {
                            var p = this.progress();

                            // tween value linearly
                            var newValue = p.from.numValue() + (p.to.numValue() - p.from.numValue()) * p.progress;
                            if (this.initialUnits === '%') {
                                newValue *= 100.0; // numValue() returns 0-1 whereas properties are 0-100
                            }
                            return newValue + this.initialUnits;
                        };
                    };
                    svg.Element.animate.prototype = new svg.Element.AnimateBase();

                    // animate color element
                    svg.Element.animateColor = function (node) {
                        this.base = svg.Element.AnimateBase;
                        this.base(node);
                        this.calcValue = function () {
                            var p = this.progress();
                            var from = new rgbcolor(p.from.value);
                            var to = new rgbcolor(p.to.value);
                            if (from.ok && to.ok) {
                                // tween color linearly
                                var r = from.r + (to.r - from.r) * p.progress;
                                var g = from.g + (to.g - from.g) * p.progress;
                                var b = from.b + (to.b - from.b) * p.progress;
                                return 'rgb(' + parseInt(r, 10) + ',' + parseInt(g, 10) + ',' + parseInt(b, 10) + ')';
                            }
                            return this.attribute('from').value;
                        };
                    };
                    svg.Element.animateColor.prototype = new svg.Element.AnimateBase();

                    // animate transform element
                    svg.Element.animateTransform = function (node) {
                        this.base = svg.Element.AnimateBase;
                        this.base(node);
                        this.calcValue = function () {
                            var p = this.progress();

                            // tween value linearly
                            var from = svg.ToNumberArray(p.from.value);
                            var to = svg.ToNumberArray(p.to.value);
                            var newValue = '';
                            for (var i = 0; i < from.length; i++) {
                                newValue += from[i] + (to[i] - from[i]) * p.progress + ' ';
                            }
                            return newValue;
                        };
                    };
                    svg.Element.animateTransform.prototype = new svg.Element.animate();

                    // font element
                    svg.Element.font = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.horizAdvX = this.attribute('horiz-adv-x').numValue();
                        this.isRTL = false;
                        this.isArabic = false;
                        this.fontFace = null;
                        this.missingGlyph = null;
                        this.glyphs = [];
                        for (var i = 0; i < this.children.length; i++) {
                            var child = this.children[i];
                            if (child.type == 'font-face') {
                                this.fontFace = child;
                                if (child.style('font-family').hasValue()) {
                                    svg.Definitions[child.style('font-family').value] = this;
                                }
                            } else if (child.type == 'missing-glyph') this.missingGlyph = child;else if (child.type == 'glyph') {
                                if (child.arabicForm != '') {
                                    this.isRTL = true;
                                    this.isArabic = true;
                                    if (typeof this.glyphs[child.unicode] == 'undefined') this.glyphs[child.unicode] = [];
                                    this.glyphs[child.unicode][child.arabicForm] = child;
                                } else {
                                    this.glyphs[child.unicode] = child;
                                }
                            }
                        }
                        this.render = function /* ctx */
                            () {
                            // NO RENDER
                        };
                    };
                    svg.Element.font.prototype = new svg.Element.ElementBase();

                    // font-face element
                    svg.Element.fontface = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.ascent = this.attribute('ascent').value;
                        this.descent = this.attribute('descent').value;
                        this.unitsPerEm = this.attribute('units-per-em').numValue();
                    };
                    svg.Element.fontface.prototype = new svg.Element.ElementBase();

                    // missing-glyph element
                    svg.Element.missingglyph = function (node) {
                        this.base = svg.Element.path;
                        this.base(node);
                        this.horizAdvX = 0;
                    };
                    svg.Element.missingglyph.prototype = new svg.Element.path();

                    // glyph element
                    svg.Element.glyph = function (node) {
                        this.base = svg.Element.path;
                        this.base(node);
                        this.horizAdvX = this.attribute('horiz-adv-x').numValue();
                        this.unicode = this.attribute('unicode').value;
                        this.arabicForm = this.attribute('arabic-form').value;
                    };
                    svg.Element.glyph.prototype = new svg.Element.path();

                    // text element
                    svg.Element.text = function (node) {
                        this.captureTextNodes = true;
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.baseSetContext = this.setContext;
                        this.setContext = function (ctx) {
                            this.baseSetContext(ctx);
                            var textBaseline = this.style('dominant-baseline').toTextBaseline();
                            if (textBaseline == null) textBaseline = this.style('alignment-baseline').toTextBaseline();
                            if (textBaseline != null) ctx.textBaseline = textBaseline;
                        };
                        this.initializeCoordinates = function (ctx) {
                            this.x = this.attribute('x').toPixels('x');
                            this.y = this.attribute('y').toPixels('y');
                            if (this.attribute('dx').hasValue()) this.x += this.attribute('dx').toPixels('x');
                            if (this.attribute('dy').hasValue()) this.y += this.attribute('dy').toPixels('y');
                            this.x += this.getAnchorDelta(ctx, this, 0);
                        };
                        this.getBoundingBox = function (ctx) {
                            this.initializeCoordinates(ctx);
                            var bb = null;
                            for (var i = 0; i < this.children.length; i++) {
                                var childBB = this.getChildBoundingBox(ctx, this, this, i);
                                if (bb == null) bb = childBB;else bb.addBoundingBox(childBB);
                            }
                            return bb;
                        };
                        this.renderChildren = function (ctx) {
                            this.initializeCoordinates(ctx);
                            for (var i = 0; i < this.children.length; i++) {
                                this.renderChild(ctx, this, this, i);
                            }
                            svg.Mouse.checkBoundingBox(this, this.getBoundingBox(ctx));
                        };
                        this.getAnchorDelta = function (ctx, parent, startI) {
                            var textAnchor = this.style('text-anchor').valueOrDefault('start');
                            if (textAnchor != 'start') {
                                var width = 0;
                                for (var i = startI; i < parent.children.length; i++) {
                                    var child = parent.children[i];
                                    if (i > startI && child.attribute('x').hasValue()) break; // new group
                                    width += child.measureTextRecursive(ctx);
                                }
                                return -1 * (textAnchor == 'end' ? width : width / 2.0);
                            }
                            return 0;
                        };
                        this.adjustChildCoordinates = function (ctx, textParent, parent, i) {
                            var child = parent.children[i];
                            if (typeof child.measureText !== 'function') {
                                return child;
                            }
                            if (child.attribute('x').hasValue()) {
                                child.x = child.attribute('x').toPixels('x') + textParent.getAnchorDelta(ctx, parent, i);

                                // local text-anchor
                                var textAnchor = child.attribute('text-anchor').valueOrDefault('start');
                                if (textAnchor !== 'start') {
                                    var width = child.measureTextRecursive(ctx);
                                    child.x += -1 * (textAnchor == 'end' ? width : width / 2.0);
                                }
                                if (child.attribute('dx').hasValue()) child.x += child.attribute('dx').toPixels('x');
                            } else {
                                if (child.attribute('dx').hasValue()) textParent.x += child.attribute('dx').toPixels('x');
                                child.x = textParent.x;
                            }
                            textParent.x = child.x + child.measureText(ctx);
                            if (child.attribute('y').hasValue()) {
                                child.y = child.attribute('y').toPixels('y');
                                if (child.attribute('dy').hasValue()) child.y += child.attribute('dy').toPixels('y');
                            } else {
                                if (child.attribute('dy').hasValue()) textParent.y += child.attribute('dy').toPixels('y');
                                child.y = textParent.y;
                            }
                            textParent.y = child.y;
                            return child;
                        };
                        this.getChildBoundingBox = function (ctx, textParent, parent, i) {
                            var child = this.adjustChildCoordinates(ctx, textParent, parent, i);
                            var bb = child.getBoundingBox(ctx);
                            for (var i = 0; i < child.children.length; i++) {
                                var childBB = textParent.getChildBoundingBox(ctx, textParent, child, i);
                                bb.addBoundingBox(childBB);
                            }
                            return bb;
                        };
                        this.renderChild = function (ctx, textParent, parent, i) {
                            var child = this.adjustChildCoordinates(ctx, textParent, parent, i);
                            child.render(ctx);
                            for (var i = 0; i < child.children.length; i++) {
                                textParent.renderChild(ctx, textParent, child, i);
                            }
                        };
                    };
                    svg.Element.text.prototype = new svg.Element.RenderedElementBase();

                    // text base
                    svg.Element.TextElementBase = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.getGlyph = function (font, text, i) {
                            var c = text[i];
                            var glyph = null;
                            if (font.isArabic) {
                                var arabicForm = 'isolated';
                                if ((i == 0 || text[i - 1] == ' ') && i < text.length - 2 && text[i + 1] != ' ') arabicForm = 'terminal';
                                if (i > 0 && text[i - 1] != ' ' && i < text.length - 2 && text[i + 1] != ' ') arabicForm = 'medial';
                                if (i > 0 && text[i - 1] != ' ' && (i == text.length - 1 || text[i + 1] == ' ')) arabicForm = 'initial';
                                if (typeof font.glyphs[c] != 'undefined') {
                                    glyph = font.glyphs[c][arabicForm];
                                    if (glyph == null && font.glyphs[c].type == 'glyph') glyph = font.glyphs[c];
                                }
                            } else {
                                glyph = font.glyphs[c];
                            }
                            if (glyph == null) glyph = font.missingGlyph;
                            return glyph;
                        };
                        this.renderChildren = function (ctx) {
                            var customFont = this.parent.style('font-family').getDefinition();
                            if (customFont != null) {
                                var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);
                                var fontStyle = this.parent.style('font-style').valueOrDefault(svg.Font.Parse(svg.ctx.font).fontStyle);
                                var text = this.getText();
                                if (customFont.isRTL) text = text.split('').reverse().join('');
                                var dx = svg.ToNumberArray(this.parent.attribute('dx').value);
                                for (var i = 0; i < text.length; i++) {
                                    var glyph = this.getGlyph(customFont, text, i);
                                    var scale = fontSize / customFont.fontFace.unitsPerEm;
                                    ctx.translate(this.x, this.y);
                                    ctx.scale(scale, -scale);
                                    var lw = ctx.lineWidth;
                                    ctx.lineWidth = ctx.lineWidth * customFont.fontFace.unitsPerEm / fontSize;
                                    if (fontStyle == 'italic') ctx.transform(1, 0, .4, 1, 0, 0);
                                    glyph.render(ctx);
                                    if (fontStyle == 'italic') ctx.transform(1, 0, -.4, 1, 0, 0);
                                    ctx.lineWidth = lw;
                                    ctx.scale(1 / scale, -1 / scale);
                                    ctx.translate(-this.x, -this.y);
                                    this.x += fontSize * (glyph.horizAdvX || customFont.horizAdvX) / customFont.fontFace.unitsPerEm;
                                    if (typeof dx[i] != 'undefined' && !isNaN(dx[i])) {
                                        this.x += dx[i];
                                    }
                                }
                                return;
                            }
                            if (ctx.paintOrder == 'stroke') {
                                if (ctx.strokeStyle != '') ctx.strokeText(svg.compressSpaces(this.getText()), this.x, this.y);
                                if (ctx.fillStyle != '') ctx.fillText(svg.compressSpaces(this.getText()), this.x, this.y);
                            } else {
                                if (ctx.fillStyle != '') ctx.fillText(svg.compressSpaces(this.getText()), this.x, this.y);
                                if (ctx.strokeStyle != '') ctx.strokeText(svg.compressSpaces(this.getText()), this.x, this.y);
                            }
                        };
                        this.getText = function () {
                            // OVERRIDE ME
                        };
                        this.measureTextRecursive = function (ctx) {
                            var width = this.measureText(ctx);
                            for (var i = 0; i < this.children.length; i++) {
                                width += this.children[i].measureTextRecursive(ctx);
                            }
                            return width;
                        };
                        this.measureText = function (ctx) {
                            var customFont = this.parent.style('font-family').getDefinition();
                            if (customFont != null) {
                                var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);
                                var measure = 0;
                                var text = this.getText();
                                if (customFont.isRTL) text = text.split('').reverse().join('');
                                var dx = svg.ToNumberArray(this.parent.attribute('dx').value);
                                for (var i = 0; i < text.length; i++) {
                                    var glyph = this.getGlyph(customFont, text, i);
                                    measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;
                                    if (typeof dx[i] != 'undefined' && !isNaN(dx[i])) {
                                        measure += dx[i];
                                    }
                                }
                                return measure;
                            }
                            var textToMeasure = svg.compressSpaces(this.getText());
                            if (!ctx.measureText) return textToMeasure.length * 10;
                            ctx.save();
                            this.setContext(ctx, true);
                            var width = ctx.measureText(textToMeasure).width;
                            ctx.restore();
                            return width;
                        };
                        this.getBoundingBox = function (ctx) {
                            var fontSize = this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);
                            return new svg.BoundingBox(this.x, this.y - fontSize, this.x + this.measureText(ctx), this.y);
                        };
                    };
                    svg.Element.TextElementBase.prototype = new svg.Element.RenderedElementBase();

                    // tspan
                    svg.Element.tspan = function (node) {
                        this.captureTextNodes = true;
                        this.base = svg.Element.TextElementBase;
                        this.base(node);
                        this.text = svg.compressSpaces(node.value || node.text || node.textContent || '');
                        this.getText = function () {
                            // if this node has children, then they own the text
                            if (this.children.length > 0) {
                                return '';
                            }
                            return this.text;
                        };
                    };
                    svg.Element.tspan.prototype = new svg.Element.TextElementBase();

                    // tref
                    svg.Element.tref = function (node) {
                        this.base = svg.Element.TextElementBase;
                        this.base(node);
                        this.getText = function () {
                            var element = this.getHrefAttribute().getDefinition();
                            if (element != null) return element.children[0].getText();
                        };
                    };
                    svg.Element.tref.prototype = new svg.Element.TextElementBase();

                    // a element
                    svg.Element.a = function (node) {
                        this.base = svg.Element.TextElementBase;
                        this.base(node);
                        this.hasText = node.childNodes.length > 0;
                        for (var i = 0; i < node.childNodes.length; i++) {
                            if (node.childNodes[i].nodeType != 3) this.hasText = false;
                        }

                        // this might contain text
                        this.text = this.hasText ? node.childNodes[0].value || node.childNodes[0].data : '';
                        this.getText = function () {
                            return this.text;
                        };
                        this.baseRenderChildren = this.renderChildren;
                        this.renderChildren = function (ctx) {
                            if (this.hasText) {
                                // render as text element
                                this.baseRenderChildren(ctx);
                                var fontSize = new svg.Property('fontSize', svg.Font.Parse(svg.ctx.font).fontSize);
                                svg.Mouse.checkBoundingBox(this, new svg.BoundingBox(this.x, this.y - fontSize.toPixels('y'), this.x + this.measureText(ctx), this.y));
                            } else if (this.children.length > 0) {
                                // render as temporary group
                                var g = new svg.Element.g();
                                g.children = this.children;
                                g.parent = this;
                                g.render(ctx);
                            }
                        };
                        this.onclick = function () {
                            windowEnv.open(this.getHrefAttribute().value);
                        };
                        this.onmousemove = function () {
                            svg.ctx.canvas.style.cursor = 'pointer';
                        };
                    };
                    svg.Element.a.prototype = new svg.Element.TextElementBase();

                    // textPath
                    svg.Element.textPath = function (node) {
                        this.base = svg.Element.TextElementBase;
                        this.base(node);
                        var pathElement = this.getHrefAttribute().getDefinition();
                        this.text = svg.compressSpaces(node.value || node.text || node.textContent || '');
                        this.renderChildren = function (ctx) {
                            this.setTextData(ctx);
                            ctx.save();
                            var textDecoration = this.parent.style('text-decoration').value;
                            var fontSize = this.fontSize();
                            var glyphInfo = this.glyphInfo;
                            var fill = ctx.fillStyle;
                            if (textDecoration === 'underline') {
                                ctx.beginPath();
                            }
                            for (var i = 0; i < glyphInfo.length; i++) {
                                var p0 = glyphInfo[i].p0;
                                var p1 = glyphInfo[i].p1;
                                var partialText = glyphInfo[i].text;
                                ctx.save();
                                ctx.translate(p0.x, p0.y);
                                ctx.rotate(glyphInfo[i].rotation);
                                if (ctx.fillStyle != '') ctx.fillText(svg.compressSpaces(partialText), 0, 0);
                                if (ctx.strokeStyle != '') ctx.strokeText(svg.compressSpaces(partialText), 0, 0);
                                ctx.restore();
                                if (textDecoration === 'underline') {
                                    if (i === 0) {
                                        ctx.moveTo(p0.x, p0.y + fontSize / 8);
                                    }
                                    ctx.lineTo(p1.x, p1.y + fontSize / 5);
                                }

                                //// To assist with debugging visually, uncomment following
                                //
                                // ctx.beginPath();
                                // if (i % 2)
                                // 	ctx.strokeStyle = 'red';
                                // else
                                // 	ctx.strokeStyle = 'green';
                                // ctx.moveTo(p0.x, p0.y);
                                // ctx.lineTo(p1.x, p1.y);
                                // ctx.stroke();
                                // ctx.closePath();
                            }
                            if (textDecoration === 'underline') {
                                ctx.lineWidth = fontSize / 20;
                                ctx.strokeStyle = fill;
                                ctx.stroke();
                                ctx.closePath();
                            }
                            ctx.restore();
                        };
                        this.path = function (ctx) {
                            var ca = this.dataArray;
                            if (ctx != null) {
                                ctx.beginPath();
                            }
                            for (var n = 0; n < ca.length; n++) {
                                var c = ca[n].command;
                                var p = ca[n].points;
                                switch (c) {
                                    case 'L':
                                        if (ctx != null) ctx.lineTo(p[0], p[1]);
                                        break;
                                    case 'M':
                                        if (ctx != null) ctx.moveTo(p[0], p[1]);
                                        break;
                                    case 'C':
                                        if (ctx != null) ctx.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
                                        break;
                                    case 'Q':
                                        if (ctx != null) ctx.quadraticCurveTo(p[0], p[1], p[2], p[3]);
                                        break;
                                    case 'A':
                                        var cx = p[0],
                                            cy = p[1],
                                            rx = p[2],
                                            ry = p[3],
                                            theta = p[4],
                                            dTheta = p[5],
                                            psi = p[6],
                                            fs = p[7];
                                        var r = rx > ry ? rx : ry;
                                        var scaleX = rx > ry ? 1 : rx / ry;
                                        var scaleY = rx > ry ? ry / rx : 1;
                                        if (ctx != null) {
                                            ctx.translate(cx, cy);
                                            ctx.rotate(psi);
                                            ctx.scale(scaleX, scaleY);
                                            ctx.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
                                            ctx.scale(1 / scaleX, 1 / scaleY);
                                            ctx.rotate(-psi);
                                            ctx.translate(-cx, -cy);
                                        }
                                        break;
                                    case 'z':
                                        if (ctx != null) ctx.closePath();
                                        break;
                                }
                            }
                        };
                        this.getText = function () {
                            return this.text;
                        };
                        this.fontSize = function () {
                            return this.parent.style('font-size').numValueOrDefault(svg.Font.Parse(svg.ctx.font).fontSize);
                        };
                        this.measureText = function (ctx, text) {
                            var customFont = this.parent.style('font-family').getDefinition();
                            text = text || this.getText();
                            if (customFont != null) {
                                var fontSize = this.fontSize();
                                var measure = 0;
                                if (customFont.isRTL) text = text.split("").reverse().join("");
                                var dx = svg.ToNumberArray(this.parent.attribute('dx').value);
                                for (var i = 0; i < text.length; i++) {
                                    var glyph = this.getGlyph(customFont, text, i);
                                    measure += (glyph.horizAdvX || customFont.horizAdvX) * fontSize / customFont.fontFace.unitsPerEm;
                                    if (typeof dx[i] != 'undefined' && !isNaN(dx[i])) {
                                        measure += dx[i];
                                    }
                                }
                                return measure;
                            }
                            var textToMeasure = svg.compressSpaces(text);
                            if (!ctx.measureText) return textToMeasure.length * 10;
                            ctx.save();
                            this.setContext(ctx);
                            var width = ctx.measureText(textToMeasure).width;
                            ctx.restore();
                            return width;
                        };

                        // This method supposes what all custom fonts already loaded.
                        // If some font will be loaded after this method call, <textPath> will not be rendered correctly.
                        // You need to call this method manually to update glyphs cache.
                        this.setTextData = function (ctx) {
                            if (this.hasOwnProperty('glyphInfo')) return;
                            var that = this;
                            var charArr = this.getText().split('');
                            var spacesNumber = this.getText().split(' ').length - 1;
                            var dx = svg.ToNumberArray(this.parent.attribute('dx').valueOrDefault('0'));
                            var letterSpacing = 0;
                            var anchor = this.parent.style('text-anchor').valueOrDefault('start');
                            var thisSpacing = this.style('letter-spacing');
                            var parentSpacing = this.parent.style('letter-spacing');
                            if (!thisSpacing.hasValue() || thisSpacing.getValue() === 'inherit') {
                                letterSpacing = parentSpacing.toPixels();
                            } else if (thisSpacing.hasValue()) {
                                if (thisSpacing.getValue() !== 'initial' && thisSpacing.getValue() !== 'unset') {
                                    letterSpacing = thisSpacing.toPixels();
                                }
                            }

                            // fill letter-spacing cache
                            this.letterSpacingCache = [];
                            for (var i = 0; i < this.getText().length; i++) {
                                this.letterSpacingCache.push(dx[i] !== undefined ? dx[i] : letterSpacing);
                            }
                            var dxSum = this.letterSpacingCache.reduce(function (acc, cur) {
                                return acc + cur || 0;
                            }, 0);
                            this.textWidth = this.measureText(ctx);
                            this.textHeight = this.fontSize();
                            var textFullWidth = Math.max(this.textWidth + dxSum, 0);
                            this.glyphInfo = [];
                            var fullPathWidth = this.getPathLength();
                            var startOffset = this.style('startOffset').numValueOrDefault(0) * fullPathWidth;
                            var offset = 0;
                            if (anchor === 'middle' || anchor === 'center') {
                                offset = -textFullWidth / 2;
                            }
                            if (anchor === 'end' || anchor === 'right') {
                                offset = -textFullWidth;
                            }
                            offset += startOffset;
                            var getGetterSpacingAt = function (idx) {
                                idx = idx || 0;
                                return that.letterSpacingCache[idx] || 0;
                            };
                            var findSegmentToFitChar = function (c, charI) {
                                var glyphWidth = that.measureText(ctx, c);
                                if (c === ' ' && anchor === 'justify' && textFullWidth < fullPathWidth) {
                                    glyphWidth += (fullPathWidth - textFullWidth) / spacesNumber;
                                }
                                if (charI > -1) {
                                    offset += getGetterSpacingAt(charI);
                                }
                                var splineStep = that.textHeight / 20;
                                var segment = {
                                    p0: that.getEquidistantPointOnPath(offset, splineStep),
                                    p1: that.getEquidistantPointOnPath(offset + glyphWidth, splineStep)
                                };
                                offset += glyphWidth;
                                return segment;
                            };
                            for (var i = 0; i < charArr.length; i++) {
                                // Find such segment what distance between p0 and p1 is approx. width of glyph
                                var segment = findSegmentToFitChar(charArr[i], i);
                                if (segment.p0 === undefined || segment.p1 === undefined) {
                                    continue;
                                }
                                var width = that.getLineLength(segment.p0.x, segment.p0.y, segment.p1.x, segment.p1.y);

                                // Note: Since glyphs are rendered one at a time, any kerning pair data built into the font will not be used.
                                // Can foresee having a rough pair table built in that the developer can override as needed.
                                // Or use "dx" attribute of the <text> node as a naive replacement

                                var kern = 0;
                                // placeholder for future implementation

                                var midpoint = that.getPointOnLine(kern + width / 2.0, segment.p0.x, segment.p0.y, segment.p1.x, segment.p1.y);
                                var rotation = Math.atan2(segment.p1.y - segment.p0.y, segment.p1.x - segment.p0.x);
                                this.glyphInfo.push({
                                    transposeX: midpoint.x,
                                    transposeY: midpoint.y,
                                    text: charArr[i],
                                    rotation: rotation,
                                    p0: segment.p0,
                                    p1: segment.p1
                                });
                            }
                        };
                        this.parsePathData = function (path) {
                            this.pathLength = undefined; // reset path length

                            if (!path) {
                                return [];
                            }
                            var ca = [];
                            var pp = path.PathParser;
                            pp.reset();

                            // convert l, H, h, V, and v to L
                            while (!pp.isEnd()) {
                                var points = [];
                                var cmd = null;
                                var startX = pp.current ? pp.current.x : 0;
                                var startY = pp.current ? pp.current.y : 0;
                                pp.nextCommand();
                                var C = pp.command.toUpperCase();
                                switch (pp.command) {
                                    case 'M':
                                    case 'm':
                                        var p = pp.getAsCurrentPoint();
                                        // pp.addMarker(p);
                                        points.push(p.x, p.y);
                                        pp.start = pp.current;
                                        while (!pp.isCommandOrEnd()) {
                                            var p = pp.getAsCurrentPoint();
                                            points.push(p.x, p.y);
                                            cmd = 'L';
                                        }
                                        break;
                                    case 'L':
                                    case 'l':
                                        while (!pp.isCommandOrEnd()) {
                                            var p = pp.getAsCurrentPoint();
                                            points.push(p.x, p.y);
                                        }
                                        cmd = 'L';
                                        break;
                                    case 'H':
                                    case 'h':
                                        while (!pp.isCommandOrEnd()) {
                                            var newP = new svg.Point((pp.isRelativeCommand() ? pp.current.x : 0) + pp.getScalar(), pp.current.y);
                                            points.push(newP.x, newP.y);
                                            pp.current = newP;
                                        }
                                        cmd = 'L';
                                        break;
                                    case 'V':
                                    case 'v':
                                        while (!pp.isCommandOrEnd()) {
                                            var newP = new svg.Point(pp.current.x, (pp.isRelativeCommand() ? pp.current.y : 0) + pp.getScalar());
                                            points.push(newP.x, newP.y);
                                            pp.current = newP;
                                        }
                                        cmd = 'L';
                                        break;
                                    case 'C':
                                    case 'c':
                                        while (!pp.isCommandOrEnd()) {
                                            var p1 = pp.getPoint();
                                            var cntrl = pp.getAsControlPoint();
                                            var cp = pp.getAsCurrentPoint();
                                            points.push(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        break;
                                    case 'S':
                                    case 's':
                                        while (!pp.isCommandOrEnd()) {
                                            var p1 = pp.getReflectedControlPoint();
                                            var cntrl = pp.getAsControlPoint();
                                            var cp = pp.getAsCurrentPoint();
                                            points.push(p1.x, p1.y, cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        cmd = 'C';
                                        break;
                                    case 'Q':
                                    case 'q':
                                        while (!pp.isCommandOrEnd()) {
                                            var cntrl = pp.getAsControlPoint();
                                            var cp = pp.getAsCurrentPoint();
                                            points.push(cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        break;
                                    case 'T':
                                    case 't':
                                        while (!pp.isCommandOrEnd()) {
                                            var cntrl = pp.getReflectedControlPoint();
                                            pp.control = cntrl;
                                            var cp = pp.getAsCurrentPoint();
                                            points.push(cntrl.x, cntrl.y, cp.x, cp.y);
                                        }
                                        cmd = 'Q';
                                        break;
                                    case 'A':
                                    case 'a':
                                        while (!pp.isCommandOrEnd()) {
                                            var curr = pp.current; // x1, y1
                                            var rx = pp.getScalar();
                                            var ry = pp.getScalar();
                                            var xAxisRotation = pp.getScalar() * (Math.PI / 180.0); // φ
                                            var largeArcFlag = pp.getScalar(); //  fA
                                            var sweepFlag = pp.getScalar(); //  fS
                                            var cp = pp.getAsCurrentPoint(); // x2, y2

                                            // Conversion from endpoint to center parameterization
                                            // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
                                            // x1', y1'
                                            var currp = new svg.Point(Math.cos(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.sin(xAxisRotation) * (curr.y - cp.y) / 2.0, -Math.sin(xAxisRotation) * (curr.x - cp.x) / 2.0 + Math.cos(xAxisRotation) * (curr.y - cp.y) / 2.0);
                                            // adjust radii
                                            var l = Math.pow(currp.x, 2) / Math.pow(rx, 2) + Math.pow(currp.y, 2) / Math.pow(ry, 2);
                                            if (l > 1) {
                                                rx *= Math.sqrt(l);
                                                ry *= Math.sqrt(l);
                                            }
                                            // cx', cy'
                                            var s = (largeArcFlag == sweepFlag ? -1 : 1) * Math.sqrt((Math.pow(rx, 2) * Math.pow(ry, 2) - Math.pow(rx, 2) * Math.pow(currp.y, 2) - Math.pow(ry, 2) * Math.pow(currp.x, 2)) / (Math.pow(rx, 2) * Math.pow(currp.y, 2) + Math.pow(ry, 2) * Math.pow(currp.x, 2)));
                                            if (isNaN(s)) s = 0;
                                            var cpp = new svg.Point(s * rx * currp.y / ry, s * -ry * currp.x / rx);
                                            // cx, cy
                                            var centp = new svg.Point((curr.x + cp.x) / 2.0 + Math.cos(xAxisRotation) * cpp.x - Math.sin(xAxisRotation) * cpp.y, (curr.y + cp.y) / 2.0 + Math.sin(xAxisRotation) * cpp.x + Math.cos(xAxisRotation) * cpp.y);
                                            // vector magnitude
                                            var m = function (v) {
                                                return Math.sqrt(Math.pow(v[0], 2) + Math.pow(v[1], 2));
                                            };
                                            // ratio between two vectors
                                            var r = function (u, v) {
                                                return (u[0] * v[0] + u[1] * v[1]) / (m(u) * m(v));
                                            };
                                            // angle between two vectors
                                            var a = function (u, v) {
                                                return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(r(u, v));
                                            };
                                            // initial angle
                                            var a1 = a([1, 0], [(currp.x - cpp.x) / rx, (currp.y - cpp.y) / ry]); // θ1
                                            // angle delta
                                            var u = [(currp.x - cpp.x) / rx, (currp.y - cpp.y) / ry];
                                            var v = [(-currp.x - cpp.x) / rx, (-currp.y - cpp.y) / ry];
                                            var ad = a(u, v); // Δθ
                                            if (r(u, v) <= -1) ad = Math.PI;
                                            if (r(u, v) >= 1) ad = 0;
                                            if (sweepFlag === 0 && ad > 0) ad = ad - 2 * Math.PI;
                                            if (sweepFlag === 1 && ad < 0) ad = ad + 2 * Math.PI;
                                            points = [centp.x, centp.y, rx, ry, a1, ad, xAxisRotation, sweepFlag];
                                        }
                                        break;
                                    case 'Z':
                                    case 'z':
                                        pp.current = pp.start;
                                }
                                if (C !== 'Z') {
                                    ca.push({
                                        command: cmd || C,
                                        points: points,
                                        start: {
                                            x: startX,
                                            y: startY
                                        },
                                        pathLength: this.calcLength(startX, startY, cmd || C, points)
                                    });
                                } else {
                                    ca.push({
                                        command: 'z',
                                        points: [],
                                        start: undefined,
                                        pathLength: 0
                                    });
                                }
                            }
                            return ca;
                        };
                        this.getPathLength = function () {
                            if (this.pathLength === undefined || this.pathLength === null || isNaN(this.pathLength)) {
                                this.pathLength = 0;
                                for (var l = 0; l < this.dataArray.length; l++) {
                                    if (this.dataArray[l].pathLength > 0) {
                                        this.pathLength += this.dataArray[l].pathLength;
                                    }
                                }
                            }
                            return this.pathLength;
                        };
                        this.getPointOnPath = function (distance) {
                            var cumulativePathLength = 0;
                            var fullLen = this.getPathLength();
                            var p = undefined;
                            if (distance < -0.00005 || distance - 0.00005 > fullLen) return undefined;
                            for (var i = 0; i < this.dataArray.length; i++) {
                                var pathCmd = this.dataArray[i];
                                if (pathCmd && (pathCmd.pathLength < 0.00005 || cumulativePathLength + pathCmd.pathLength + 0.00005 < distance)) {
                                    cumulativePathLength += pathCmd.pathLength;
                                    continue;
                                }
                                var delta = distance - cumulativePathLength;
                                var currentT = undefined;
                                switch (pathCmd.command) {
                                    case 'L':
                                        p = this.getPointOnLine(delta, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.start.x, pathCmd.start.y);
                                        break;
                                    case 'A':
                                        var start = pathCmd.points[4];
                                        // 4 = theta
                                        var dTheta = pathCmd.points[5];
                                        // 5 = dTheta
                                        var end = pathCmd.points[4] + dTheta;
                                        currentT = start + delta / pathCmd.pathLength * dTheta;
                                        if (dTheta < 0 && currentT < end || dTheta >= 0 && currentT > end) {
                                            break;
                                        }
                                        p = this.getPointOnEllipticalArc(pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], currentT, pathCmd.points[6]);
                                        break;
                                    case 'C':
                                        currentT = delta / pathCmd.pathLength;
                                        if (currentT > 1) {
                                            currentT = 1;
                                        }
                                        p = this.getPointOnCubicBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3], pathCmd.points[4], pathCmd.points[5]);
                                        break;
                                    case 'Q':
                                        currentT = delta / pathCmd.pathLength;
                                        if (currentT > 1) {
                                            currentT = 1;
                                        }
                                        p = this.getPointOnQuadraticBezier(currentT, pathCmd.start.x, pathCmd.start.y, pathCmd.points[0], pathCmd.points[1], pathCmd.points[2], pathCmd.points[3]);
                                        break;
                                }
                                if (p !== undefined && p !== {}) {
                                    return p;
                                }
                                break;
                            }
                        };

                        // TODO need some optimisations. possibly build cache only for curved segments?
                        this.buildEquidistantCache = function (step, precision) {
                            var fullLen = this.getPathLength();
                            precision = precision || 0.25; // accuracy vs performance
                            step = step || fullLen / 100;
                            this.equidistantCache = this.equidistantCache || {};
                            if (!this.equidistantCache.hasOwnProperty('points') || this.equidistantCache.step != step || this.equidistantCache.precision != precision) {
                                // Prepare cache
                                this.equidistantCache = {
                                    step: step,
                                    precision: precision,
                                    points: []
                                };
                                // Calculate points
                                var s = 0;
                                for (var l = 0; l <= fullLen; l += precision) {
                                    var p0 = this.getPointOnPath(l),
                                        p1 = this.getPointOnPath(l + precision);
                                    if (p0 === undefined || p1 === undefined) continue;
                                    s += this.getLineLength(p0.x, p0.y, p1.x, p1.y);
                                    if (s >= step) {
                                        this.equidistantCache.points.push({
                                            x: p0.x,
                                            y: p0.y,
                                            distance: l
                                        });
                                        s -= step;
                                    }
                                }
                            }
                        };
                        this.getEquidistantPointOnPath = function (targetDistance, step, precision) {
                            this.buildEquidistantCache(step, precision);
                            if (targetDistance < 0 || targetDistance - this.getPathLength() > 0.00005) return undefined;
                            var idx = Math.round(targetDistance / this.getPathLength() * (this.equidistantCache.points.length - 1));
                            return this.equidistantCache.points[idx] || undefined;
                        };
                        this.getLineLength = function (x1, y1, x2, y2) {
                            return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
                        };
                        this.getPointOnLine = function (dist, P1x, P1y, P2x, P2y, fromX, fromY) {
                            if (fromX === undefined) {
                                fromX = P1x;
                            }
                            if (fromY === undefined) {
                                fromY = P1y;
                            }
                            var m = (P2y - P1y) / (P2x - P1x + 0.00000001);
                            var run = Math.sqrt(dist * dist / (1 + m * m));
                            if (P2x < P1x) {
                                run *= -1;
                            }
                            var rise = m * run;
                            var pt;
                            if (P2x === P1x) {
                                // vertical line
                                pt = {
                                    x: fromX,
                                    y: fromY + rise
                                };
                            } else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {
                                pt = {
                                    x: fromX + run,
                                    y: fromY + rise
                                };
                            } else {
                                var ix, iy;
                                var len = this.getLineLength(P1x, P1y, P2x, P2y);
                                if (len < 0.00000001) {
                                    return undefined;
                                }
                                var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);
                                u = u / (len * len);
                                ix = P1x + u * (P2x - P1x);
                                iy = P1y + u * (P2y - P1y);
                                var pRise = this.getLineLength(fromX, fromY, ix, iy);
                                var pRun = Math.sqrt(dist * dist - pRise * pRise);
                                run = Math.sqrt(pRun * pRun / (1 + m * m));
                                if (P2x < P1x) {
                                    run *= -1;
                                }
                                rise = m * run;
                                pt = {
                                    x: ix + run,
                                    y: iy + rise
                                };
                            }
                            return pt;
                        };
                        this.getPointOnCubicBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
                            function CB1(t) {
                                return t * t * t;
                            }
                            function CB2(t) {
                                return 3 * t * t * (1 - t);
                            }
                            function CB3(t) {
                                return 3 * t * (1 - t) * (1 - t);
                            }
                            function CB4(t) {
                                return (1 - t) * (1 - t) * (1 - t);
                            }
                            var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
                            var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);
                            return {
                                x: x,
                                y: y
                            };
                        };
                        this.getPointOnQuadraticBezier = function (pct, P1x, P1y, P2x, P2y, P3x, P3y) {
                            function QB1(t) {
                                return t * t;
                            }
                            function QB2(t) {
                                return 2 * t * (1 - t);
                            }
                            function QB3(t) {
                                return (1 - t) * (1 - t);
                            }
                            var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
                            var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);
                            return {
                                x: x,
                                y: y
                            };
                        };
                        this.getPointOnEllipticalArc = function (cx, cy, rx, ry, theta, psi) {
                            var cosPsi = Math.cos(psi),
                                sinPsi = Math.sin(psi);
                            var pt = {
                                x: rx * Math.cos(theta),
                                y: ry * Math.sin(theta)
                            };
                            return {
                                x: cx + (pt.x * cosPsi - pt.y * sinPsi),
                                y: cy + (pt.x * sinPsi + pt.y * cosPsi)
                            };
                        };
                        this.calcLength = function (x, y, cmd, points) {
                            var len, p1, p2, t;
                            switch (cmd) {
                                case 'L':
                                    return this.getLineLength(x, y, points[0], points[1]);
                                case 'C':
                                    // Approximates by breaking curve into 100 line segments
                                    len = 0.0;
                                    p1 = this.getPointOnCubicBezier(0, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                                    for (t = 0.01; t <= 1; t += 0.01) {
                                        p2 = this.getPointOnCubicBezier(t, x, y, points[0], points[1], points[2], points[3], points[4], points[5]);
                                        len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                                        p1 = p2;
                                    }
                                    return len;
                                case 'Q':
                                    // Approximates by breaking curve into 100 line segments
                                    len = 0.0;
                                    p1 = this.getPointOnQuadraticBezier(0, x, y, points[0], points[1], points[2], points[3]);
                                    for (t = 0.01; t <= 1; t += 0.01) {
                                        p2 = this.getPointOnQuadraticBezier(t, x, y, points[0], points[1], points[2], points[3]);
                                        len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                                        p1 = p2;
                                    }
                                    return len;
                                case 'A':
                                    // Approximates by breaking curve into line segments
                                    len = 0.0;
                                    var start = points[4];
                                    // 4 = theta
                                    var dTheta = points[5];
                                    // 5 = dTheta
                                    var end = points[4] + dTheta;
                                    var inc = Math.PI / 180.0;
                                    // 1 degree resolution
                                    if (Math.abs(start - end) < inc) {
                                        inc = Math.abs(start - end);
                                    }
                                    // Note: for purpose of calculating arc length, not going to worry about rotating X-axis by angle psi
                                    p1 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
                                    if (dTheta < 0) {
                                        // clockwise
                                        for (t = start - inc; t > end; t -= inc) {
                                            p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                                            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                                            p1 = p2;
                                        }
                                    } else {
                                        // counter-clockwise
                                        for (t = start + inc; t < end; t += inc) {
                                            p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
                                            len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                                            p1 = p2;
                                        }
                                    }
                                    p2 = this.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
                                    len += this.getLineLength(p1.x, p1.y, p2.x, p2.y);
                                    return len;
                            }
                            return 0;
                        };
                        this.dataArray = this.parsePathData(pathElement);
                    };
                    svg.Element.textPath.prototype = new svg.Element.TextElementBase();

                    // image element
                    svg.Element.image = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        var href = this.getHrefAttribute().value;
                        if (href == '') {
                            return;
                        }
                        var isSvg = href.match(/\.svg$/);
                        svg.Images.push(this);
                        this.loaded = false;
                        if (!isSvg) {
                            this.img = doc.createElement('img');
                            if (svg.opts['useCORS'] == true) {
                                this.img.crossOrigin = 'Anonymous';
                            }
                            var self = this;
                            this.img.onload = function () {
                                self.loaded = true;
                            };
                            this.img.onerror = function () {
                                svg.log('ERROR: image "' + href + '" not found');
                                self.loaded = true;
                            };
                            this.img.src = href;
                        } else {
                            this.img = svg.ajax(href);
                            this.loaded = true;
                        }
                        this.renderChildren = function (ctx) {
                            var x = this.attribute('x').toPixels('x');
                            var y = this.attribute('y').toPixels('y');
                            var width = this.attribute('width').toPixels('x');
                            var height = this.attribute('height').toPixels('y');
                            if (width == 0 || height == 0) return;
                            ctx.save();
                            if (isSvg) {
                                ctx.drawSvg(this.img, x, y, width, height);
                            } else {
                                ctx.translate(x, y);
                                svg.AspectRatio(ctx, this.attribute('preserveAspectRatio').value, width, this.img.width, height, this.img.height, 0, 0);
                                if (self.loaded) {
                                    if (this.img.complete === undefined || this.img.complete) {
                                        ctx.drawImage(this.img, 0, 0);
                                    }
                                }
                            }
                            ctx.restore();
                        };
                        this.getBoundingBox = function () {
                            var x = this.attribute('x').toPixels('x');
                            var y = this.attribute('y').toPixels('y');
                            var width = this.attribute('width').toPixels('x');
                            var height = this.attribute('height').toPixels('y');
                            return new svg.BoundingBox(x, y, x + width, y + height);
                        };
                    };
                    svg.Element.image.prototype = new svg.Element.RenderedElementBase();

                    // group element
                    svg.Element.g = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.getBoundingBox = function (ctx) {
                            var bb = new svg.BoundingBox();
                            for (var i = 0; i < this.children.length; i++) {
                                bb.addBoundingBox(this.children[i].getBoundingBox(ctx));
                            }
                            return bb;
                        };
                    };
                    svg.Element.g.prototype = new svg.Element.RenderedElementBase();

                    // symbol element
                    svg.Element.symbol = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.render = function /* ctx */
                            () {
                            // NO RENDER
                        };
                    };
                    svg.Element.symbol.prototype = new svg.Element.RenderedElementBase();
                    svg.ParseExternalUrl = function (url) {
                        //                                 single quotes [2]
                        //                                 v           double quotes [3]
                        //                                 v           v        no quotes [4]
                        //                                 v           v        v
                        var urlMatch = url.match(/url\(('([^']+)'|"([^"]+)"|([^'"\)]+))\)/) || [];
                        return urlMatch[2] || urlMatch[3] || urlMatch[4];
                    };

                    // style element
                    svg.Element.style = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);

                        // text, or spaces then CDATA
                        var css = '';
                        for (var i = 0; i < node.childNodes.length; i++) {
                            css += node.childNodes[i].data;
                        }
                        css = css.replace(/(\/\*([^*]|[\r\n]|(\*+([^*\/]|[\r\n])))*\*+\/)|(^[\s]*\/\/.*)/gm, ''); // remove comments
                        css = svg.compressSpaces(css); // replace whitespace
                        var cssDefs = css.split('}');
                        for (var i = 0; i < cssDefs.length; i++) {
                            if (svg.trim(cssDefs[i]) != '') {
                                var cssDef = cssDefs[i].split('{');
                                var cssClasses = cssDef[0].split(',');
                                var cssProps = cssDef[1].split(';');
                                for (var j = 0; j < cssClasses.length; j++) {
                                    var cssClass = svg.trim(cssClasses[j]);
                                    if (cssClass != '') {
                                        var props = svg.Styles[cssClass] || {};
                                        for (var k = 0; k < cssProps.length; k++) {
                                            var prop = cssProps[k].indexOf(':');
                                            var name = cssProps[k].substr(0, prop);
                                            var value = cssProps[k].substr(prop + 1, cssProps[k].length - prop);
                                            if (name != null && value != null) {
                                                props[svg.trim(name)] = new svg.Property(svg.trim(name), svg.trim(value));
                                            }
                                        }
                                        svg.Styles[cssClass] = props;
                                        svg.StylesSpecificity[cssClass] = getSelectorSpecificity(cssClass);
                                        if (cssClass == '@font-face' && !nodeEnv) {
                                            var fontFamily = props['font-family'].value.replace(/"/g, '');
                                            var srcs = props['src'].value.split(',');
                                            for (var s = 0; s < srcs.length; s++) {
                                                if (srcs[s].indexOf('format("svg")') > 0) {
                                                    var url = svg.ParseExternalUrl(srcs[s]);
                                                    if (url) {
                                                        var doc = svg.parseXml(svg.ajax(url));
                                                        var fonts = doc.getElementsByTagName('font');
                                                        for (var f = 0; f < fonts.length; f++) {
                                                            var font = svg.CreateElement(fonts[f]);
                                                            svg.Definitions[fontFamily] = font;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    };
                    svg.Element.style.prototype = new svg.Element.ElementBase();

                    // use element
                    svg.Element.use = function (node) {
                        this.base = svg.Element.RenderedElementBase;
                        this.base(node);
                        this.baseSetContext = this.setContext;
                        this.setContext = function (ctx) {
                            this.baseSetContext(ctx);
                            if (this.attribute('x').hasValue()) ctx.translate(this.attribute('x').toPixels('x'), 0);
                            if (this.attribute('y').hasValue()) ctx.translate(0, this.attribute('y').toPixels('y'));
                        };
                        var element = this.getHrefAttribute().getDefinition();
                        this.path = function (ctx) {
                            if (element != null) element.path(ctx);
                        };
                        this.elementTransform = function () {
                            if (element != null && element.style('transform', false, true).hasValue()) {
                                return new svg.Transform(element.style('transform', false, true).value);
                            }
                        };
                        this.getBoundingBox = function (ctx) {
                            if (element != null) return element.getBoundingBox(ctx);
                        };
                        this.renderChildren = function (ctx) {
                            if (element != null) {
                                var tempSvg = element;
                                if (element.type == 'symbol') {
                                    // render me using a temporary svg element in symbol cases (http://www.w3.org/TR/SVG/struct.html#UseElement)
                                    tempSvg = new svg.Element.svg();
                                    tempSvg.type = 'svg';
                                    tempSvg.attributes['viewBox'] = new svg.Property('viewBox', element.attribute('viewBox').value);
                                    tempSvg.attributes['preserveAspectRatio'] = new svg.Property('preserveAspectRatio', element.attribute('preserveAspectRatio').value);
                                    tempSvg.attributes['overflow'] = new svg.Property('overflow', element.attribute('overflow').value);
                                    tempSvg.children = element.children;
                                }
                                if (tempSvg.type == 'svg') {
                                    // if symbol or svg, inherit width/height from me
                                    if (this.attribute('width').hasValue()) tempSvg.attributes['width'] = new svg.Property('width', this.attribute('width').value);
                                    if (this.attribute('height').hasValue()) tempSvg.attributes['height'] = new svg.Property('height', this.attribute('height').value);
                                }
                                var oldParent = tempSvg.parent;
                                tempSvg.parent = null;
                                tempSvg.render(ctx);
                                tempSvg.parent = oldParent;
                            }
                        };
                    };
                    svg.Element.use.prototype = new svg.Element.RenderedElementBase();

                    // mask element
                    svg.Element.mask = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.apply = function (ctx, element) {
                            // render as temp svg
                            var x = this.attribute('x').toPixels('x');
                            var y = this.attribute('y').toPixels('y');
                            var width = this.attribute('width').toPixels('x');
                            var height = this.attribute('height').toPixels('y');
                            if (width == 0 && height == 0) {
                                var bb = new svg.BoundingBox();
                                for (var i = 0; i < this.children.length; i++) {
                                    bb.addBoundingBox(this.children[i].getBoundingBox(ctx));
                                }
                                var x = Math.floor(bb.x1);
                                var y = Math.floor(bb.y1);
                                var width = Math.floor(bb.width());
                                var height = Math.floor(bb.height());
                            }

                            // temporarily remove mask to avoid recursion
                            var mask = element.style('mask').value;
                            element.style('mask').value = '';
                            var cMask = createCanvas(x + width, y + height);
                            var maskCtx = cMask.getContext('2d');
                            svg.SetDefaults(maskCtx);
                            this.renderChildren(maskCtx);

                            // convert mask to alpha with a fake node
                            // TODO: refactor out apply from feColorMatrix
                            var cm = new svg.Element.feColorMatrix({
                                nodeType: 1,
                                childNodes: [],
                                attributes: [{
                                    nodeName: 'type',
                                    value: 'luminanceToAlpha'
                                }, {
                                    nodeName: 'includeOpacity',
                                    value: 'true'
                                }]
                            });
                            cm.apply(maskCtx, 0, 0, x + width, y + height);
                            var c = createCanvas(x + width, y + height);
                            var tempCtx = c.getContext('2d');
                            svg.SetDefaults(tempCtx);
                            element.render(tempCtx);
                            tempCtx.globalCompositeOperation = 'destination-in';
                            tempCtx.fillStyle = maskCtx.createPattern(cMask, 'no-repeat');
                            tempCtx.fillRect(0, 0, x + width, y + height);
                            ctx.fillStyle = tempCtx.createPattern(c, 'no-repeat');
                            ctx.fillRect(0, 0, x + width, y + height);

                            // reassign mask
                            element.style('mask').value = mask;
                        };
                        this.render = function /* ctx */
                            () {
                            // NO RENDER
                        };
                    };
                    svg.Element.mask.prototype = new svg.Element.ElementBase();

                    // clip element
                    svg.Element.clipPath = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.apply = function (ctx) {
                            var hasContext2D = typeof CanvasRenderingContext2D !== 'undefined';
                            var oldBeginPath = ctx.beginPath;
                            var oldClosePath = ctx.closePath;
                            if (hasContext2D) {
                                CanvasRenderingContext2D.prototype.beginPath = function () {};
                                CanvasRenderingContext2D.prototype.closePath = function () {};
                            }
                            oldBeginPath.call(ctx);
                            for (var i = 0; i < this.children.length; i++) {
                                var child = this.children[i];
                                if (typeof child.path != 'undefined') {
                                    var transform = typeof child.elementTransform != 'undefined' && child.elementTransform(); // handle <use />
                                    if (!transform && child.style('transform', false, true).hasValue()) {
                                        transform = new svg.Transform(child.style('transform', false, true).value);
                                    }
                                    if (transform) {
                                        transform.apply(ctx);
                                    }
                                    child.path(ctx);
                                    if (hasContext2D) {
                                        CanvasRenderingContext2D.prototype.closePath = oldClosePath;
                                    }
                                    if (transform) {
                                        transform.unapply(ctx);
                                    }
                                }
                            }
                            oldClosePath.call(ctx);
                            ctx.clip();
                            if (hasContext2D) {
                                CanvasRenderingContext2D.prototype.beginPath = oldBeginPath;
                                CanvasRenderingContext2D.prototype.closePath = oldClosePath;
                            }
                        };
                        this.render = function /* ctx */
                            () {
                            // NO RENDER
                        };
                    };
                    svg.Element.clipPath.prototype = new svg.Element.ElementBase();

                    // filters
                    svg.Element.filter = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.apply = function (ctx, element) {
                            // render as temp svg
                            var bb = element.getBoundingBox(ctx);
                            var x = Math.floor(bb.x1);
                            var y = Math.floor(bb.y1);
                            var width = Math.floor(bb.width());
                            var height = Math.floor(bb.height());

                            // temporarily remove filter to avoid recursion
                            var filter = element.style('filter').value;
                            element.style('filter').value = '';
                            var px = 0,
                                py = 0;
                            for (var i = 0; i < this.children.length; i++) {
                                var efd = this.children[i].extraFilterDistance || 0;
                                px = Math.max(px, efd);
                                py = Math.max(py, efd);
                            }
                            var c = createCanvas(width + 2 * px, height + 2 * py);
                            var tempCtx = c.getContext('2d');
                            svg.SetDefaults(tempCtx);
                            tempCtx.translate(-x + px, -y + py);
                            element.render(tempCtx);

                            // apply filters
                            for (var i = 0; i < this.children.length; i++) {
                                if (typeof this.children[i].apply == 'function') {
                                    this.children[i].apply(tempCtx, 0, 0, width + 2 * px, height + 2 * py);
                                }
                            }

                            // render on me
                            ctx.drawImage(c, 0, 0, width + 2 * px, height + 2 * py, x - px, y - py, width + 2 * px, height + 2 * py);

                            // reassign filter
                            element.style('filter', true).value = filter;
                        };
                        this.render = function /* ctx */
                            () {
                            // NO RENDER
                        };
                    };
                    svg.Element.filter.prototype = new svg.Element.ElementBase();
                    svg.Element.feDropShadow = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.addStylesFromStyleDefinition();
                        this.apply = function /* ctx, x, y, width, height */
                            () {
                            // TODO: implement
                        };
                    };
                    svg.Element.feDropShadow.prototype = new svg.Element.ElementBase();
                    svg.Element.feMorphology = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.apply = function /* ctx, x, y, width, height */
                            () {
                            // TODO: implement
                        };
                    };
                    svg.Element.feMorphology.prototype = new svg.Element.ElementBase();
                    svg.Element.feComposite = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.apply = function /* ctx, x, y, width, height */
                            () {
                            // TODO: implement
                        };
                    };
                    svg.Element.feComposite.prototype = new svg.Element.ElementBase();
                    svg.Element.feColorMatrix = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        var matrix = svg.ToNumberArray(this.attribute('values').value);
                        switch (this.attribute('type').valueOrDefault('matrix')) {
                            // http://www.w3.org/TR/SVG/filters.html#feColorMatrixElement
                            case 'saturate':
                                var s = matrix[0];
                                matrix = [0.213 + 0.787 * s, 0.715 - 0.715 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 + 0.285 * s, 0.072 - 0.072 * s, 0, 0, 0.213 - 0.213 * s, 0.715 - 0.715 * s, 0.072 + 0.928 * s, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
                                break;
                            case 'hueRotate':
                                var a = matrix[0] * Math.PI / 180.0;
                                var c = function (m1, m2, m3) {
                                    return m1 + Math.cos(a) * m2 + Math.sin(a) * m3;
                                };
                                matrix = [c(0.213, 0.787, -0.213), c(0.715, -0.715, -0.715), c(0.072, -0.072, 0.928), 0, 0, c(0.213, -0.213, 0.143), c(0.715, 0.285, 0.140), c(0.072, -0.072, -0.283), 0, 0, c(0.213, -0.213, -0.787), c(0.715, -0.715, 0.715), c(0.072, 0.928, 0.072), 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1];
                                break;
                            case 'luminanceToAlpha':
                                matrix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.2125, 0.7154, 0.0721, 0, 0, 0, 0, 0, 0, 1];
                                break;
                        }
                        function imGet(img, x, y, width, height, rgba) {
                            return img[y * width * 4 + x * 4 + rgba];
                        }
                        function imSet(img, x, y, width, height, rgba, val) {
                            img[y * width * 4 + x * 4 + rgba] = val;
                        }
                        function m(i, v) {
                            var mi = matrix[i];
                            return mi * (mi < 0 ? v - 255 : v);
                        }
                        var includeOpacity = this.attribute('includeOpacity').hasValue();
                        this.apply = function (ctx, x, y, width, height) {
                            // assuming x==0 && y==0 for now
                            var srcData = ctx.getImageData(0, 0, width, height);
                            for (var y = 0; y < height; y++) {
                                for (var x = 0; x < width; x++) {
                                    var r = imGet(srcData.data, x, y, width, height, 0);
                                    var g = imGet(srcData.data, x, y, width, height, 1);
                                    var b = imGet(srcData.data, x, y, width, height, 2);
                                    var a = imGet(srcData.data, x, y, width, height, 3);
                                    var nr = m(0, r) + m(1, g) + m(2, b) + m(3, a) + m(4, 1);
                                    var ng = m(5, r) + m(6, g) + m(7, b) + m(8, a) + m(9, 1);
                                    var nb = m(10, r) + m(11, g) + m(12, b) + m(13, a) + m(14, 1);
                                    var na = m(15, r) + m(16, g) + m(17, b) + m(18, a) + m(19, 1);
                                    if (includeOpacity) {
                                        nr = ng = nb = 0;
                                        na *= a / 255;
                                    }
                                    imSet(srcData.data, x, y, width, height, 0, nr);
                                    imSet(srcData.data, x, y, width, height, 1, ng);
                                    imSet(srcData.data, x, y, width, height, 2, nb);
                                    imSet(srcData.data, x, y, width, height, 3, na);
                                }
                            }
                            ctx.clearRect(0, 0, width, height);
                            ctx.putImageData(srcData, 0, 0);
                        };
                    };
                    svg.Element.feColorMatrix.prototype = new svg.Element.ElementBase();
                    svg.Element.feGaussianBlur = function (node) {
                        this.base = svg.Element.ElementBase;
                        this.base(node);
                        this.blurRadius = Math.floor(this.attribute('stdDeviation').numValue());
                        this.extraFilterDistance = this.blurRadius;
                        this.apply = function (ctx, x, y, width, height) {
                            if (!stackblurCanvas || typeof stackblurCanvas.canvasRGBA === 'undefined') {
                                svg.log('ERROR: StackBlur.js must be included for blur to work');
                                return;
                            }

                            // StackBlur requires canvas be on document
                            ctx.canvas.id = svg.UniqueId();
                            {
                                ctx.canvas.style.display = 'none';
                                doc.body.appendChild(ctx.canvas);
                            }
                            stackblurCanvas.canvasRGBA(ctx.canvas, x, y, width, height, this.blurRadius);
                            {
                                doc.body.removeChild(ctx.canvas);
                            }
                        };
                    };
                    svg.Element.feGaussianBlur.prototype = new svg.Element.ElementBase();

                    // title element, do nothing
                    svg.Element.title = function /* node */ () {};
                    svg.Element.title.prototype = new svg.Element.ElementBase();

                    // desc element, do nothing
                    svg.Element.desc = function /* node */ () {};
                    svg.Element.desc.prototype = new svg.Element.ElementBase();
                    svg.Element.MISSING = function (node) {
                        svg.log('ERROR: Element \'' + node.nodeName + '\' not yet implemented.');
                    };
                    svg.Element.MISSING.prototype = new svg.Element.ElementBase();

                    // element factory
                    svg.CreateElement = function (node) {
                        var className = node.nodeName.replace(/^[^:]+:/, ''); // remove namespace
                        className = className.replace(/\-/g, ''); // remove dashes
                        var e = null;
                        if (typeof svg.Element[className] != 'undefined') {
                            e = new svg.Element[className](node);
                        } else {
                            e = new svg.Element.MISSING(node);
                        }
                        e.type = node.nodeName;
                        return e;
                    };

                    // load from url
                    svg.load = function (ctx, url) {
                        svg.loadXml(ctx, svg.ajax(url));
                    };

                    // load from xml
                    svg.loadXml = function (ctx, xml) {
                        svg.loadXmlDoc(ctx, svg.parseXml(xml));
                    };
                    svg.loadXmlDoc = function (ctx, dom) {
                        svg.init(ctx);
                        var mapXY = function (p) {
                            var e = ctx.canvas;
                            while (e) {
                                p.x -= e.offsetLeft;
                                p.y -= e.offsetTop;
                                e = e.offsetParent;
                            }
                            if (windowEnv.scrollX) p.x += windowEnv.scrollX;
                            if (windowEnv.scrollY) p.y += windowEnv.scrollY;
                            return p;
                        };

                        // bind mouse
                        if (svg.opts['ignoreMouse'] != true) {
                            ctx.canvas.onclick = function (e) {
                                var p = mapXY(new svg.Point(e != null ? e.clientX : event.clientX, e != null ? e.clientY : event.clientY));
                                svg.Mouse.onclick(p.x, p.y);
                            };
                            ctx.canvas.onmousemove = function (e) {
                                var p = mapXY(new svg.Point(e != null ? e.clientX : event.clientX, e != null ? e.clientY : event.clientY));
                                svg.Mouse.onmousemove(p.x, p.y);
                            };
                        }
                        var e = svg.CreateElement(dom.documentElement);
                        e.root = true;
                        e.addStylesFromStyleDefinition();

                        // render loop
                        var isFirstRender = true;
                        var draw = function () {
                            svg.ViewPort.Clear();
                            if (ctx.canvas.parentNode) {
                                svg.ViewPort.SetCurrent(ctx.canvas.parentNode.clientWidth, ctx.canvas.parentNode.clientHeight);
                            } else {
                                svg.ViewPort.SetCurrent(defaultClientWidth, defaultClientHeight);
                            }
                            if (svg.opts['ignoreDimensions'] != true && (isFirstRender || svg.opts['scaleWidth'] == null && svg.opts['scaleHeight'] == null)) {
                                // set canvas size
                                if (e.style('width').hasValue()) {
                                    ctx.canvas.width = e.style('width').toPixels('x');
                                    if (ctx.canvas.style) {
                                        ctx.canvas.style.width = ctx.canvas.width + 'px';
                                    }
                                }
                                if (e.style('height').hasValue()) {
                                    ctx.canvas.height = e.style('height').toPixels('y');
                                    if (ctx.canvas.style) {
                                        ctx.canvas.style.height = ctx.canvas.height + 'px';
                                    }
                                }
                            }
                            var cWidth = ctx.canvas.clientWidth || ctx.canvas.width;
                            var cHeight = ctx.canvas.clientHeight || ctx.canvas.height;
                            if (svg.opts['ignoreDimensions'] == true && e.style('width').hasValue() && e.style('height').hasValue()) {
                                cWidth = e.style('width').toPixels('x');
                                cHeight = e.style('height').toPixels('y');
                            }
                            svg.ViewPort.SetCurrent(cWidth, cHeight);
                            if (svg.opts['offsetX'] != null) e.attribute('x', true).value = svg.opts['offsetX'];
                            if (svg.opts['offsetY'] != null) e.attribute('y', true).value = svg.opts['offsetY'];
                            if (svg.opts['scaleWidth'] != null || svg.opts['scaleHeight'] != null) {
                                var xRatio = null,
                                    yRatio = null,
                                    viewBox = svg.ToNumberArray(e.attribute('viewBox').value);
                                if (svg.opts['scaleWidth'] != null) {
                                    if (e.attribute('width').hasValue()) xRatio = e.attribute('width').toPixels('x') / svg.opts['scaleWidth'];else if (!isNaN(viewBox[2])) xRatio = viewBox[2] / svg.opts['scaleWidth'];
                                }
                                if (svg.opts['scaleHeight'] != null) {
                                    if (e.attribute('height').hasValue()) yRatio = e.attribute('height').toPixels('y') / svg.opts['scaleHeight'];else if (!isNaN(viewBox[3])) yRatio = viewBox[3] / svg.opts['scaleHeight'];
                                }
                                if (xRatio == null) {
                                    xRatio = yRatio;
                                }
                                if (yRatio == null) {
                                    yRatio = xRatio;
                                }
                                e.attribute('width', true).value = svg.opts['scaleWidth'];
                                e.attribute('height', true).value = svg.opts['scaleHeight'];
                                e.style('transform', true, true).value += ' scale(' + 1.0 / xRatio + ',' + 1.0 / yRatio + ')';
                            }

                            // clear and render
                            if (svg.opts['ignoreClear'] != true) {
                                ctx.clearRect(0, 0, cWidth, cHeight);
                            }
                            e.render(ctx);
                            if (isFirstRender) {
                                isFirstRender = false;
                                if (typeof svg.opts['renderCallback'] == 'function') svg.opts['renderCallback'](dom);
                            }
                        };
                        var waitingForImages = true;
                        if (svg.ImagesLoaded()) {
                            waitingForImages = false;
                            draw();
                        }
                        {
                            //In node, in the most cases, we don't need the animation listener.
                            svg.intervalID = setInterval(function () {
                                var needUpdate = false;
                                if (waitingForImages && svg.ImagesLoaded()) {
                                    waitingForImages = false;
                                    needUpdate = true;
                                }

                                // need update from mouse events?
                                if (svg.opts['ignoreMouse'] != true) {
                                    needUpdate = needUpdate || svg.Mouse.hasEvents();
                                }

                                // need update from animations?
                                if (svg.opts['ignoreAnimation'] != true) {
                                    for (var i = 0; i < svg.Animations.length; i++) {
                                        var needAnimationUpdate = svg.Animations[i].update(1000 / svg.FRAMERATE);
                                        needUpdate = needUpdate || needAnimationUpdate;
                                    }
                                }

                                // need update from redraw?
                                if (typeof svg.opts['forceRedraw'] == 'function') {
                                    if (svg.opts['forceRedraw']() == true) needUpdate = true;
                                }

                                // render if needed
                                if (needUpdate) {
                                    draw();
                                    svg.Mouse.runEvents(); // run and clear our events
                                }
                            }, 1000 / svg.FRAMERATE);
                        }
                    };
                    svg.stop = function () {
                        if (svg.intervalID) {
                            clearInterval(svg.intervalID);
                        }
                    };
                    svg.Mouse = new function () {
                        this.events = [];
                        this.hasEvents = function () {
                            return this.events.length != 0;
                        };
                        this.onclick = function (x, y) {
                            this.events.push({
                                type: 'onclick',
                                x: x,
                                y: y,
                                run: function (e) {
                                    if (e.onclick) e.onclick();
                                }
                            });
                        };
                        this.onmousemove = function (x, y) {
                            this.events.push({
                                type: 'onmousemove',
                                x: x,
                                y: y,
                                run: function (e) {
                                    if (e.onmousemove) e.onmousemove();
                                }
                            });
                        };
                        this.eventElements = [];
                        this.checkPath = function (element, ctx) {
                            for (var i = 0; i < this.events.length; i++) {
                                var e = this.events[i];
                                if (ctx.isPointInPath && ctx.isPointInPath(e.x, e.y)) this.eventElements[i] = element;
                            }
                        };
                        this.checkBoundingBox = function (element, bb) {
                            if (!bb) {
                                return;
                            }
                            for (var i = 0; i < this.events.length; i++) {
                                var e = this.events[i];
                                if (bb.isPointInBox(e.x, e.y)) this.eventElements[i] = element;
                            }
                        };
                        this.runEvents = function () {
                            svg.ctx.canvas.style.cursor = '';
                            for (var i = 0; i < this.events.length; i++) {
                                var e = this.events[i];
                                var element = this.eventElements[i];
                                while (element) {
                                    e.run(element);
                                    element = element.parent;
                                }
                            }

                            // done running, clear
                            this.events = [];
                            this.eventElements = [];
                        };
                    }();
                    return svg;
                }
                if (typeof CanvasRenderingContext2D != 'undefined') {
                    CanvasRenderingContext2D.prototype.drawSvg = function (s, dx, dy, dw, dh, opts) {
                        var cOpts = {
                            ignoreMouse: true,
                            ignoreAnimation: true,
                            ignoreDimensions: true,
                            ignoreClear: true,
                            offsetX: dx,
                            offsetY: dy,
                            scaleWidth: dw,
                            scaleHeight: dh
                        };
                        for (var prop in opts) {
                            if (opts.hasOwnProperty(prop)) {
                                cOpts[prop] = opts[prop];
                            }
                        }
                        canvg(this.canvas, s, cOpts);
                    };
                }

                // for tests
                canvg._build = build;
                module.exports = canvg;
            });
            return canvg_1;
        });
    });

    function identity$a (x) {
        return x;
    }

    function transform$2 (transform) {
        if (transform == null) return identity$a;
        var x0,
            y0,
            kx = transform.scale[0],
            ky = transform.scale[1],
            dx = transform.translate[0],
            dy = transform.translate[1];
        return function (input, i) {
            if (!i) x0 = y0 = 0;
            var j = 2,
                n = input.length,
                output = new Array(n);
            output[0] = (x0 += input[0]) * kx + dx;
            output[1] = (y0 += input[1]) * ky + dy;
            while (j < n) output[j] = input[j], ++j;
            return output;
        };
    }

    function reverse$1 (array, n) {
        var t,
            j = array.length,
            i = j - n;
        while (i < --j) t = array[i], array[i++] = array[j], array[j] = t;
    }

    function feature (topology, o) {
        return o.type === "GeometryCollection" ? {
            type: "FeatureCollection",
            features: o.geometries.map(function (o) {
                return feature$1(topology, o);
            })
        } : feature$1(topology, o);
    }
    function feature$1(topology, o) {
        var id = o.id,
            bbox = o.bbox,
            properties = o.properties == null ? {} : o.properties,
            geometry = object$2(topology, o);
        return id == null && bbox == null ? {
            type: "Feature",
            properties: properties,
            geometry: geometry
        } : bbox == null ? {
            type: "Feature",
            id: id,
            properties: properties,
            geometry: geometry
        } : {
            type: "Feature",
            id: id,
            bbox: bbox,
            properties: properties,
            geometry: geometry
        };
    }
    function object$2(topology, o) {
        var transformPoint = transform$2(topology.transform),
            arcs = topology.arcs;
        function arc(i, points) {
            if (points.length) points.pop();
            for (var a = arcs[i < 0 ? ~i : i], k = 0, n = a.length; k < n; ++k) {
                points.push(transformPoint(a[k], k));
            }
            if (i < 0) reverse$1(points, n);
        }
        function point(p) {
            return transformPoint(p);
        }
        function line(arcs) {
            var points = [];
            for (var i = 0, n = arcs.length; i < n; ++i) arc(arcs[i], points);
            if (points.length < 2) points.push(points[0]); // This should never happen per the specification.
            return points;
        }
        function ring(arcs) {
            var points = line(arcs);
            while (points.length < 4) points.push(points[0]); // This may happen if an arc has only two points.
            return points;
        }
        function polygon(arcs) {
            return arcs.map(ring);
        }
        function geometry(o) {
            var type = o.type,
                coordinates;
            switch (type) {
                case "GeometryCollection":
                    return {
                        type: type,
                        geometries: o.geometries.map(geometry)
                    };
                case "Point":
                    coordinates = point(o.coordinates);
                    break;
                case "MultiPoint":
                    coordinates = o.coordinates.map(point);
                    break;
                case "LineString":
                    coordinates = line(o.arcs);
                    break;
                case "MultiLineString":
                    coordinates = o.arcs.map(line);
                    break;
                case "Polygon":
                    coordinates = polygon(o.arcs);
                    break;
                case "MultiPolygon":
                    coordinates = o.arcs.map(polygon);
                    break;
                default:
                    return null;
            }
            return {
                type: type,
                coordinates: coordinates
            };
        }
        return geometry(o);
    }

    // Computes the bounding box of the specified hash of GeoJSON objects.

    // TODO if quantized, use simpler Int32 hashing?

    // Given an array of arcs in absolute (but already quantized!) coordinates,

    // Extracts the lines and rings from the specified hash of geometry objects.

    // Given a hash of GeoJSON objects, returns a hash of GeoJSON geometry objects.

    var pi$4 = Math.PI;

    var numericMetrics = {
        data: [],
        svg: '',
        valueLine: '',
        margin: {},
        width: null,
        height: null,
        dataSectionIndex: '',
        dataCounts: '',
        yScale: '',
        xScale: '',
        selectedTabs: '',
        selectedSections: [],
        dataMonths: '',
        dataDates: '',
        x_axis: '',
        y_axis: '',
        selectedTabDataTitle: '',
        tooltip: '',
        svgContainerWidth: 0,
        mapSVG: '',
        mapWidth: 0,
        mapHeight: 0,
        container: '',
        containerIndex: 0,
        init: function init(index, data) {
            common.init({
                widget: this,
                selector: 'numeric-metrics'
            });
            numericMetrics.containerIndex = index;
            common.setContainers();
            numericMetrics.control(data);
            chart.init(data);
            chart.downloadCSV();
            numericMetrics.map.init();
        },
        control: function control(data) {
            var _this = this;
            var navLinks = common.widget.container.querySelector(".metrics-header").querySelectorAll("a.metrics-nav__item-link"),
                periodLinks = common.widget.container.querySelectorAll('.metrics-tabs__item-link'),
                mapLinks = common.widget.container.querySelectorAll('.numeric-metrics__map > .metrics-header a.metrics-nav__item-link'),
                downloadPng = common.widget.container.querySelector('.metrics-menu__dropdown-item--PNG > a.metrics-menu__dropdown-link');
            downloadPng.addEventListener('click', function (e) {
                e.preventDefault();
                common.init({
                    widget: _this,
                    selector: 'numeric-metrics'
                });
                common.setContainers(e.currentTarget);
                chart.eventUpdate();
                chart.downloadPNG();
            });
            navLinks.forEach(function (navLink) {
                navLink.addEventListener('click', function (e) {
                    common.init({
                        widget: _this,
                        selector: 'numeric-metrics'
                    });
                    common.setContainers(e.currentTarget);
                    common.firstNDays();
                    nav.handler(e);
                    chart.eventUpdate();
                    chart.reset(e);
                });
            });
            periodLinks.length && periodLinks.forEach(function (periodLink) {
                periodLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    common.init({
                        widget: _this,
                        selector: 'numeric-metrics'
                    });
                    tabs.thisTab = e.currentTarget;
                    if (!tabs.thisTab.classList.contains('metrics-selected--js')) {
                        tabs.init();
                        chart.reset(e);
                    }
                });
            });
            mapLinks.forEach(function (mapLink) {
                mapLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    common.init({
                        widget: _this,
                        selector: 'numeric-metrics'
                    });
                    var $this = e.currentTarget,
                        selectedMapTab = $this.dataset.title;
                    common.setContainers($this);
                    var selectedMapLink = common.widget.container.querySelector('.numeric-metrics__map > .metrics-header a.metrics-nav__item-link.metrics-selected--js');
                    if ($this.classList.contains('metrics-selected--js')) {
                        return;
                    }
                    selectedMapLink.classList.remove('metrics-selected--js');
                    $this.classList.add('metrics-selected--js');
                    numericMetrics.map.content(selectedMapTab);
                });
            });
            menu.dropdown(numericMetrics.container.querySelector('.metrics-menu--download .metrics-menu__link'), common.selector);
            menu.dropdown(numericMetrics.container.querySelector('.metrics-menu--share .metrics-menu__link'), common.selector);
            menu.dropdown(numericMetrics.container.querySelector('.metrics-tabs__link'), common.selector);
            var socialLinks = numericMetrics.container.querySelectorAll('.metrics-menu--share .metrics-menu__dropdown-link'),
                downloadLinks = numericMetrics.container.querySelectorAll('.metrics-menu--download .metrics-menu__dropdown-link');
            window.addEventListener('load', function (event) {
                if (socialLinks) {
                    var script = document.createElement('script');
                    script.type = 'text/javascript';
                    script.defer = 'defer';
                    script.src = 'https://static.addtoany.com/menu/page.js';
                    document.getElementsByTagName('head')[0].appendChild(script);
                }
            });
            socialLinks.forEach(function (socialLink) {
                socialLink.addEventListener('click', function (e) {
                    var doi = data.data.doi;
                    trackArticleMetrics.numericCaptureEvents('share', null, doi, null, e.currentTarget.dataset.service);
                });
            });
            downloadLinks.forEach(function (downloadLink) {
                var doi = data.data.doi;
                downloadLink.addEventListener('click', function (_) {
                    return trackArticleMetrics.numericCaptureEvents('download', null, doi);
                });
            });
        },
        selections: function selections() {
            numericMetrics.selectedTabs = numericMetrics.container.querySelectorAll(".".concat(common.selector, " > .metrics-header .metrics-nav__item-link.metrics-selected--js"));
            var linkNotDisabled = numericMetrics.container.querySelectorAll(".".concat(common.selector, " > .metrics-header .metrics-nav__item-link"))[0].classList.contains('metrics-nav__item-link--disabled');
            if (numericMetrics.selectedTabs.length === 0 && !linkNotDisabled) {
                numericMetrics.container.querySelector(".".concat(common.selector, " > .metrics-header .metrics-nav__item-link")).classList.add('metrics-selected--js');
                numericMetrics.selectedTabs = numericMetrics.container.querySelectorAll(".".concat(common.selector, " > .metrics-header .metrics-nav__item-link.metrics-selected--js"));
            }
        },
        chartTooltip: function chartTooltip(title, data) {
            var timer,
                navIndex = nav.index,
                metricsColor = common.widget.data[common.widget.containerIndex].dataSections[navIndex].color;
            common.widget.svg.selectAll(".".concat(common.selector, " .metrics-chart .dot--").concat(title)).on('mouseover', function (d) {
                common.init({
                    widget: this,
                    selector: 'numeric-metrics'
                });
                common.setContainers(this);
                var doi = data.doi;
                timer = setTimeout(function (_) {
                    trackArticleMetrics.init('point-hover', title, doi);
                }, 500);
                numericMetrics.tooltip = select(".metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
                var monthYear = common.parsedDate(d.month ? d.month : d.day),
                    formatDate = common.isfirstNDays ? timeFormat('%d %b %y') : timeFormat('%b %y');
                numericMetrics.tooltip.classed("active--js metrics-chart__tooltip--".concat(title, " ").concat(metricsColor ? "metrics-chart__tooltip--".concat(metricsColor) : ""), true);
                numericMetrics.tooltip.html("<div>".concat(formatDate(monthYear), "</div><b>").concat(d.count, "</b>"));
            }).on('mousemove', function (_) {
                return numericMetrics.setToolTipPosition();
            }).on('mouseout', function (_) {
                clearTimeout(timer);
                numericMetrics.tooltip = select(".metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
                numericMetrics.tooltip.attr("class", "metrics-chart__tooltip metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
            });
        },
        setToolTipPosition: function setToolTipPosition() {
            numericMetrics.tooltip = numericMetrics.container.querySelector(".metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
            var tooltipHeight = numericMetrics.tooltip.clientHeight + 24,
                tooltipWidth = numericMetrics.tooltip.clientWidth / 2,
                offsetLeft = numericMetrics.container.getBoundingClientRect().left,
                offsetTop = numericMetrics.container.getBoundingClientRect().top,
                topPos = event$1.pageY - document.documentElement.scrollTop - tooltipHeight - offsetTop,
                leftPos = event$1.pageX - document.documentElement.scrollLeft - tooltipWidth - offsetLeft;
            numericMetrics.tooltip.style.top = "".concat(topPos, "px");
            numericMetrics.tooltip.style.left = "".concat(leftPos, "px");
        },
        map: {
            init: function init() {
                var selected = numericMetrics.container.querySelector('.numeric-metrics__map > .metrics-header a.metrics-nav__item-link.metrics-selected--js');
                if (selected) {
                    var id = selected.dataset.title;
                    numericMetrics.mapWidth = 955;
                    numericMetrics.mapHeight = 296;
                    numericMetrics.mapSVG = select(numericMetrics.container.querySelector('.numeric-metrics__map-geo')).append('svg').attr('font-family', 'sans-serif').attr('class', 'numeric-metrics__map-geo-svg').attr('width', '100%').attr('height', '100%').attr('preserveAspectRatio', 'xMinYMin').attr('viewBox', "0 0 ".concat(numericMetrics.mapWidth, " ").concat(numericMetrics.mapHeight));
                    numericMetrics.map.content(id);
                }
            },
            content: function content(selected) {
                var projection = equirectangular().translate([numericMetrics.mapWidth / 2, 170]).scale(110),
                    path = index().projection(projection),
                    mapMargin = {
                        top: 32,
                        right: 32,
                        bottom: 32,
                        left: 32
                    };
                var data = common.widget.data[common.widget.containerIndex],
                    containerSelector = select(numericMetrics.container);
                numericMetrics.mapSVG = select(numericMetrics.container.querySelector('.numeric-metrics__map-geo-svg'));
                var geo = dataSource.map,
                    tabIndex = data.dataSections.map(function (a) {
                        return a.id;
                    }).indexOf(selected),
                    sourceCountries = data.dataSections[tabIndex].countries,
                    map = feature(geo, geo.objects.countries).features;
                if (sourceCountries) {
                    var tabColor = containerSelector.select(".numeric-metrics__map > .metrics-header a.metrics-nav__item-link.metrics-selected--js").style('background-color'),
                        mapColor = "rgba".concat(tabColor.slice(3, tabColor.length - 1), ", .3)"),
                        dataCounts = Object.keys(sourceCountries).map(function (e) {
                            return sourceCountries[e];
                        }),
                        maxCount = max(dataCounts.map(function (d) {
                            return +d;
                        })),
                        totalCount = dataCounts.reduce(function (a, b) {
                            return Number(a) + Number(b);
                        }, 0),
                        footer = containerSelector.select('.numeric-metrics__map-footer-countries'),
                        footerData = map.filter(function (d) {
                            var mapSourceData = sourceCountries[d.id];
                            if (mapSourceData === undefined) mapSourceData = 0;
                            return d.count = mapSourceData;
                        }).sort(function (a, b) {
                            return b.count - a.count;
                        });
                    numericMetrics.map.reset();
                    var footerTitle = containerSelector.select('.numeric-metrics__map-footer-title');
                    containerSelector.select(".numeric-metrics__map .metric-icon-fill--".concat(selected)).classed('metrics-selected--js', true);
                    var mapTitle = "".concat(translations.numericMap.mapTitleOfWord[lang], " ").concat(translations.numericMap.mapTitle[lang]);
                    containerSelector.select('.metric-title').style('opacity', 0).text(mapTitle).transition().duration(700).style('opacity', 1);
                    footerTitle.attr('class', "numeric-metrics__map-footer-title numeric-metrics__map-footer-title--".concat(selected, " numeric-metrics__map-footer-title--").concat(data.dataSections[tabIndex].color));
                    var color = linear$2().domain([0, maxCount]).range([mapColor, tabColor]),
                        mapGroup = numericMetrics.mapSVG.append('g').attr('class', 'metrics-countries'),
                        legendsGroup = numericMetrics.mapSVG.append('g').attr('class', 'metrics-map-legends').attr('transform', "translate(".concat(mapMargin.left, ", 0)")),
                        zoom$1 = zoom().scaleExtent([1, 40]).translateExtent([[0, 0], [numericMetrics.mapWidth, numericMetrics.mapHeight]]).extent([[0, 0], [numericMetrics.mapWidth, numericMetrics.mapHeight]]).on("zoom", function (_) {
                            mapGroup.attr("transform", event$1.transform);
                            hideTooltip();
                        });
                    numericMetrics.mapSVG.call(zoom$1);
                    mapGroup.selectAll('.metrics-countries').data(map).enter().append('path').attr('class', 'metrics-country').attr('fill', mapColor).style('opacity', 0).attr('fill', function (d) {
                        var mapSourceData = sourceCountries[d.id];
                        if (mapSourceData === undefined) mapSourceData = 0;
                        return color(d.count = mapSourceData);
                    }).attr('d', path).transition().duration(500).style('opacity', 1);
                    footer.selectAll('.map-country--js').data(footerData).enter().append('span').attr('class', 'map-country--js metrics-hide').text(function (d, i) {
                        var percent = Math.round(100 * d.count / totalCount),
                            decimal = "".concat(100 * d.count / totalCount),
                            decimalFixed = decimal.substr(1, decimal.search(/[1-9]/) + 1);
                        if (i <= data.mapTopNLimit - 1) {
                            // Country names lang needs refactoring along with the data.js to support all languages
                            return "".concat(lang === 'no' ? d.properties.NAME_NO : d.properties.NAME_ENGL, " ").concat(decimal > 1 ? percent : parseFloat(decimalFixed).toFixed(decimalFixed.length - 2), "%");
                        }
                    }).transition().duration(1000).attr('class', 'map-country--js metrics-show--js');
                    footerData.length >= data.mapTopNLimit ? footerTitle.text(translations.numericMap.footerTitle.topTitle[lang](data.mapTopNLimit)) : footerTitle.text(translations.numericMap.footerTitle.title[lang]);
                    numericMetrics.mapSVG.selectAll('.metrics-country').on('mouseover', showTooltip).on('mousemove', function (_) {
                        return numericMetrics.setToolTipPosition();
                    }).on('mouseout', hideTooltip).on('touchstart', showTooltip);
                    function hideTooltip() {
                        numericMetrics.tooltip = select(".metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
                        numericMetrics.tooltip.attr("class", "metrics-chart__tooltip metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
                    }
                    function showTooltip(d) {
                        numericMetrics.tooltip = select(".metrics-chart__tooltip-".concat(numericMetrics.containerIndex));
                        if (d.count !== 0) {
                            var percent = Math.round(100 * d.count / totalCount),
                                decPercent = "\"".concat(100 * d.count / totalCount, "\"");
                            numericMetrics.tooltip.classed("active--js metrics-chart__tooltip--".concat(selected, " ").concat(data.dataSections[tabIndex].color ? "metrics-chart__tooltip--".concat(data.dataSections[tabIndex].color) : ""), true);
                            numericMetrics.tooltip.html(function (_) {
                                return "<div>".concat(lang === 'no' ? d.properties.NAME_NO : d.properties.NAME_ENGL, "</div><b>").concat(d.count, " (").concat(percent > 1 ? percent : decPercent.substr(1, decPercent.search(/[1-9]/)), "%)</b>");
                            });
                        }
                    }
                    var defs = legendsGroup.append('defs'),
                        linearGradient = defs.append('linearGradient').attr('id', "metrics-linear-gradient--".concat(selected));
                    linearGradient.selectAll('stop').data([{
                        offset: '0%',
                        color: "rgba".concat(tabColor.slice(3, tabColor.length - 1), ", .0)")
                    }, {
                        offset: '100%',
                        color: tabColor
                    }]).enter().append('stop').attr('offset', function (d) {
                        return d.offset;
                    }).attr('stop-color', function (d) {
                        return d.color;
                    });
                    legendsGroup.append('text').attr('class', 'metrics-map-legends__text').text('1').style('opacity', 0).attr('transform', "translate(0, ".concat(numericMetrics.mapHeight - 29, ")")).transition().duration(300).style('opacity', 1);
                    legendsGroup.append('rect').attr('width', 50).attr('height', 12).attr('y', numericMetrics.mapHeight - 40).attr('x', 10).style('fill', "url(#metrics-linear-gradient--".concat(selected, ")")).style('opacity', 0).transition().duration(600).attr('width', 133).style('opacity', 1);
                    var numberFormat = format(',d');
                    legendsGroup.append('text').style('opacity', 0).attr('transform', "translate(50, ".concat(numericMetrics.mapHeight - 29, ")")).attr('class', 'metrics-map-legends__text').text(numberFormat(maxCount)).transition().duration(600).attr('transform', "translate(148, ".concat(numericMetrics.mapHeight - 29, ")")).style('opacity', 1);
                }
            },
            reset: function reset() {
                numericMetrics.mapSVG.selectAll('.metrics-country').transition().duration(500).style('opacity', 0).remove();
                numericMetrics.mapSVG.select('.metrics-map-legends').transition().duration(200).style('opacity', 0).remove();
                select(numericMetrics.container).selectAll('.map-country--js').remove();
                select(numericMetrics.container).selectAll('.numeric-metrics__map .metric-icon-fill').classed('metrics-selected--js', false);
            }
        }
    };

    var toolbarMetrics = {
        data: [],
        container: '',
        containerIndex: 0,
        init: function init(index, data) {
            common.init({
                widget: this,
                selector: 'toolbar-metric'
            });
            toolbarMetrics.containerIndex = index;
            common.setContainers();
            common.widget.data.push(data.data);
            var goToMetrics = common.widget.container.querySelector('.toolbar-metric__metrics-link');
            menu.dropdown(common.widget.container.querySelector(".toolbar-metric__link"), common.selector);
            if (goToMetrics) {
                goToMetrics.addEventListener('click', function (_) {
                    return trackArticleMetrics.toolbarCaptureEvents('full-page', null);
                });
            }
            common.widget.container.querySelectorAll('.toolbar-metric__total .total-text').forEach(function (element) {
                return common.counter(element);
            });
        }
    };

    var subTitle = {
        $container: null,
        $metricsBtn: null,
        init: function init() {
            subTitle.create();
        },
        create: function create() {
            var $periodTabs = common.widget.container.querySelector('.metrics-tabs');
            subTitle.$container = common.widget.container.querySelector('.metrics-sub-title');
            if (!$periodTabs) return;
            if (!$periodTabs.parentNode.contains(subTitle.$container) && common.anyHasData) {
                var _subTitle = document.createElement('p');
                _subTitle.classList.add('metrics-sub-title');
                _subTitle.innerHTML = "".concat(translations.start[lang], "\n                <span class=\"metrics\"></span>\n                <span class=\"period-note\">\n                  ").concat(translations.end.text[lang]('6'), "\n                </span>");
                $periodTabs.parentNode.insertBefore(_subTitle, $periodTabs.nextSibling);
            }
            !common.anyHasData ? subTitle.remove() : subTitle.updateText();
        },
        remove: function remove() {
            subTitle.$container && subTitle.$container.remove();
        },
        updateText: function updateText() {
            subTitle.$metricsBtn = common.widget.container.querySelector(".metrics");
            subTitle.setMetricsText();
            subTitle.setPeriodsText();
        },
        setMetricsText: function setMetricsText() {
            var metricsTexts = [];
            common.widget.selectedTabs.forEach(function (metrics) {
                if (metrics && metrics.classList.contains('metrics-selected--js')) {
                    metricsTexts.push(metrics.innerText);
                }
            });
            var formattedText = metricsTexts.join(', ').replace(/,(?=[^,]*$)/, " ".concat(translations.and[lang]));
            if (subTitle.$metricsBtn) subTitle.$metricsBtn.innerText = formattedText.toLowerCase();
        },
        setPeriodsText: function setPeriodsText() {
            var $periodNote = common.widget.container.querySelector(".metrics-sub-title .period-note"),
                periods = {
                    last6: 6,
                    last12: 12
                },
                $selectedTab = common.widget.container.querySelector(".metrics-tabs__item-link.metrics-selected--js"),
                selectedTabText = $selectedTab && $selectedTab.dataset.title;
            if (!$periodNote) {
                return;
            }
            switch (selectedTabText) {
                case 'total':
                    $periodNote.innerText = "";
                    break;
                case 'firstNDays':
                    var firstNDays = $selectedTab && $selectedTab.dataset.nDays;
                    $periodNote.innerText = translations.end.fmText[lang](firstNDays);
                    break;
                default:
                    $periodNote.innerText = translations.end.text[lang](periods[selectedTabText]);
            }
        }
    };

    var sidebarMetric = {
        data: [],
        svg: '',
        valueLine: '',
        margin: {},
        width: null,
        height: null,
        dataCounts: '',
        yScale: '',
        xScale: '',
        selectedSections: [],
        dataMonths: '',
        dataDates: '',
        x_axis: '',
        y_axis: '',
        selectedTabs: [],
        selectedTabDataTitle: '',
        svgContainerWidth: 0,
        container: '',
        containerIndex: 0,
        init: function init(index, data) {
            common.init({
                widget: this,
                selector: 'sidebar-metric'
            });
            common.widget.containerIndex = index;
            common.setContainers();
            sidebarMetric.control(data);
            chart.init(data);
            subTitle.init();
        },
        control: function control(data) {
            var _this = this;
            var navLinks = common.widget.container.querySelector(".sidebar-metric__content-section").querySelectorAll("a.metrics-nav__item-link"),
                periodLinks = common.widget.container.querySelectorAll('.metrics-tabs__item-link'),
                goToMetrics = common.widget.container.querySelector(".metrics-link");
            navLinks.forEach(function (navLink) {
                navLink.addEventListener('click', function (e) {
                    common.init({
                        widget: _this,
                        selector: 'sidebar-metric'
                    });
                    common.setContainers(e.currentTarget);
                    common.firstNDays();
                    nav.handler(e, navLink);
                    chart.eventUpdate();
                    chart.reset(e);
                    subTitle.init();
                });
            });
            periodLinks.length && periodLinks.forEach(function (periodLink) {
                periodLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    common.init({
                        widget: _this,
                        selector: 'sidebar-metric'
                    });
                    tabs.thisTab = e.currentTarget;
                    if (!tabs.thisTab.classList.contains('metrics-selected--js')) {
                        tabs.init();
                        chart.reset(e);
                        subTitle.init();
                    }
                });
            });
            if (goToMetrics) {
                goToMetrics.addEventListener('click', function (_) {
                    common.init({
                        widget: _this,
                        selector: 'sidebar-metric'
                    });
                    common.setContainers(goToMetrics);
                    var doi = data.data.doi;
                    trackArticleMetrics.init('full-page', null, doi);
                });
            }
        },
        selections: function selections() {
            sidebarMetric.selectedTabs = sidebarMetric.container.querySelectorAll(".".concat(common.selector, " > .sidebar-metric__content-section .metrics-nav__item-link.metrics-selected--js"));
            var linkNotDisabled = sidebarMetric.container.querySelectorAll(".".concat(common.selector, " > .sidebar-metric__content-section .metrics-nav__item-link"))[0].classList.contains('metrics-nav__item-link--disabled');
            if (sidebarMetric.selectedTabs.length === 0 && !linkNotDisabled) {
                sidebarMetric.container.querySelector(".".concat(common.selector, " > .sidebar-metric__content-section .metrics-nav__item-link")).classList.add('metrics-selected--js');
                sidebarMetric.selectedTabs = sidebarMetric.container.querySelectorAll(".".concat(common.selector, " > .sidebar-metric__content-section .metrics-nav__item-link.metrics-selected--js"));
            }
        },
        chartTooltip: function chartTooltip(title, data) {
            var timer;
            common.widget.svg.selectAll(".sidebar-metric .metrics-chart .dot--".concat(title)).on('mouseover', function () {
                common.init({
                    widget: this,
                    selector: 'sidebar-metric'
                });
                common.setContainers(this);
                var doi = data.doi;
                timer = setTimeout(function (_) {
                    trackArticleMetrics.sidebarCaptureEvents('point-hover', title, doi);
                }, 500);
            }).on('mouseout', function (_) {
                clearTimeout(timer);
            });
        }
    };

    var table = {
        tbody: '',
        rows: '',
        columns: '',
        index: 0,
        init: function init() {
            table.tbody = select(common.widget.container).select(".".concat(common.selector, " .metrics-table tbody"));
            table.tbody.html('');
            table.body();
        },
        body: function body() {
            table.rows = table.tbody.selectAll('tr').data(common.widget.ajax.data).enter().append('tr');
            common.widget.ajax.data.length > 0 ? table.cells() : table.empty();
        },
        cells: function cells() {
            table.rows.append('td').attr('class', function (d) {
                return d;
            });
        },
        sort: function sort(e) {
            e.target.dataset.sort === 'asc' ? e.target.dataset.sort = 'desc' : e.target.dataset.sort = 'asc';
        },
        empty: function empty() {
            var theadLength = common.widget.container.querySelectorAll('.metrics-table thead th').length;
            table.tbody.append('tr').append('td').attr('colspan', theadLength).text('This article does not have any data available yet. Data is refreshed daily and will be displayed as soon as it becomes available, so please check again later');
        }
    };

    var pagination = {
        main: '',
        list: '',
        link: '',
        totalPages: 0,
        startPage: 1,
        endPage: 5,
        maxPages: 0,
        closeToTotal: false,
        closeToFirst: false,
        pageOrLess: false,
        init: function init(e) {
            pagination.setTotalPages();
            pagination.build(e);
        },
        build: function build(event) {
            pagination.main = select(common.widget.container.querySelector(".metrics-pagination"));
            pagination.list = pagination.main.select('.metrics-pagination__list');
            pagination.maxPages = pagination.totalPages <= 5 ? pagination.totalPages : 5;
            if (event) {
                pagination.control.nextPart(event);
            }
            if (pagination.totalPages < pagination.endPage) {
                pagination.endPage = pagination.totalPages;
            }
            pagination.closeToFirst = pagination.startPage - 1 === 1;
            pagination.closeToTotal = pagination.endPage + 1 === pagination.totalPages;
            pagination.closeToTotal = pagination.endPage + 1 === pagination.totalPages;
            pagination.closeToTotal ? pagination.endPage = pagination.endPage + 1 : pagination.endPage;

            // clear
            pagination.list.html('');

            // dots
            if (pagination.startPage > 1) {
                var firstLink = pagination.list.append('a').attr('class', 'metrics-pagination__link metrics-pagination__link--first').attr('href', '#').attr('data-number', 1).text(1);
                if (!pagination.closeToFirst) {
                    var firstDots = pagination.list.append('span').attr('class', 'metrics-pagination__dots metrics-pagination__dots--first').text('...');
                }
            }

            // pagination links
            pagination.pageOrLess = pagination.startPage <= 1 && pagination.endPage <= 1;
            if (!pagination.pageOrLess) {
                pagination.link = pagination.list.selectAll('.metrics-pagination__link').filter(function () {
                    return !this.classList.contains('metrics-pagination__link--first');
                }).data(function (_) {
                    var pages = [];
                    for (var i = pagination.startPage; i <= pagination.endPage; i++) {
                        pages.push(i);
                    }
                    return pages;
                }).enter().append('a').attr('href', '#').attr('class', function (d) {
                    return d === common.widget.ajax.selectedPageNumber ? 'metrics-pagination__link active' : 'metrics-pagination__link';
                }).attr('data-number', function (d) {
                    return d;
                }).text(function (d) {
                    return d;
                });
            }

            // dots
            if (pagination.endPage !== pagination.totalPages) {
                if (!pagination.closeToTotal) {
                    var lastDots = pagination.list.append('span').attr('class', 'metrics-pagination__dots metrics-pagination__dots--last').text('...');
                    var lastLink = pagination.list.append('a').attr('class', 'metrics-pagination__link metrics-pagination__link--last').attr('href', '#').attr('data-number', pagination.totalPages).text(pagination.totalPages);
                }
            }

            // prev link
            pagination.main.select('.metrics-pagination__btn--prev').attr('class', common.widget.ajax.selectedPageNumber <= 1 ? 'metrics-pagination__btn--prev metrics-hide--js' : 'metrics-pagination__btn--prev');

            // next link
            pagination.main.select('.metrics-pagination__btn--next').attr('class', common.widget.ajax.selectedPageNumber === pagination.totalPages || pagination.totalPages < 1 ? 'metrics-pagination__btn--next metrics-hide--js' : 'metrics-pagination__btn--next');
        },
        control: {
            nextPart: function nextPart(e) {
                if (common.widget.ajax.isResetPagination) {
                    pagination.startPage = 1;
                    pagination.endPage = pagination.maxPages;
                    common.widget.ajax.selectedPageNumber = 1;
                    return;
                }
                var container = e.target.closest('.mention-list').querySelector('.metrics-pagination'),
                    activeNumber = parseInt(container.querySelector('.active').dataset.number);
                var jumpNumber = 2;
                if (activeNumber === pagination.endPage && activeNumber !== pagination.totalPages) {
                    pagination.startPage = activeNumber - jumpNumber;
                    pagination.endPage += jumpNumber;
                    if (pagination.endPage > pagination.totalPages) {
                        jumpNumber = jumpNumber - (pagination.endPage - pagination.totalPages);
                        pagination.startPage = activeNumber - jumpNumber;
                        pagination.endPage -= jumpNumber;
                    }
                }
                if (activeNumber === pagination.startPage && activeNumber !== 1) {
                    pagination.endPage -= jumpNumber;
                    if (pagination.startPage > 2) {
                        pagination.startPage = activeNumber - jumpNumber;
                    } else {
                        pagination.startPage = 1;
                        pagination.endPage = pagination.maxPages;
                    }
                }
                if (e.target.classList.contains('metrics-pagination__link--last')) {
                    pagination.endPage = pagination.totalPages;
                    pagination.startPage = pagination.totalPages - 4;
                }
                if (e.target.classList.contains('metrics-pagination__link--first')) {
                    pagination.endPage = pagination.maxPages;
                    pagination.startPage = 1;
                }
            },
            select: function select(e) {
                var paginationContainer = e.target.closest('.metrics-pagination'),
                    activeLink = paginationContainer.querySelector('.active');
                if (!e.target.matches('.active')) {
                    activeLink.classList.remove('active');
                    e.target.classList.add('active');
                    pagination.control.toggleNextPrev(e);
                }
            },
            nextPrev: function nextPrev(e, prevLink) {
                var container = e.target.closest('.metrics-pagination'),
                    activeLink = container.querySelector('.active');
                var activeLinkNumber = parseInt(activeLink.dataset.number);
                activeLink.classList.remove('active');
                prevLink ? activeLinkNumber = activeLinkNumber - 2 : activeLinkNumber;
                container.querySelector("[data-number='".concat(activeLinkNumber + 1, "']")).classList.add('active');
                pagination.control.toggleNextPrev(e);
            },
            prev: function prev(e) {
                pagination.control.nextPrev(e, true);
            },
            toggleNextPrev: function toggleNextPrev(e) {
                var container = e.target.closest('.metrics-pagination'),
                    link = container.querySelector('.metrics-pagination__list .active'),
                    prevLink = container.querySelector('.metrics-pagination__btn--prev'),
                    nextLink = container.querySelector('.metrics-pagination__btn--next'),
                    firstActiveLink = link.dataset.number === "1",
                    lastActiveLink = link.dataset.number === "".concat(pagination.totalPages);
                firstActiveLink ? prevLink.classList.add('metrics-hide--js') : prevLink.classList.remove('metrics-hide--js');
                lastActiveLink ? nextLink.classList.add('metrics-hide--js') : nextLink.classList.remove('metrics-hide--js');
            }
        },
        setTotalPages: function setTotalPages() {
            var totalElements = common.widget.container.querySelectorAll(".metrics-total .metrics-total__item.metrics-selected--js .metrics-total__item-text");
            var totalCount = 0;
            totalElements.forEach(function (totalElement) {
                totalCount += parseInt(totalElement.dataset.count);
            });
            pagination.totalPages = Math.ceil(totalCount / common.widget.pageSize); //disabled for test
        }
    };

    var mentionList = {
        data: [],
        dataSectionIndex: '',
        selectedSections: [],
        selectedTabs: '',
        selectedTabDataTitle: '',
        container: '',
        containerIndex: 0,
        pageSize: 0,
        init: function init(index, data) {
            common.init({
                widget: this,
                selector: 'mention-list'
            });
            common.widget.data.push(data.data);
            mentionList.containerIndex = index;
            common.setContainers();
            mentionList.selections();
            mentionList.setActiveTotals();
            mentionList.control();
            mentionList.ajax.init();
        },
        control: function control() {
            var _this = this;
            var navLinks = common.widget.container.querySelector(".metrics-header").querySelectorAll("a.metrics-nav__item-link");
            navLinks.forEach(function (navLink) {
                navLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    common.init({
                        widget: _this,
                        selector: 'mention-list'
                    });
                    nav.handler(e);
                    mentionList.ajax.init(e);
                });
            });
            document.addEventListener('click', function (e) {
                if (e.target.matches('.mention-list-container')) {
                    common.init({
                        widget: _this,
                        selector: 'mention-list'
                    });
                }
                if (e.target.matches('.metrics-pagination__link')) {
                    e.preventDefault();
                    pagination.control.select(e);
                    mentionList.ajax.init(e);
                }
                if (e.target.matches('.metrics-pagination__btn--next > a')) {
                    e.preventDefault();
                    pagination.control.nextPrev(e, false);
                    mentionList.ajax.init(e);
                }
                if (e.target.matches('.metrics-pagination__btn--prev > a')) {
                    e.preventDefault();
                    pagination.control.prev(e);
                    mentionList.ajax.init(e);
                }
                if (e.target.matches('.metrics-table__sort')) {
                    e.preventDefault();
                    table.sort(e);
                    mentionList.ajax.init(e);
                }
            });
        },
        selections: function selections() {
            mentionList.selectedTabs = mentionList.container.querySelectorAll(".".concat(common.selector, " .metrics-nav__item-link.metrics-selected--js"));
            if (mentionList.selectedTabs.length === 0) {
                mentionList.container.querySelector(".".concat(common.selector, " .metrics-nav__item-link")).classList.add('metrics-selected--js');
                mentionList.selectedTabs = mentionList.container.querySelectorAll(".".concat(common.selector, " .metrics-nav__item-link.metrics-selected--js"));
            }
        },
        setActiveTotals: function setActiveTotals() {
            var activeNavLinks = common.widget.container.querySelector(".metrics-header").querySelectorAll("a.metrics-nav__item-link.metrics-selected--js");
            activeNavLinks.forEach(function (nav) {
                total.init(nav.dataset.title);
                total.add();
            });
        },
        tableCells: function tableCells() {
            table.rows.append('td').attr('class', "metrics-table__source").attr('data-title', 'Source').html(function (d) {
                return "".concat(common.widget.container.querySelector(".metrics-nav__item-link--".concat(d.source, " .metrics-icon")).outerHTML);
            });
            table.rows.append('td').attr('class', "metrics-table__title").attr('data-title', 'Title').html(function (d) {
                return "<a href=".concat(d.url, " target=\"_blank\">").concat(d.title, "</a>");
            });
            table.rows.append('td').attr('class', "metrics-table__user").attr('data-title', 'Author').html(function (d) {
                if (d.authorLink) {
                    return "<a href='".concat(d.authorLink, "' target=\"_blank\">").concat(d.author ? d.author : 'View author', "</a>");
                } else if (d.author && !d.authorLink) {
                    return d.author;
                } else {
                    return 'n/a';
                }
            });
            table.rows.append('td').attr('class', "metrics-table__date").attr('data-title', 'Date').html(function (d) {
                return "".concat(d.date);
            });

            /*table.rows.append('td')
	        .attr('class', `metrics-table__performance`)
	        .attr('data-title', 'Performance')
	        .html(d => {
	            let listItems = '';
	            for (const share in d.performance) {
	                listItems += `<li>${common.icons.share[share]}<span>${d.performance[share]}</span></li>`
	            }
	            return `<ul class='metrics-table__performance metrics-rlist--inline'>${listItems}</ul>`
	        });*/
        },
        ajax: {
            url: '',
            selectedPageNumber: 1,
            sort: '',
            param: {},
            sortName: 'date',
            doi: '',
            data: [],
            isResetPagination: false,
            init: function init(event) {
                event ? common.widget.container = event.target.closest(".mention-list-container") : common.widget.container;
                common.widget.container.querySelector('.mention-list__loading').classList.add('metrics-show--js');
                mentionList.ajax.setParam(event);
                common.ajax(mentionList.ajax.url, mentionList.ajax.param, function (data) {
                    mentionList.ajax.data = data;
                    mentionList.build(event);
                    common.widget.container.querySelector('.mention-list__loading').classList.remove('metrics-show--js');
                });
            },
            setParam: function setParam(event) {
                var selectedTabTitle = [];
                var selectedTabs = common.widget.container.querySelector(".metrics-nav").querySelectorAll(".metrics-selected--js"),
                    activePaginationPage = common.widget.container.querySelector('.metrics-pagination .metrics-pagination__list .active'),
                    data = common.widget.data[common.widget.containerIndex];
                selectedTabs.forEach(function (tabTitle) {
                    return selectedTabTitle.push("".concat(tabTitle.dataset.title));
                });
                if (event) {
                    mentionList.ajax.isResetPagination = event.target.closest('.metrics-nav__item-link') || event.target.classList.contains('metrics-nav__item-link') || event.target.classList.contains('metrics-table__sort');
                    mentionList.ajax.isResetPagination ? mentionList.ajax.selectedPageNumber = 1 : mentionList.ajax.selectedPageNumber = parseInt(activePaginationPage.dataset.number);
                } else {
                    mentionList.ajax.selectedPageNumber = 1;
                }
                mentionList.ajax.sort = common.widget.container.querySelector('.metrics-table__sort').dataset.sort;
                common.widget.pageSize = data.pageSize;
                mentionList.ajax.doi = data.doi;
                mentionList.ajax.param.types = selectedTabTitle;
                mentionList.ajax.param.sort = mentionList.ajax.sort;
                mentionList.ajax.param.pageNumber = mentionList.ajax.selectedPageNumber;
                mentionList.ajax.param.doi = mentionList.ajax.doi;
                mentionList.ajax.param.pageSize = common.widget.pageSize;
                // mentionList.ajax.url = `/src/widgets/mention-list/templates/data/stackexchange.json`; // enable this and change the method to GET to test the mention list
                mentionList.ajax.url = "/pb/widgets/mentionList/getData";
            }
        },
        build: function build(e) {
            common.init({
                widget: mentionList,
                selector: 'mention-list'
            });
            table.cells = mentionList.tableCells;
            table.init();
            pagination.init(e);
        }
    };

    var polyfill = {
        remove: function remove() {
            [Element.prototype, CharacterData.prototype, DocumentType.prototype].forEach(function (item) {
                if (item.hasOwnProperty('remove')) {
                    return;
                }
                Object.defineProperty(item, 'remove', {
                    configurable: true,
                    enumerable: true,
                    writable: true,
                    value: function remove() {
                        if (this.parentNode === null) {
                            return;
                        }
                        this.parentNode.removeChild(this);
                    }
                });
            });
        },
        closest: function closest() {
            if (!Element.prototype.matches) {
                Element.prototype.matches = Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
            }
            if (!Element.prototype.closest) {
                Element.prototype.closest = function (s) {
                    var el = this;
                    do {
                        if (el.matches(s)) return el;
                        el = el.parentElement || el.parentNode;
                    } while (el !== null && el.nodeType === 1);
                    return null;
                };
            }
        },
        foreach: function foreach() {
            if (typeof NodeList.prototype.forEach === "function") return false;else NodeList.prototype.forEach = Array.prototype.forEach;
        }
    };

    document.addEventListener('DOMContentLoaded', function (_) {
        var numericDataInputs = document.querySelectorAll('.numeric-metrics-container .numeric-metrics__data'),
            numericDataInputsAjax = document.querySelectorAll('.numeric-metrics-container.data-source'),
            toolbarDataInputs = document.querySelectorAll('.toolbar-metric-container .toolbar-metric__data'),
            toolbarDataInputsAjax = document.querySelectorAll('.toolbar-metric-container.data-source'),
            sidebarDataInputs = document.querySelectorAll('.sidebar-metric-container .sidebar-metric__data'),
            sidebarDataInputsAjax = document.querySelectorAll('.sidebar-metric-container.data-source'),
            mentionListDataInputs = document.querySelectorAll('.mention-list-container .mention-list__data'),
            mentionListDataInputsAjax = document.querySelectorAll('.mention-list-container.data-source');
        if (toolbarDataInputs.length > 0) {
            toolbarDataInputs.forEach(function (input, index) {
                input.insertAdjacentHTML('afterend', toolbarTemplate(dataSource.parsedData.toolbar(index)));
                toolbarMetrics.init(index, dataSource.parsedData.toolbar(index));
            });
        }
        if (toolbarDataInputsAjax.length > 0) {
            toolbarDataInputsAjax.forEach(function (input, index) {
                dataSource.parsedData.toolbarajax(index).then(function (data) {
                    input.insertAdjacentHTML('afterbegin', toolbarTemplate(data));
                    toolbarMetrics.init(index, data);
                });
            });
        }
        if (sidebarDataInputs.length > 0) {
            sidebarDataInputs.forEach(function (input, index) {
                var element = input.closest('.sidebar-metric-container');
                element.dataset.index = index;
                input.insertAdjacentHTML('afterend', sidebarTemplate(dataSource.parsedData.sidebar(index)));
                if (element.clientWidth === 0) {
                    for (var e = element; e && e !== document; e = e.parentNode) {
                        if (getComputedStyle(e).display === 'none') {
                            e.classList.add('metrics-show__parent--js');
                        }
                    }
                    sidebarMetric.init(index, dataSource.parsedData.sidebar(index));
                    document.querySelectorAll('.metrics-show__parent--js').forEach(function (parent) {
                        parent.classList.remove('metrics-show__parent--js');
                    });
                } else {
                    sidebarMetric.init(index, dataSource.parsedData.sidebar(index));
                }
                document.addEventListener("sidebarMetric:re-init", function (_) {
                    return sidebarMetric.init(index, dataSource.parsedData.sidebar(index));
                });
            });
        }
        if (sidebarDataInputsAjax.length > 0) {
            sidebarDataInputsAjax.forEach(function (input, index) {
                var element = input;
                element.dataset.index = index;
                dataSource.parsedData.sidebarajax(index).then(function (data) {
                    input.insertAdjacentHTML('afterbegin', sidebarTemplate(data));
                    if (element.clientWidth === 0) {
                        for (var e = element; e && e !== document; e = e.parentNode) {
                            if (getComputedStyle(e).display === 'none') {
                                e.classList.add('metrics-show__parent--js');
                            }
                        }
                        sidebarMetric.init(index, data);
                        document.querySelectorAll('.metrics-show__parent--js').forEach(function (parent) {
                            parent.classList.remove('metrics-show__parent--js');
                        });
                    } else {
                        sidebarMetric.init(index, data);
                    }
                    document.addEventListener("sidebarMetric:re-init", function (_) {
                        return sidebarMetric.init(index, data);
                    });
                });
            });
        }
        if (numericDataInputs.length > 0) {
            numericDataInputs.forEach(function (input, index) {
                input.insertAdjacentHTML('afterend', numericTemplate(dataSource.parsedData.numeric(index)));
                numericMetrics.init(index, dataSource.parsedData.numeric(index));
            });
        }
        if (numericDataInputsAjax.length > 0) {
            numericDataInputsAjax.forEach(function (input, index) {
                dataSource.parsedData.numericajax(index).then(function (data) {
                    input.insertAdjacentHTML('afterbegin', numericTemplate(data));
                    numericMetrics.init(index, data);
                });
            });
        }
        if (mentionListDataInputs.length > 0) {
            mentionListDataInputs.forEach(function (input, index) {
                input.insertAdjacentHTML('afterend', mentionListTemplate(dataSource.parsedData.mentionList(index)));
                mentionList.init(index, dataSource.parsedData.mentionList(index));
            });
        }
        if (mentionListDataInputsAjax.length > 0) {
            mentionListDataInputsAjax.forEach(function (input, index) {
                dataSource.parsedData.mentionListajax(index).then(function (data) {
                    input.insertAdjacentHTML('afterbegin', mentionListTemplate(data));
                    mentionList.init(index, data);
                });
            });
        }
    });
    polyfill.remove();
    polyfill.closest();
    polyfill.foreach();

}());


